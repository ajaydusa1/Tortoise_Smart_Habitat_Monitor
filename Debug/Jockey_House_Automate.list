
Jockey_House_Automate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac58  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800ad18  0800ad18  0000bd18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b284  0800b284  0000d1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b284  0800b284  0000c284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b28c  0800b28c  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b28c  0800b28c  0000c28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b290  0800b290  0000c290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b294  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001e0  0800b474  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  0800b474  0000d528  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013422  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a0  00000000  00000000  0002062a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  00022dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee8  00000000  00000000  000240c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018630  00000000  00000000  00024fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f5a  00000000  00000000  0003d5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098d40  00000000  00000000  0005353a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec27a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005920  00000000  00000000  000ec2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000f1be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800acfc 	.word	0x0800acfc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800acfc 	.word	0x0800acfc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fe53 	bl	80020e4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fd97 	bl	8001f7c <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fe45 	bl	80020e4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe3b 	bl	80020e4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fdc1 	bl	8002004 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fdb7 	bl	8002004 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	@ (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	@ (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f81e 	bl	8000514 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_f2uiz>:
 80004e4:	219e      	movs	r1, #158	@ 0x9e
 80004e6:	b510      	push	{r4, lr}
 80004e8:	05c9      	lsls	r1, r1, #23
 80004ea:	1c04      	adds	r4, r0, #0
 80004ec:	f002 fe80 	bl	80031f0 <__aeabi_fcmpge>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d103      	bne.n	80004fc <__aeabi_f2uiz+0x18>
 80004f4:	1c20      	adds	r0, r4, #0
 80004f6:	f000 fdad 	bl	8001054 <__aeabi_f2iz>
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	219e      	movs	r1, #158	@ 0x9e
 80004fe:	1c20      	adds	r0, r4, #0
 8000500:	05c9      	lsls	r1, r1, #23
 8000502:	f000 fb43 	bl	8000b8c <__aeabi_fsub>
 8000506:	f000 fda5 	bl	8001054 <__aeabi_f2iz>
 800050a:	2380      	movs	r3, #128	@ 0x80
 800050c:	061b      	lsls	r3, r3, #24
 800050e:	469c      	mov	ip, r3
 8000510:	4460      	add	r0, ip
 8000512:	e7f2      	b.n	80004fa <__aeabi_f2uiz+0x16>

08000514 <__udivmoddi4>:
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	4657      	mov	r7, sl
 8000518:	464e      	mov	r6, r9
 800051a:	4645      	mov	r5, r8
 800051c:	46de      	mov	lr, fp
 800051e:	b5e0      	push	{r5, r6, r7, lr}
 8000520:	0004      	movs	r4, r0
 8000522:	000d      	movs	r5, r1
 8000524:	4692      	mov	sl, r2
 8000526:	4699      	mov	r9, r3
 8000528:	b083      	sub	sp, #12
 800052a:	428b      	cmp	r3, r1
 800052c:	d830      	bhi.n	8000590 <__udivmoddi4+0x7c>
 800052e:	d02d      	beq.n	800058c <__udivmoddi4+0x78>
 8000530:	4649      	mov	r1, r9
 8000532:	4650      	mov	r0, sl
 8000534:	f002 fe84 	bl	8003240 <__clzdi2>
 8000538:	0029      	movs	r1, r5
 800053a:	0006      	movs	r6, r0
 800053c:	0020      	movs	r0, r4
 800053e:	f002 fe7f 	bl	8003240 <__clzdi2>
 8000542:	1a33      	subs	r3, r6, r0
 8000544:	4698      	mov	r8, r3
 8000546:	3b20      	subs	r3, #32
 8000548:	d434      	bmi.n	80005b4 <__udivmoddi4+0xa0>
 800054a:	469b      	mov	fp, r3
 800054c:	4653      	mov	r3, sl
 800054e:	465a      	mov	r2, fp
 8000550:	4093      	lsls	r3, r2
 8000552:	4642      	mov	r2, r8
 8000554:	001f      	movs	r7, r3
 8000556:	4653      	mov	r3, sl
 8000558:	4093      	lsls	r3, r2
 800055a:	001e      	movs	r6, r3
 800055c:	42af      	cmp	r7, r5
 800055e:	d83b      	bhi.n	80005d8 <__udivmoddi4+0xc4>
 8000560:	42af      	cmp	r7, r5
 8000562:	d100      	bne.n	8000566 <__udivmoddi4+0x52>
 8000564:	e079      	b.n	800065a <__udivmoddi4+0x146>
 8000566:	465b      	mov	r3, fp
 8000568:	1ba4      	subs	r4, r4, r6
 800056a:	41bd      	sbcs	r5, r7
 800056c:	2b00      	cmp	r3, #0
 800056e:	da00      	bge.n	8000572 <__udivmoddi4+0x5e>
 8000570:	e076      	b.n	8000660 <__udivmoddi4+0x14c>
 8000572:	2200      	movs	r2, #0
 8000574:	2300      	movs	r3, #0
 8000576:	9200      	str	r2, [sp, #0]
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	465a      	mov	r2, fp
 800057e:	4093      	lsls	r3, r2
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2301      	movs	r3, #1
 8000584:	4642      	mov	r2, r8
 8000586:	4093      	lsls	r3, r2
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	e029      	b.n	80005e0 <__udivmoddi4+0xcc>
 800058c:	4282      	cmp	r2, r0
 800058e:	d9cf      	bls.n	8000530 <__udivmoddi4+0x1c>
 8000590:	2200      	movs	r2, #0
 8000592:	2300      	movs	r3, #0
 8000594:	9200      	str	r2, [sp, #0]
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <__udivmoddi4+0x8e>
 800059e:	601c      	str	r4, [r3, #0]
 80005a0:	605d      	str	r5, [r3, #4]
 80005a2:	9800      	ldr	r0, [sp, #0]
 80005a4:	9901      	ldr	r1, [sp, #4]
 80005a6:	b003      	add	sp, #12
 80005a8:	bcf0      	pop	{r4, r5, r6, r7}
 80005aa:	46bb      	mov	fp, r7
 80005ac:	46b2      	mov	sl, r6
 80005ae:	46a9      	mov	r9, r5
 80005b0:	46a0      	mov	r8, r4
 80005b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b4:	4642      	mov	r2, r8
 80005b6:	469b      	mov	fp, r3
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	4652      	mov	r2, sl
 80005be:	40da      	lsrs	r2, r3
 80005c0:	4641      	mov	r1, r8
 80005c2:	0013      	movs	r3, r2
 80005c4:	464a      	mov	r2, r9
 80005c6:	408a      	lsls	r2, r1
 80005c8:	0017      	movs	r7, r2
 80005ca:	4642      	mov	r2, r8
 80005cc:	431f      	orrs	r7, r3
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	001e      	movs	r6, r3
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d9c3      	bls.n	8000560 <__udivmoddi4+0x4c>
 80005d8:	2200      	movs	r2, #0
 80005da:	2300      	movs	r3, #0
 80005dc:	9200      	str	r2, [sp, #0]
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	4643      	mov	r3, r8
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0d8      	beq.n	8000598 <__udivmoddi4+0x84>
 80005e6:	07fb      	lsls	r3, r7, #31
 80005e8:	0872      	lsrs	r2, r6, #1
 80005ea:	431a      	orrs	r2, r3
 80005ec:	4646      	mov	r6, r8
 80005ee:	087b      	lsrs	r3, r7, #1
 80005f0:	e00e      	b.n	8000610 <__udivmoddi4+0xfc>
 80005f2:	42ab      	cmp	r3, r5
 80005f4:	d101      	bne.n	80005fa <__udivmoddi4+0xe6>
 80005f6:	42a2      	cmp	r2, r4
 80005f8:	d80c      	bhi.n	8000614 <__udivmoddi4+0x100>
 80005fa:	1aa4      	subs	r4, r4, r2
 80005fc:	419d      	sbcs	r5, r3
 80005fe:	2001      	movs	r0, #1
 8000600:	1924      	adds	r4, r4, r4
 8000602:	416d      	adcs	r5, r5
 8000604:	2100      	movs	r1, #0
 8000606:	3e01      	subs	r6, #1
 8000608:	1824      	adds	r4, r4, r0
 800060a:	414d      	adcs	r5, r1
 800060c:	2e00      	cmp	r6, #0
 800060e:	d006      	beq.n	800061e <__udivmoddi4+0x10a>
 8000610:	42ab      	cmp	r3, r5
 8000612:	d9ee      	bls.n	80005f2 <__udivmoddi4+0xde>
 8000614:	3e01      	subs	r6, #1
 8000616:	1924      	adds	r4, r4, r4
 8000618:	416d      	adcs	r5, r5
 800061a:	2e00      	cmp	r6, #0
 800061c:	d1f8      	bne.n	8000610 <__udivmoddi4+0xfc>
 800061e:	9800      	ldr	r0, [sp, #0]
 8000620:	9901      	ldr	r1, [sp, #4]
 8000622:	465b      	mov	r3, fp
 8000624:	1900      	adds	r0, r0, r4
 8000626:	4169      	adcs	r1, r5
 8000628:	2b00      	cmp	r3, #0
 800062a:	db24      	blt.n	8000676 <__udivmoddi4+0x162>
 800062c:	002b      	movs	r3, r5
 800062e:	465a      	mov	r2, fp
 8000630:	4644      	mov	r4, r8
 8000632:	40d3      	lsrs	r3, r2
 8000634:	002a      	movs	r2, r5
 8000636:	40e2      	lsrs	r2, r4
 8000638:	001c      	movs	r4, r3
 800063a:	465b      	mov	r3, fp
 800063c:	0015      	movs	r5, r2
 800063e:	2b00      	cmp	r3, #0
 8000640:	db2a      	blt.n	8000698 <__udivmoddi4+0x184>
 8000642:	0026      	movs	r6, r4
 8000644:	409e      	lsls	r6, r3
 8000646:	0033      	movs	r3, r6
 8000648:	0026      	movs	r6, r4
 800064a:	4647      	mov	r7, r8
 800064c:	40be      	lsls	r6, r7
 800064e:	0032      	movs	r2, r6
 8000650:	1a80      	subs	r0, r0, r2
 8000652:	4199      	sbcs	r1, r3
 8000654:	9000      	str	r0, [sp, #0]
 8000656:	9101      	str	r1, [sp, #4]
 8000658:	e79e      	b.n	8000598 <__udivmoddi4+0x84>
 800065a:	42a3      	cmp	r3, r4
 800065c:	d8bc      	bhi.n	80005d8 <__udivmoddi4+0xc4>
 800065e:	e782      	b.n	8000566 <__udivmoddi4+0x52>
 8000660:	4642      	mov	r2, r8
 8000662:	2320      	movs	r3, #32
 8000664:	2100      	movs	r1, #0
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	2200      	movs	r2, #0
 800066a:	9100      	str	r1, [sp, #0]
 800066c:	9201      	str	r2, [sp, #4]
 800066e:	2201      	movs	r2, #1
 8000670:	40da      	lsrs	r2, r3
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	e785      	b.n	8000582 <__udivmoddi4+0x6e>
 8000676:	4642      	mov	r2, r8
 8000678:	2320      	movs	r3, #32
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	002a      	movs	r2, r5
 800067e:	4646      	mov	r6, r8
 8000680:	409a      	lsls	r2, r3
 8000682:	0023      	movs	r3, r4
 8000684:	40f3      	lsrs	r3, r6
 8000686:	4644      	mov	r4, r8
 8000688:	4313      	orrs	r3, r2
 800068a:	002a      	movs	r2, r5
 800068c:	40e2      	lsrs	r2, r4
 800068e:	001c      	movs	r4, r3
 8000690:	465b      	mov	r3, fp
 8000692:	0015      	movs	r5, r2
 8000694:	2b00      	cmp	r3, #0
 8000696:	dad4      	bge.n	8000642 <__udivmoddi4+0x12e>
 8000698:	4642      	mov	r2, r8
 800069a:	002f      	movs	r7, r5
 800069c:	2320      	movs	r3, #32
 800069e:	0026      	movs	r6, r4
 80006a0:	4097      	lsls	r7, r2
 80006a2:	1a9b      	subs	r3, r3, r2
 80006a4:	40de      	lsrs	r6, r3
 80006a6:	003b      	movs	r3, r7
 80006a8:	4333      	orrs	r3, r6
 80006aa:	e7cd      	b.n	8000648 <__udivmoddi4+0x134>

080006ac <__aeabi_fdiv>:
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ae:	4646      	mov	r6, r8
 80006b0:	464f      	mov	r7, r9
 80006b2:	46d6      	mov	lr, sl
 80006b4:	0245      	lsls	r5, r0, #9
 80006b6:	b5c0      	push	{r6, r7, lr}
 80006b8:	0fc3      	lsrs	r3, r0, #31
 80006ba:	0047      	lsls	r7, r0, #1
 80006bc:	4698      	mov	r8, r3
 80006be:	1c0e      	adds	r6, r1, #0
 80006c0:	0a6d      	lsrs	r5, r5, #9
 80006c2:	0e3f      	lsrs	r7, r7, #24
 80006c4:	d05b      	beq.n	800077e <__aeabi_fdiv+0xd2>
 80006c6:	2fff      	cmp	r7, #255	@ 0xff
 80006c8:	d021      	beq.n	800070e <__aeabi_fdiv+0x62>
 80006ca:	2380      	movs	r3, #128	@ 0x80
 80006cc:	00ed      	lsls	r5, r5, #3
 80006ce:	04db      	lsls	r3, r3, #19
 80006d0:	431d      	orrs	r5, r3
 80006d2:	2300      	movs	r3, #0
 80006d4:	4699      	mov	r9, r3
 80006d6:	469a      	mov	sl, r3
 80006d8:	3f7f      	subs	r7, #127	@ 0x7f
 80006da:	0274      	lsls	r4, r6, #9
 80006dc:	0073      	lsls	r3, r6, #1
 80006de:	0a64      	lsrs	r4, r4, #9
 80006e0:	0e1b      	lsrs	r3, r3, #24
 80006e2:	0ff6      	lsrs	r6, r6, #31
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d020      	beq.n	800072a <__aeabi_fdiv+0x7e>
 80006e8:	2bff      	cmp	r3, #255	@ 0xff
 80006ea:	d043      	beq.n	8000774 <__aeabi_fdiv+0xc8>
 80006ec:	2280      	movs	r2, #128	@ 0x80
 80006ee:	2000      	movs	r0, #0
 80006f0:	00e4      	lsls	r4, r4, #3
 80006f2:	04d2      	lsls	r2, r2, #19
 80006f4:	4314      	orrs	r4, r2
 80006f6:	3b7f      	subs	r3, #127	@ 0x7f
 80006f8:	4642      	mov	r2, r8
 80006fa:	1aff      	subs	r7, r7, r3
 80006fc:	464b      	mov	r3, r9
 80006fe:	4072      	eors	r2, r6
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d900      	bls.n	8000706 <__aeabi_fdiv+0x5a>
 8000704:	e09d      	b.n	8000842 <__aeabi_fdiv+0x196>
 8000706:	4971      	ldr	r1, [pc, #452]	@ (80008cc <__aeabi_fdiv+0x220>)
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	58cb      	ldr	r3, [r1, r3]
 800070c:	469f      	mov	pc, r3
 800070e:	2d00      	cmp	r5, #0
 8000710:	d15a      	bne.n	80007c8 <__aeabi_fdiv+0x11c>
 8000712:	2308      	movs	r3, #8
 8000714:	4699      	mov	r9, r3
 8000716:	3b06      	subs	r3, #6
 8000718:	0274      	lsls	r4, r6, #9
 800071a:	469a      	mov	sl, r3
 800071c:	0073      	lsls	r3, r6, #1
 800071e:	27ff      	movs	r7, #255	@ 0xff
 8000720:	0a64      	lsrs	r4, r4, #9
 8000722:	0e1b      	lsrs	r3, r3, #24
 8000724:	0ff6      	lsrs	r6, r6, #31
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1de      	bne.n	80006e8 <__aeabi_fdiv+0x3c>
 800072a:	2c00      	cmp	r4, #0
 800072c:	d13b      	bne.n	80007a6 <__aeabi_fdiv+0xfa>
 800072e:	2301      	movs	r3, #1
 8000730:	4642      	mov	r2, r8
 8000732:	4649      	mov	r1, r9
 8000734:	4072      	eors	r2, r6
 8000736:	4319      	orrs	r1, r3
 8000738:	290e      	cmp	r1, #14
 800073a:	d818      	bhi.n	800076e <__aeabi_fdiv+0xc2>
 800073c:	4864      	ldr	r0, [pc, #400]	@ (80008d0 <__aeabi_fdiv+0x224>)
 800073e:	0089      	lsls	r1, r1, #2
 8000740:	5841      	ldr	r1, [r0, r1]
 8000742:	468f      	mov	pc, r1
 8000744:	4653      	mov	r3, sl
 8000746:	2b02      	cmp	r3, #2
 8000748:	d100      	bne.n	800074c <__aeabi_fdiv+0xa0>
 800074a:	e0b8      	b.n	80008be <__aeabi_fdiv+0x212>
 800074c:	2b03      	cmp	r3, #3
 800074e:	d06e      	beq.n	800082e <__aeabi_fdiv+0x182>
 8000750:	4642      	mov	r2, r8
 8000752:	002c      	movs	r4, r5
 8000754:	2b01      	cmp	r3, #1
 8000756:	d140      	bne.n	80007da <__aeabi_fdiv+0x12e>
 8000758:	2000      	movs	r0, #0
 800075a:	2400      	movs	r4, #0
 800075c:	05c0      	lsls	r0, r0, #23
 800075e:	4320      	orrs	r0, r4
 8000760:	07d2      	lsls	r2, r2, #31
 8000762:	4310      	orrs	r0, r2
 8000764:	bce0      	pop	{r5, r6, r7}
 8000766:	46ba      	mov	sl, r7
 8000768:	46b1      	mov	r9, r6
 800076a:	46a8      	mov	r8, r5
 800076c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076e:	20ff      	movs	r0, #255	@ 0xff
 8000770:	2400      	movs	r4, #0
 8000772:	e7f3      	b.n	800075c <__aeabi_fdiv+0xb0>
 8000774:	2c00      	cmp	r4, #0
 8000776:	d120      	bne.n	80007ba <__aeabi_fdiv+0x10e>
 8000778:	2302      	movs	r3, #2
 800077a:	3fff      	subs	r7, #255	@ 0xff
 800077c:	e7d8      	b.n	8000730 <__aeabi_fdiv+0x84>
 800077e:	2d00      	cmp	r5, #0
 8000780:	d105      	bne.n	800078e <__aeabi_fdiv+0xe2>
 8000782:	2304      	movs	r3, #4
 8000784:	4699      	mov	r9, r3
 8000786:	3b03      	subs	r3, #3
 8000788:	2700      	movs	r7, #0
 800078a:	469a      	mov	sl, r3
 800078c:	e7a5      	b.n	80006da <__aeabi_fdiv+0x2e>
 800078e:	0028      	movs	r0, r5
 8000790:	f002 fd38 	bl	8003204 <__clzsi2>
 8000794:	2776      	movs	r7, #118	@ 0x76
 8000796:	1f43      	subs	r3, r0, #5
 8000798:	409d      	lsls	r5, r3
 800079a:	2300      	movs	r3, #0
 800079c:	427f      	negs	r7, r7
 800079e:	4699      	mov	r9, r3
 80007a0:	469a      	mov	sl, r3
 80007a2:	1a3f      	subs	r7, r7, r0
 80007a4:	e799      	b.n	80006da <__aeabi_fdiv+0x2e>
 80007a6:	0020      	movs	r0, r4
 80007a8:	f002 fd2c 	bl	8003204 <__clzsi2>
 80007ac:	1f43      	subs	r3, r0, #5
 80007ae:	409c      	lsls	r4, r3
 80007b0:	2376      	movs	r3, #118	@ 0x76
 80007b2:	425b      	negs	r3, r3
 80007b4:	1a1b      	subs	r3, r3, r0
 80007b6:	2000      	movs	r0, #0
 80007b8:	e79e      	b.n	80006f8 <__aeabi_fdiv+0x4c>
 80007ba:	2303      	movs	r3, #3
 80007bc:	464a      	mov	r2, r9
 80007be:	431a      	orrs	r2, r3
 80007c0:	4691      	mov	r9, r2
 80007c2:	2003      	movs	r0, #3
 80007c4:	33fc      	adds	r3, #252	@ 0xfc
 80007c6:	e797      	b.n	80006f8 <__aeabi_fdiv+0x4c>
 80007c8:	230c      	movs	r3, #12
 80007ca:	4699      	mov	r9, r3
 80007cc:	3b09      	subs	r3, #9
 80007ce:	27ff      	movs	r7, #255	@ 0xff
 80007d0:	469a      	mov	sl, r3
 80007d2:	e782      	b.n	80006da <__aeabi_fdiv+0x2e>
 80007d4:	2803      	cmp	r0, #3
 80007d6:	d02c      	beq.n	8000832 <__aeabi_fdiv+0x186>
 80007d8:	0032      	movs	r2, r6
 80007da:	0038      	movs	r0, r7
 80007dc:	307f      	adds	r0, #127	@ 0x7f
 80007de:	2800      	cmp	r0, #0
 80007e0:	dd47      	ble.n	8000872 <__aeabi_fdiv+0x1c6>
 80007e2:	0763      	lsls	r3, r4, #29
 80007e4:	d004      	beq.n	80007f0 <__aeabi_fdiv+0x144>
 80007e6:	230f      	movs	r3, #15
 80007e8:	4023      	ands	r3, r4
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fdiv+0x144>
 80007ee:	3404      	adds	r4, #4
 80007f0:	0123      	lsls	r3, r4, #4
 80007f2:	d503      	bpl.n	80007fc <__aeabi_fdiv+0x150>
 80007f4:	0038      	movs	r0, r7
 80007f6:	4b37      	ldr	r3, [pc, #220]	@ (80008d4 <__aeabi_fdiv+0x228>)
 80007f8:	3080      	adds	r0, #128	@ 0x80
 80007fa:	401c      	ands	r4, r3
 80007fc:	28fe      	cmp	r0, #254	@ 0xfe
 80007fe:	dcb6      	bgt.n	800076e <__aeabi_fdiv+0xc2>
 8000800:	01a4      	lsls	r4, r4, #6
 8000802:	0a64      	lsrs	r4, r4, #9
 8000804:	b2c0      	uxtb	r0, r0
 8000806:	e7a9      	b.n	800075c <__aeabi_fdiv+0xb0>
 8000808:	2480      	movs	r4, #128	@ 0x80
 800080a:	2200      	movs	r2, #0
 800080c:	20ff      	movs	r0, #255	@ 0xff
 800080e:	03e4      	lsls	r4, r4, #15
 8000810:	e7a4      	b.n	800075c <__aeabi_fdiv+0xb0>
 8000812:	2380      	movs	r3, #128	@ 0x80
 8000814:	03db      	lsls	r3, r3, #15
 8000816:	421d      	tst	r5, r3
 8000818:	d001      	beq.n	800081e <__aeabi_fdiv+0x172>
 800081a:	421c      	tst	r4, r3
 800081c:	d00b      	beq.n	8000836 <__aeabi_fdiv+0x18a>
 800081e:	2480      	movs	r4, #128	@ 0x80
 8000820:	03e4      	lsls	r4, r4, #15
 8000822:	432c      	orrs	r4, r5
 8000824:	0264      	lsls	r4, r4, #9
 8000826:	4642      	mov	r2, r8
 8000828:	20ff      	movs	r0, #255	@ 0xff
 800082a:	0a64      	lsrs	r4, r4, #9
 800082c:	e796      	b.n	800075c <__aeabi_fdiv+0xb0>
 800082e:	4646      	mov	r6, r8
 8000830:	002c      	movs	r4, r5
 8000832:	2380      	movs	r3, #128	@ 0x80
 8000834:	03db      	lsls	r3, r3, #15
 8000836:	431c      	orrs	r4, r3
 8000838:	0264      	lsls	r4, r4, #9
 800083a:	0032      	movs	r2, r6
 800083c:	20ff      	movs	r0, #255	@ 0xff
 800083e:	0a64      	lsrs	r4, r4, #9
 8000840:	e78c      	b.n	800075c <__aeabi_fdiv+0xb0>
 8000842:	016d      	lsls	r5, r5, #5
 8000844:	0160      	lsls	r0, r4, #5
 8000846:	4285      	cmp	r5, r0
 8000848:	d22d      	bcs.n	80008a6 <__aeabi_fdiv+0x1fa>
 800084a:	231b      	movs	r3, #27
 800084c:	2400      	movs	r4, #0
 800084e:	3f01      	subs	r7, #1
 8000850:	2601      	movs	r6, #1
 8000852:	0029      	movs	r1, r5
 8000854:	0064      	lsls	r4, r4, #1
 8000856:	006d      	lsls	r5, r5, #1
 8000858:	2900      	cmp	r1, #0
 800085a:	db01      	blt.n	8000860 <__aeabi_fdiv+0x1b4>
 800085c:	4285      	cmp	r5, r0
 800085e:	d301      	bcc.n	8000864 <__aeabi_fdiv+0x1b8>
 8000860:	1a2d      	subs	r5, r5, r0
 8000862:	4334      	orrs	r4, r6
 8000864:	3b01      	subs	r3, #1
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f3      	bne.n	8000852 <__aeabi_fdiv+0x1a6>
 800086a:	1e6b      	subs	r3, r5, #1
 800086c:	419d      	sbcs	r5, r3
 800086e:	432c      	orrs	r4, r5
 8000870:	e7b3      	b.n	80007da <__aeabi_fdiv+0x12e>
 8000872:	2301      	movs	r3, #1
 8000874:	1a1b      	subs	r3, r3, r0
 8000876:	2b1b      	cmp	r3, #27
 8000878:	dd00      	ble.n	800087c <__aeabi_fdiv+0x1d0>
 800087a:	e76d      	b.n	8000758 <__aeabi_fdiv+0xac>
 800087c:	0021      	movs	r1, r4
 800087e:	379e      	adds	r7, #158	@ 0x9e
 8000880:	40d9      	lsrs	r1, r3
 8000882:	40bc      	lsls	r4, r7
 8000884:	000b      	movs	r3, r1
 8000886:	1e61      	subs	r1, r4, #1
 8000888:	418c      	sbcs	r4, r1
 800088a:	4323      	orrs	r3, r4
 800088c:	0759      	lsls	r1, r3, #29
 800088e:	d004      	beq.n	800089a <__aeabi_fdiv+0x1ee>
 8000890:	210f      	movs	r1, #15
 8000892:	4019      	ands	r1, r3
 8000894:	2904      	cmp	r1, #4
 8000896:	d000      	beq.n	800089a <__aeabi_fdiv+0x1ee>
 8000898:	3304      	adds	r3, #4
 800089a:	0159      	lsls	r1, r3, #5
 800089c:	d413      	bmi.n	80008c6 <__aeabi_fdiv+0x21a>
 800089e:	019b      	lsls	r3, r3, #6
 80008a0:	2000      	movs	r0, #0
 80008a2:	0a5c      	lsrs	r4, r3, #9
 80008a4:	e75a      	b.n	800075c <__aeabi_fdiv+0xb0>
 80008a6:	231a      	movs	r3, #26
 80008a8:	2401      	movs	r4, #1
 80008aa:	1a2d      	subs	r5, r5, r0
 80008ac:	e7d0      	b.n	8000850 <__aeabi_fdiv+0x1a4>
 80008ae:	1e98      	subs	r0, r3, #2
 80008b0:	4243      	negs	r3, r0
 80008b2:	4158      	adcs	r0, r3
 80008b4:	4240      	negs	r0, r0
 80008b6:	0032      	movs	r2, r6
 80008b8:	2400      	movs	r4, #0
 80008ba:	b2c0      	uxtb	r0, r0
 80008bc:	e74e      	b.n	800075c <__aeabi_fdiv+0xb0>
 80008be:	4642      	mov	r2, r8
 80008c0:	20ff      	movs	r0, #255	@ 0xff
 80008c2:	2400      	movs	r4, #0
 80008c4:	e74a      	b.n	800075c <__aeabi_fdiv+0xb0>
 80008c6:	2001      	movs	r0, #1
 80008c8:	2400      	movs	r4, #0
 80008ca:	e747      	b.n	800075c <__aeabi_fdiv+0xb0>
 80008cc:	0800ad84 	.word	0x0800ad84
 80008d0:	0800adc4 	.word	0x0800adc4
 80008d4:	f7ffffff 	.word	0xf7ffffff

080008d8 <__aeabi_fmul>:
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	464f      	mov	r7, r9
 80008dc:	4646      	mov	r6, r8
 80008de:	46d6      	mov	lr, sl
 80008e0:	0044      	lsls	r4, r0, #1
 80008e2:	b5c0      	push	{r6, r7, lr}
 80008e4:	0246      	lsls	r6, r0, #9
 80008e6:	1c0f      	adds	r7, r1, #0
 80008e8:	0a76      	lsrs	r6, r6, #9
 80008ea:	0e24      	lsrs	r4, r4, #24
 80008ec:	0fc5      	lsrs	r5, r0, #31
 80008ee:	2c00      	cmp	r4, #0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fmul+0x1c>
 80008f2:	e0da      	b.n	8000aaa <__aeabi_fmul+0x1d2>
 80008f4:	2cff      	cmp	r4, #255	@ 0xff
 80008f6:	d074      	beq.n	80009e2 <__aeabi_fmul+0x10a>
 80008f8:	2380      	movs	r3, #128	@ 0x80
 80008fa:	00f6      	lsls	r6, r6, #3
 80008fc:	04db      	lsls	r3, r3, #19
 80008fe:	431e      	orrs	r6, r3
 8000900:	2300      	movs	r3, #0
 8000902:	4699      	mov	r9, r3
 8000904:	469a      	mov	sl, r3
 8000906:	3c7f      	subs	r4, #127	@ 0x7f
 8000908:	027b      	lsls	r3, r7, #9
 800090a:	0a5b      	lsrs	r3, r3, #9
 800090c:	4698      	mov	r8, r3
 800090e:	007b      	lsls	r3, r7, #1
 8000910:	0e1b      	lsrs	r3, r3, #24
 8000912:	0fff      	lsrs	r7, r7, #31
 8000914:	2b00      	cmp	r3, #0
 8000916:	d074      	beq.n	8000a02 <__aeabi_fmul+0x12a>
 8000918:	2bff      	cmp	r3, #255	@ 0xff
 800091a:	d100      	bne.n	800091e <__aeabi_fmul+0x46>
 800091c:	e08e      	b.n	8000a3c <__aeabi_fmul+0x164>
 800091e:	4642      	mov	r2, r8
 8000920:	2180      	movs	r1, #128	@ 0x80
 8000922:	00d2      	lsls	r2, r2, #3
 8000924:	04c9      	lsls	r1, r1, #19
 8000926:	4311      	orrs	r1, r2
 8000928:	3b7f      	subs	r3, #127	@ 0x7f
 800092a:	002a      	movs	r2, r5
 800092c:	18e4      	adds	r4, r4, r3
 800092e:	464b      	mov	r3, r9
 8000930:	407a      	eors	r2, r7
 8000932:	4688      	mov	r8, r1
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	2b0a      	cmp	r3, #10
 8000938:	dc75      	bgt.n	8000a26 <__aeabi_fmul+0x14e>
 800093a:	464b      	mov	r3, r9
 800093c:	2000      	movs	r0, #0
 800093e:	2b02      	cmp	r3, #2
 8000940:	dd0f      	ble.n	8000962 <__aeabi_fmul+0x8a>
 8000942:	4649      	mov	r1, r9
 8000944:	2301      	movs	r3, #1
 8000946:	408b      	lsls	r3, r1
 8000948:	21a6      	movs	r1, #166	@ 0xa6
 800094a:	00c9      	lsls	r1, r1, #3
 800094c:	420b      	tst	r3, r1
 800094e:	d169      	bne.n	8000a24 <__aeabi_fmul+0x14c>
 8000950:	2190      	movs	r1, #144	@ 0x90
 8000952:	0089      	lsls	r1, r1, #2
 8000954:	420b      	tst	r3, r1
 8000956:	d000      	beq.n	800095a <__aeabi_fmul+0x82>
 8000958:	e100      	b.n	8000b5c <__aeabi_fmul+0x284>
 800095a:	2188      	movs	r1, #136	@ 0x88
 800095c:	4219      	tst	r1, r3
 800095e:	d000      	beq.n	8000962 <__aeabi_fmul+0x8a>
 8000960:	e0f5      	b.n	8000b4e <__aeabi_fmul+0x276>
 8000962:	4641      	mov	r1, r8
 8000964:	0409      	lsls	r1, r1, #16
 8000966:	0c09      	lsrs	r1, r1, #16
 8000968:	4643      	mov	r3, r8
 800096a:	0008      	movs	r0, r1
 800096c:	0c35      	lsrs	r5, r6, #16
 800096e:	0436      	lsls	r6, r6, #16
 8000970:	0c1b      	lsrs	r3, r3, #16
 8000972:	0c36      	lsrs	r6, r6, #16
 8000974:	4370      	muls	r0, r6
 8000976:	4369      	muls	r1, r5
 8000978:	435e      	muls	r6, r3
 800097a:	435d      	muls	r5, r3
 800097c:	1876      	adds	r6, r6, r1
 800097e:	0c03      	lsrs	r3, r0, #16
 8000980:	199b      	adds	r3, r3, r6
 8000982:	4299      	cmp	r1, r3
 8000984:	d903      	bls.n	800098e <__aeabi_fmul+0xb6>
 8000986:	2180      	movs	r1, #128	@ 0x80
 8000988:	0249      	lsls	r1, r1, #9
 800098a:	468c      	mov	ip, r1
 800098c:	4465      	add	r5, ip
 800098e:	0400      	lsls	r0, r0, #16
 8000990:	0419      	lsls	r1, r3, #16
 8000992:	0c00      	lsrs	r0, r0, #16
 8000994:	1809      	adds	r1, r1, r0
 8000996:	018e      	lsls	r6, r1, #6
 8000998:	1e70      	subs	r0, r6, #1
 800099a:	4186      	sbcs	r6, r0
 800099c:	0c1b      	lsrs	r3, r3, #16
 800099e:	0e89      	lsrs	r1, r1, #26
 80009a0:	195b      	adds	r3, r3, r5
 80009a2:	430e      	orrs	r6, r1
 80009a4:	019b      	lsls	r3, r3, #6
 80009a6:	431e      	orrs	r6, r3
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	d46c      	bmi.n	8000a86 <__aeabi_fmul+0x1ae>
 80009ac:	0023      	movs	r3, r4
 80009ae:	337f      	adds	r3, #127	@ 0x7f
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	dc00      	bgt.n	80009b6 <__aeabi_fmul+0xde>
 80009b4:	e0b1      	b.n	8000b1a <__aeabi_fmul+0x242>
 80009b6:	0015      	movs	r5, r2
 80009b8:	0771      	lsls	r1, r6, #29
 80009ba:	d00b      	beq.n	80009d4 <__aeabi_fmul+0xfc>
 80009bc:	200f      	movs	r0, #15
 80009be:	0021      	movs	r1, r4
 80009c0:	4030      	ands	r0, r6
 80009c2:	2804      	cmp	r0, #4
 80009c4:	d006      	beq.n	80009d4 <__aeabi_fmul+0xfc>
 80009c6:	3604      	adds	r6, #4
 80009c8:	0132      	lsls	r2, r6, #4
 80009ca:	d503      	bpl.n	80009d4 <__aeabi_fmul+0xfc>
 80009cc:	4b6e      	ldr	r3, [pc, #440]	@ (8000b88 <__aeabi_fmul+0x2b0>)
 80009ce:	401e      	ands	r6, r3
 80009d0:	000b      	movs	r3, r1
 80009d2:	3380      	adds	r3, #128	@ 0x80
 80009d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80009d6:	dd00      	ble.n	80009da <__aeabi_fmul+0x102>
 80009d8:	e0bd      	b.n	8000b56 <__aeabi_fmul+0x27e>
 80009da:	01b2      	lsls	r2, r6, #6
 80009dc:	0a52      	lsrs	r2, r2, #9
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	e048      	b.n	8000a74 <__aeabi_fmul+0x19c>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fmul+0x110>
 80009e6:	e092      	b.n	8000b0e <__aeabi_fmul+0x236>
 80009e8:	2308      	movs	r3, #8
 80009ea:	4699      	mov	r9, r3
 80009ec:	3b06      	subs	r3, #6
 80009ee:	469a      	mov	sl, r3
 80009f0:	027b      	lsls	r3, r7, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	4698      	mov	r8, r3
 80009f6:	007b      	lsls	r3, r7, #1
 80009f8:	24ff      	movs	r4, #255	@ 0xff
 80009fa:	0e1b      	lsrs	r3, r3, #24
 80009fc:	0fff      	lsrs	r7, r7, #31
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d18a      	bne.n	8000918 <__aeabi_fmul+0x40>
 8000a02:	4642      	mov	r2, r8
 8000a04:	2a00      	cmp	r2, #0
 8000a06:	d164      	bne.n	8000ad2 <__aeabi_fmul+0x1fa>
 8000a08:	4649      	mov	r1, r9
 8000a0a:	3201      	adds	r2, #1
 8000a0c:	4311      	orrs	r1, r2
 8000a0e:	4689      	mov	r9, r1
 8000a10:	290a      	cmp	r1, #10
 8000a12:	dc08      	bgt.n	8000a26 <__aeabi_fmul+0x14e>
 8000a14:	407d      	eors	r5, r7
 8000a16:	2001      	movs	r0, #1
 8000a18:	b2ea      	uxtb	r2, r5
 8000a1a:	2902      	cmp	r1, #2
 8000a1c:	dc91      	bgt.n	8000942 <__aeabi_fmul+0x6a>
 8000a1e:	0015      	movs	r5, r2
 8000a20:	2200      	movs	r2, #0
 8000a22:	e027      	b.n	8000a74 <__aeabi_fmul+0x19c>
 8000a24:	0015      	movs	r5, r2
 8000a26:	4653      	mov	r3, sl
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_fmul+0x156>
 8000a2c:	e093      	b.n	8000b56 <__aeabi_fmul+0x27e>
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d01a      	beq.n	8000a68 <__aeabi_fmul+0x190>
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d12c      	bne.n	8000a90 <__aeabi_fmul+0x1b8>
 8000a36:	2300      	movs	r3, #0
 8000a38:	2200      	movs	r2, #0
 8000a3a:	e01b      	b.n	8000a74 <__aeabi_fmul+0x19c>
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	34ff      	adds	r4, #255	@ 0xff
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d055      	beq.n	8000af0 <__aeabi_fmul+0x218>
 8000a44:	2103      	movs	r1, #3
 8000a46:	464b      	mov	r3, r9
 8000a48:	430b      	orrs	r3, r1
 8000a4a:	0019      	movs	r1, r3
 8000a4c:	2b0a      	cmp	r3, #10
 8000a4e:	dc00      	bgt.n	8000a52 <__aeabi_fmul+0x17a>
 8000a50:	e092      	b.n	8000b78 <__aeabi_fmul+0x2a0>
 8000a52:	2b0f      	cmp	r3, #15
 8000a54:	d000      	beq.n	8000a58 <__aeabi_fmul+0x180>
 8000a56:	e08c      	b.n	8000b72 <__aeabi_fmul+0x29a>
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	03d2      	lsls	r2, r2, #15
 8000a5c:	4216      	tst	r6, r2
 8000a5e:	d003      	beq.n	8000a68 <__aeabi_fmul+0x190>
 8000a60:	4643      	mov	r3, r8
 8000a62:	4213      	tst	r3, r2
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fmul+0x190>
 8000a66:	e07d      	b.n	8000b64 <__aeabi_fmul+0x28c>
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	03d2      	lsls	r2, r2, #15
 8000a6c:	4332      	orrs	r2, r6
 8000a6e:	0252      	lsls	r2, r2, #9
 8000a70:	0a52      	lsrs	r2, r2, #9
 8000a72:	23ff      	movs	r3, #255	@ 0xff
 8000a74:	05d8      	lsls	r0, r3, #23
 8000a76:	07ed      	lsls	r5, r5, #31
 8000a78:	4310      	orrs	r0, r2
 8000a7a:	4328      	orrs	r0, r5
 8000a7c:	bce0      	pop	{r5, r6, r7}
 8000a7e:	46ba      	mov	sl, r7
 8000a80:	46b1      	mov	r9, r6
 8000a82:	46a8      	mov	r8, r5
 8000a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a86:	2301      	movs	r3, #1
 8000a88:	0015      	movs	r5, r2
 8000a8a:	0871      	lsrs	r1, r6, #1
 8000a8c:	401e      	ands	r6, r3
 8000a8e:	430e      	orrs	r6, r1
 8000a90:	0023      	movs	r3, r4
 8000a92:	3380      	adds	r3, #128	@ 0x80
 8000a94:	1c61      	adds	r1, r4, #1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	dd41      	ble.n	8000b1e <__aeabi_fmul+0x246>
 8000a9a:	0772      	lsls	r2, r6, #29
 8000a9c:	d094      	beq.n	80009c8 <__aeabi_fmul+0xf0>
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	4032      	ands	r2, r6
 8000aa2:	2a04      	cmp	r2, #4
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fmul+0x1d0>
 8000aa6:	e78e      	b.n	80009c6 <__aeabi_fmul+0xee>
 8000aa8:	e78e      	b.n	80009c8 <__aeabi_fmul+0xf0>
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d105      	bne.n	8000aba <__aeabi_fmul+0x1e2>
 8000aae:	2304      	movs	r3, #4
 8000ab0:	4699      	mov	r9, r3
 8000ab2:	3b03      	subs	r3, #3
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	469a      	mov	sl, r3
 8000ab8:	e726      	b.n	8000908 <__aeabi_fmul+0x30>
 8000aba:	0030      	movs	r0, r6
 8000abc:	f002 fba2 	bl	8003204 <__clzsi2>
 8000ac0:	2476      	movs	r4, #118	@ 0x76
 8000ac2:	1f43      	subs	r3, r0, #5
 8000ac4:	409e      	lsls	r6, r3
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	4264      	negs	r4, r4
 8000aca:	4699      	mov	r9, r3
 8000acc:	469a      	mov	sl, r3
 8000ace:	1a24      	subs	r4, r4, r0
 8000ad0:	e71a      	b.n	8000908 <__aeabi_fmul+0x30>
 8000ad2:	4640      	mov	r0, r8
 8000ad4:	f002 fb96 	bl	8003204 <__clzsi2>
 8000ad8:	464b      	mov	r3, r9
 8000ada:	1a24      	subs	r4, r4, r0
 8000adc:	3c76      	subs	r4, #118	@ 0x76
 8000ade:	2b0a      	cmp	r3, #10
 8000ae0:	dca1      	bgt.n	8000a26 <__aeabi_fmul+0x14e>
 8000ae2:	4643      	mov	r3, r8
 8000ae4:	3805      	subs	r0, #5
 8000ae6:	4083      	lsls	r3, r0
 8000ae8:	407d      	eors	r5, r7
 8000aea:	4698      	mov	r8, r3
 8000aec:	b2ea      	uxtb	r2, r5
 8000aee:	e724      	b.n	800093a <__aeabi_fmul+0x62>
 8000af0:	464a      	mov	r2, r9
 8000af2:	3302      	adds	r3, #2
 8000af4:	4313      	orrs	r3, r2
 8000af6:	002a      	movs	r2, r5
 8000af8:	407a      	eors	r2, r7
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	2b0a      	cmp	r3, #10
 8000afe:	dc92      	bgt.n	8000a26 <__aeabi_fmul+0x14e>
 8000b00:	4649      	mov	r1, r9
 8000b02:	0015      	movs	r5, r2
 8000b04:	2900      	cmp	r1, #0
 8000b06:	d026      	beq.n	8000b56 <__aeabi_fmul+0x27e>
 8000b08:	4699      	mov	r9, r3
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	e719      	b.n	8000942 <__aeabi_fmul+0x6a>
 8000b0e:	230c      	movs	r3, #12
 8000b10:	4699      	mov	r9, r3
 8000b12:	3b09      	subs	r3, #9
 8000b14:	24ff      	movs	r4, #255	@ 0xff
 8000b16:	469a      	mov	sl, r3
 8000b18:	e6f6      	b.n	8000908 <__aeabi_fmul+0x30>
 8000b1a:	0015      	movs	r5, r2
 8000b1c:	0021      	movs	r1, r4
 8000b1e:	2201      	movs	r2, #1
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b1b      	cmp	r3, #27
 8000b24:	dd00      	ble.n	8000b28 <__aeabi_fmul+0x250>
 8000b26:	e786      	b.n	8000a36 <__aeabi_fmul+0x15e>
 8000b28:	319e      	adds	r1, #158	@ 0x9e
 8000b2a:	0032      	movs	r2, r6
 8000b2c:	408e      	lsls	r6, r1
 8000b2e:	40da      	lsrs	r2, r3
 8000b30:	1e73      	subs	r3, r6, #1
 8000b32:	419e      	sbcs	r6, r3
 8000b34:	4332      	orrs	r2, r6
 8000b36:	0753      	lsls	r3, r2, #29
 8000b38:	d004      	beq.n	8000b44 <__aeabi_fmul+0x26c>
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fmul+0x26c>
 8000b42:	3204      	adds	r2, #4
 8000b44:	0153      	lsls	r3, r2, #5
 8000b46:	d510      	bpl.n	8000b6a <__aeabi_fmul+0x292>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	e792      	b.n	8000a74 <__aeabi_fmul+0x19c>
 8000b4e:	003d      	movs	r5, r7
 8000b50:	4646      	mov	r6, r8
 8000b52:	4682      	mov	sl, r0
 8000b54:	e767      	b.n	8000a26 <__aeabi_fmul+0x14e>
 8000b56:	23ff      	movs	r3, #255	@ 0xff
 8000b58:	2200      	movs	r2, #0
 8000b5a:	e78b      	b.n	8000a74 <__aeabi_fmul+0x19c>
 8000b5c:	2280      	movs	r2, #128	@ 0x80
 8000b5e:	2500      	movs	r5, #0
 8000b60:	03d2      	lsls	r2, r2, #15
 8000b62:	e786      	b.n	8000a72 <__aeabi_fmul+0x19a>
 8000b64:	003d      	movs	r5, r7
 8000b66:	431a      	orrs	r2, r3
 8000b68:	e783      	b.n	8000a72 <__aeabi_fmul+0x19a>
 8000b6a:	0192      	lsls	r2, r2, #6
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	0a52      	lsrs	r2, r2, #9
 8000b70:	e780      	b.n	8000a74 <__aeabi_fmul+0x19c>
 8000b72:	003d      	movs	r5, r7
 8000b74:	4646      	mov	r6, r8
 8000b76:	e777      	b.n	8000a68 <__aeabi_fmul+0x190>
 8000b78:	002a      	movs	r2, r5
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	407a      	eors	r2, r7
 8000b7e:	408b      	lsls	r3, r1
 8000b80:	2003      	movs	r0, #3
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	e6e9      	b.n	800095a <__aeabi_fmul+0x82>
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	f7ffffff 	.word	0xf7ffffff

08000b8c <__aeabi_fsub>:
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	4647      	mov	r7, r8
 8000b90:	46ce      	mov	lr, r9
 8000b92:	0243      	lsls	r3, r0, #9
 8000b94:	b580      	push	{r7, lr}
 8000b96:	0a5f      	lsrs	r7, r3, #9
 8000b98:	099b      	lsrs	r3, r3, #6
 8000b9a:	0045      	lsls	r5, r0, #1
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	469c      	mov	ip, r3
 8000ba0:	024b      	lsls	r3, r1, #9
 8000ba2:	0fc4      	lsrs	r4, r0, #31
 8000ba4:	0fce      	lsrs	r6, r1, #31
 8000ba6:	0e2d      	lsrs	r5, r5, #24
 8000ba8:	0a58      	lsrs	r0, r3, #9
 8000baa:	0e12      	lsrs	r2, r2, #24
 8000bac:	0999      	lsrs	r1, r3, #6
 8000bae:	2aff      	cmp	r2, #255	@ 0xff
 8000bb0:	d06b      	beq.n	8000c8a <__aeabi_fsub+0xfe>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	405e      	eors	r6, r3
 8000bb6:	1aab      	subs	r3, r5, r2
 8000bb8:	42b4      	cmp	r4, r6
 8000bba:	d04b      	beq.n	8000c54 <__aeabi_fsub+0xc8>
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dc00      	bgt.n	8000bc2 <__aeabi_fsub+0x36>
 8000bc0:	e0ff      	b.n	8000dc2 <__aeabi_fsub+0x236>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d100      	bne.n	8000bc8 <__aeabi_fsub+0x3c>
 8000bc6:	e088      	b.n	8000cda <__aeabi_fsub+0x14e>
 8000bc8:	2dff      	cmp	r5, #255	@ 0xff
 8000bca:	d100      	bne.n	8000bce <__aeabi_fsub+0x42>
 8000bcc:	e0ef      	b.n	8000dae <__aeabi_fsub+0x222>
 8000bce:	2280      	movs	r2, #128	@ 0x80
 8000bd0:	04d2      	lsls	r2, r2, #19
 8000bd2:	4311      	orrs	r1, r2
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	2b1b      	cmp	r3, #27
 8000bd8:	dc08      	bgt.n	8000bec <__aeabi_fsub+0x60>
 8000bda:	0008      	movs	r0, r1
 8000bdc:	2220      	movs	r2, #32
 8000bde:	40d8      	lsrs	r0, r3
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	4099      	lsls	r1, r3
 8000be4:	000b      	movs	r3, r1
 8000be6:	1e5a      	subs	r2, r3, #1
 8000be8:	4193      	sbcs	r3, r2
 8000bea:	4318      	orrs	r0, r3
 8000bec:	4663      	mov	r3, ip
 8000bee:	1a1b      	subs	r3, r3, r0
 8000bf0:	469c      	mov	ip, r3
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	015b      	lsls	r3, r3, #5
 8000bf6:	d400      	bmi.n	8000bfa <__aeabi_fsub+0x6e>
 8000bf8:	e0cd      	b.n	8000d96 <__aeabi_fsub+0x20a>
 8000bfa:	4663      	mov	r3, ip
 8000bfc:	019f      	lsls	r7, r3, #6
 8000bfe:	09bf      	lsrs	r7, r7, #6
 8000c00:	0038      	movs	r0, r7
 8000c02:	f002 faff 	bl	8003204 <__clzsi2>
 8000c06:	003b      	movs	r3, r7
 8000c08:	3805      	subs	r0, #5
 8000c0a:	4083      	lsls	r3, r0
 8000c0c:	4285      	cmp	r5, r0
 8000c0e:	dc00      	bgt.n	8000c12 <__aeabi_fsub+0x86>
 8000c10:	e0a2      	b.n	8000d58 <__aeabi_fsub+0x1cc>
 8000c12:	4ab7      	ldr	r2, [pc, #732]	@ (8000ef0 <__aeabi_fsub+0x364>)
 8000c14:	1a2d      	subs	r5, r5, r0
 8000c16:	401a      	ands	r2, r3
 8000c18:	4694      	mov	ip, r2
 8000c1a:	075a      	lsls	r2, r3, #29
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_fsub+0x94>
 8000c1e:	e0c3      	b.n	8000da8 <__aeabi_fsub+0x21c>
 8000c20:	220f      	movs	r2, #15
 8000c22:	4013      	ands	r3, r2
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d100      	bne.n	8000c2a <__aeabi_fsub+0x9e>
 8000c28:	e0be      	b.n	8000da8 <__aeabi_fsub+0x21c>
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	4698      	mov	r8, r3
 8000c2e:	44c4      	add	ip, r8
 8000c30:	4663      	mov	r3, ip
 8000c32:	015b      	lsls	r3, r3, #5
 8000c34:	d400      	bmi.n	8000c38 <__aeabi_fsub+0xac>
 8000c36:	e0b7      	b.n	8000da8 <__aeabi_fsub+0x21c>
 8000c38:	1c68      	adds	r0, r5, #1
 8000c3a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_fsub+0xb4>
 8000c3e:	e0a5      	b.n	8000d8c <__aeabi_fsub+0x200>
 8000c40:	20ff      	movs	r0, #255	@ 0xff
 8000c42:	2200      	movs	r2, #0
 8000c44:	05c0      	lsls	r0, r0, #23
 8000c46:	4310      	orrs	r0, r2
 8000c48:	07e4      	lsls	r4, r4, #31
 8000c4a:	4320      	orrs	r0, r4
 8000c4c:	bcc0      	pop	{r6, r7}
 8000c4e:	46b9      	mov	r9, r7
 8000c50:	46b0      	mov	r8, r6
 8000c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_fsub+0xce>
 8000c58:	e1eb      	b.n	8001032 <__aeabi_fsub+0x4a6>
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d046      	beq.n	8000cec <__aeabi_fsub+0x160>
 8000c5e:	2dff      	cmp	r5, #255	@ 0xff
 8000c60:	d100      	bne.n	8000c64 <__aeabi_fsub+0xd8>
 8000c62:	e0a4      	b.n	8000dae <__aeabi_fsub+0x222>
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	04d2      	lsls	r2, r2, #19
 8000c68:	4311      	orrs	r1, r2
 8000c6a:	2b1b      	cmp	r3, #27
 8000c6c:	dc00      	bgt.n	8000c70 <__aeabi_fsub+0xe4>
 8000c6e:	e0fb      	b.n	8000e68 <__aeabi_fsub+0x2dc>
 8000c70:	2305      	movs	r3, #5
 8000c72:	4698      	mov	r8, r3
 8000c74:	002b      	movs	r3, r5
 8000c76:	44c4      	add	ip, r8
 8000c78:	4662      	mov	r2, ip
 8000c7a:	08d7      	lsrs	r7, r2, #3
 8000c7c:	2bff      	cmp	r3, #255	@ 0xff
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_fsub+0xf6>
 8000c80:	e095      	b.n	8000dae <__aeabi_fsub+0x222>
 8000c82:	027a      	lsls	r2, r7, #9
 8000c84:	0a52      	lsrs	r2, r2, #9
 8000c86:	b2d8      	uxtb	r0, r3
 8000c88:	e7dc      	b.n	8000c44 <__aeabi_fsub+0xb8>
 8000c8a:	002b      	movs	r3, r5
 8000c8c:	3bff      	subs	r3, #255	@ 0xff
 8000c8e:	4699      	mov	r9, r3
 8000c90:	2900      	cmp	r1, #0
 8000c92:	d118      	bne.n	8000cc6 <__aeabi_fsub+0x13a>
 8000c94:	2301      	movs	r3, #1
 8000c96:	405e      	eors	r6, r3
 8000c98:	42b4      	cmp	r4, r6
 8000c9a:	d100      	bne.n	8000c9e <__aeabi_fsub+0x112>
 8000c9c:	e0ca      	b.n	8000e34 <__aeabi_fsub+0x2a8>
 8000c9e:	464b      	mov	r3, r9
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d02d      	beq.n	8000d00 <__aeabi_fsub+0x174>
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0x11e>
 8000ca8:	e13c      	b.n	8000f24 <__aeabi_fsub+0x398>
 8000caa:	23ff      	movs	r3, #255	@ 0xff
 8000cac:	4664      	mov	r4, ip
 8000cae:	2c00      	cmp	r4, #0
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_fsub+0x128>
 8000cb2:	e15f      	b.n	8000f74 <__aeabi_fsub+0x3e8>
 8000cb4:	1e5d      	subs	r5, r3, #1
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fsub+0x130>
 8000cba:	e174      	b.n	8000fa6 <__aeabi_fsub+0x41a>
 8000cbc:	0034      	movs	r4, r6
 8000cbe:	2bff      	cmp	r3, #255	@ 0xff
 8000cc0:	d074      	beq.n	8000dac <__aeabi_fsub+0x220>
 8000cc2:	002b      	movs	r3, r5
 8000cc4:	e103      	b.n	8000ece <__aeabi_fsub+0x342>
 8000cc6:	42b4      	cmp	r4, r6
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x140>
 8000cca:	e09c      	b.n	8000e06 <__aeabi_fsub+0x27a>
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d017      	beq.n	8000d00 <__aeabi_fsub+0x174>
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d0ea      	beq.n	8000caa <__aeabi_fsub+0x11e>
 8000cd4:	0007      	movs	r7, r0
 8000cd6:	0034      	movs	r4, r6
 8000cd8:	e06c      	b.n	8000db4 <__aeabi_fsub+0x228>
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d0cc      	beq.n	8000c78 <__aeabi_fsub+0xec>
 8000cde:	1e5a      	subs	r2, r3, #1
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d02b      	beq.n	8000d3c <__aeabi_fsub+0x1b0>
 8000ce4:	2bff      	cmp	r3, #255	@ 0xff
 8000ce6:	d062      	beq.n	8000dae <__aeabi_fsub+0x222>
 8000ce8:	0013      	movs	r3, r2
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fsub+0x48>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	d0c3      	beq.n	8000c78 <__aeabi_fsub+0xec>
 8000cf0:	1e5a      	subs	r2, r3, #1
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_fsub+0x16c>
 8000cf6:	e11e      	b.n	8000f36 <__aeabi_fsub+0x3aa>
 8000cf8:	2bff      	cmp	r3, #255	@ 0xff
 8000cfa:	d058      	beq.n	8000dae <__aeabi_fsub+0x222>
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	e7b4      	b.n	8000c6a <__aeabi_fsub+0xde>
 8000d00:	22fe      	movs	r2, #254	@ 0xfe
 8000d02:	1c6b      	adds	r3, r5, #1
 8000d04:	421a      	tst	r2, r3
 8000d06:	d10d      	bne.n	8000d24 <__aeabi_fsub+0x198>
 8000d08:	2d00      	cmp	r5, #0
 8000d0a:	d060      	beq.n	8000dce <__aeabi_fsub+0x242>
 8000d0c:	4663      	mov	r3, ip
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d000      	beq.n	8000d14 <__aeabi_fsub+0x188>
 8000d12:	e120      	b.n	8000f56 <__aeabi_fsub+0x3ca>
 8000d14:	2900      	cmp	r1, #0
 8000d16:	d000      	beq.n	8000d1a <__aeabi_fsub+0x18e>
 8000d18:	e128      	b.n	8000f6c <__aeabi_fsub+0x3e0>
 8000d1a:	2280      	movs	r2, #128	@ 0x80
 8000d1c:	2400      	movs	r4, #0
 8000d1e:	20ff      	movs	r0, #255	@ 0xff
 8000d20:	03d2      	lsls	r2, r2, #15
 8000d22:	e78f      	b.n	8000c44 <__aeabi_fsub+0xb8>
 8000d24:	4663      	mov	r3, ip
 8000d26:	1a5f      	subs	r7, r3, r1
 8000d28:	017b      	lsls	r3, r7, #5
 8000d2a:	d500      	bpl.n	8000d2e <__aeabi_fsub+0x1a2>
 8000d2c:	e0fe      	b.n	8000f2c <__aeabi_fsub+0x3a0>
 8000d2e:	2f00      	cmp	r7, #0
 8000d30:	d000      	beq.n	8000d34 <__aeabi_fsub+0x1a8>
 8000d32:	e765      	b.n	8000c00 <__aeabi_fsub+0x74>
 8000d34:	2400      	movs	r4, #0
 8000d36:	2000      	movs	r0, #0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e783      	b.n	8000c44 <__aeabi_fsub+0xb8>
 8000d3c:	4663      	mov	r3, ip
 8000d3e:	1a59      	subs	r1, r3, r1
 8000d40:	014b      	lsls	r3, r1, #5
 8000d42:	d400      	bmi.n	8000d46 <__aeabi_fsub+0x1ba>
 8000d44:	e119      	b.n	8000f7a <__aeabi_fsub+0x3ee>
 8000d46:	018f      	lsls	r7, r1, #6
 8000d48:	09bf      	lsrs	r7, r7, #6
 8000d4a:	0038      	movs	r0, r7
 8000d4c:	f002 fa5a 	bl	8003204 <__clzsi2>
 8000d50:	003b      	movs	r3, r7
 8000d52:	3805      	subs	r0, #5
 8000d54:	4083      	lsls	r3, r0
 8000d56:	2501      	movs	r5, #1
 8000d58:	2220      	movs	r2, #32
 8000d5a:	1b40      	subs	r0, r0, r5
 8000d5c:	3001      	adds	r0, #1
 8000d5e:	1a12      	subs	r2, r2, r0
 8000d60:	0019      	movs	r1, r3
 8000d62:	4093      	lsls	r3, r2
 8000d64:	40c1      	lsrs	r1, r0
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	4193      	sbcs	r3, r2
 8000d6a:	4319      	orrs	r1, r3
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	1e0b      	subs	r3, r1, #0
 8000d70:	d0e1      	beq.n	8000d36 <__aeabi_fsub+0x1aa>
 8000d72:	075b      	lsls	r3, r3, #29
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x1ec>
 8000d76:	e152      	b.n	800101e <__aeabi_fsub+0x492>
 8000d78:	230f      	movs	r3, #15
 8000d7a:	2500      	movs	r5, #0
 8000d7c:	400b      	ands	r3, r1
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d000      	beq.n	8000d84 <__aeabi_fsub+0x1f8>
 8000d82:	e752      	b.n	8000c2a <__aeabi_fsub+0x9e>
 8000d84:	2001      	movs	r0, #1
 8000d86:	014a      	lsls	r2, r1, #5
 8000d88:	d400      	bmi.n	8000d8c <__aeabi_fsub+0x200>
 8000d8a:	e092      	b.n	8000eb2 <__aeabi_fsub+0x326>
 8000d8c:	b2c0      	uxtb	r0, r0
 8000d8e:	4663      	mov	r3, ip
 8000d90:	019a      	lsls	r2, r3, #6
 8000d92:	0a52      	lsrs	r2, r2, #9
 8000d94:	e756      	b.n	8000c44 <__aeabi_fsub+0xb8>
 8000d96:	4663      	mov	r3, ip
 8000d98:	075b      	lsls	r3, r3, #29
 8000d9a:	d005      	beq.n	8000da8 <__aeabi_fsub+0x21c>
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	4662      	mov	r2, ip
 8000da0:	4013      	ands	r3, r2
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fsub+0x21c>
 8000da6:	e740      	b.n	8000c2a <__aeabi_fsub+0x9e>
 8000da8:	002b      	movs	r3, r5
 8000daa:	e765      	b.n	8000c78 <__aeabi_fsub+0xec>
 8000dac:	0007      	movs	r7, r0
 8000dae:	2f00      	cmp	r7, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fsub+0x228>
 8000db2:	e745      	b.n	8000c40 <__aeabi_fsub+0xb4>
 8000db4:	2280      	movs	r2, #128	@ 0x80
 8000db6:	03d2      	lsls	r2, r2, #15
 8000db8:	433a      	orrs	r2, r7
 8000dba:	0252      	lsls	r2, r2, #9
 8000dbc:	20ff      	movs	r0, #255	@ 0xff
 8000dbe:	0a52      	lsrs	r2, r2, #9
 8000dc0:	e740      	b.n	8000c44 <__aeabi_fsub+0xb8>
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d179      	bne.n	8000eba <__aeabi_fsub+0x32e>
 8000dc6:	22fe      	movs	r2, #254	@ 0xfe
 8000dc8:	1c6b      	adds	r3, r5, #1
 8000dca:	421a      	tst	r2, r3
 8000dcc:	d1aa      	bne.n	8000d24 <__aeabi_fsub+0x198>
 8000dce:	4663      	mov	r3, ip
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_fsub+0x24a>
 8000dd4:	e0f5      	b.n	8000fc2 <__aeabi_fsub+0x436>
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_fsub+0x250>
 8000dda:	e0d1      	b.n	8000f80 <__aeabi_fsub+0x3f4>
 8000ddc:	1a5f      	subs	r7, r3, r1
 8000dde:	2380      	movs	r3, #128	@ 0x80
 8000de0:	04db      	lsls	r3, r3, #19
 8000de2:	421f      	tst	r7, r3
 8000de4:	d100      	bne.n	8000de8 <__aeabi_fsub+0x25c>
 8000de6:	e10e      	b.n	8001006 <__aeabi_fsub+0x47a>
 8000de8:	4662      	mov	r2, ip
 8000dea:	2401      	movs	r4, #1
 8000dec:	1a8a      	subs	r2, r1, r2
 8000dee:	4694      	mov	ip, r2
 8000df0:	2000      	movs	r0, #0
 8000df2:	4034      	ands	r4, r6
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x26e>
 8000df8:	e724      	b.n	8000c44 <__aeabi_fsub+0xb8>
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	421a      	tst	r2, r3
 8000dfe:	d1c6      	bne.n	8000d8e <__aeabi_fsub+0x202>
 8000e00:	2300      	movs	r3, #0
 8000e02:	08d7      	lsrs	r7, r2, #3
 8000e04:	e73d      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d017      	beq.n	8000e3a <__aeabi_fsub+0x2ae>
 8000e0a:	2d00      	cmp	r5, #0
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_fsub+0x284>
 8000e0e:	e0af      	b.n	8000f70 <__aeabi_fsub+0x3e4>
 8000e10:	23ff      	movs	r3, #255	@ 0xff
 8000e12:	4665      	mov	r5, ip
 8000e14:	2d00      	cmp	r5, #0
 8000e16:	d100      	bne.n	8000e1a <__aeabi_fsub+0x28e>
 8000e18:	e0ad      	b.n	8000f76 <__aeabi_fsub+0x3ea>
 8000e1a:	1e5e      	subs	r6, r3, #1
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_fsub+0x296>
 8000e20:	e089      	b.n	8000f36 <__aeabi_fsub+0x3aa>
 8000e22:	2bff      	cmp	r3, #255	@ 0xff
 8000e24:	d0c2      	beq.n	8000dac <__aeabi_fsub+0x220>
 8000e26:	2e1b      	cmp	r6, #27
 8000e28:	dc00      	bgt.n	8000e2c <__aeabi_fsub+0x2a0>
 8000e2a:	e0ab      	b.n	8000f84 <__aeabi_fsub+0x3f8>
 8000e2c:	1d4b      	adds	r3, r1, #5
 8000e2e:	469c      	mov	ip, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	e721      	b.n	8000c78 <__aeabi_fsub+0xec>
 8000e34:	464b      	mov	r3, r9
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d170      	bne.n	8000f1c <__aeabi_fsub+0x390>
 8000e3a:	22fe      	movs	r2, #254	@ 0xfe
 8000e3c:	1c6b      	adds	r3, r5, #1
 8000e3e:	421a      	tst	r2, r3
 8000e40:	d15e      	bne.n	8000f00 <__aeabi_fsub+0x374>
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d000      	beq.n	8000e48 <__aeabi_fsub+0x2bc>
 8000e46:	e0c3      	b.n	8000fd0 <__aeabi_fsub+0x444>
 8000e48:	4663      	mov	r3, ip
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d100      	bne.n	8000e50 <__aeabi_fsub+0x2c4>
 8000e4e:	e0d0      	b.n	8000ff2 <__aeabi_fsub+0x466>
 8000e50:	2900      	cmp	r1, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_fsub+0x2ca>
 8000e54:	e094      	b.n	8000f80 <__aeabi_fsub+0x3f4>
 8000e56:	000a      	movs	r2, r1
 8000e58:	4462      	add	r2, ip
 8000e5a:	0153      	lsls	r3, r2, #5
 8000e5c:	d400      	bmi.n	8000e60 <__aeabi_fsub+0x2d4>
 8000e5e:	e0d8      	b.n	8001012 <__aeabi_fsub+0x486>
 8000e60:	0192      	lsls	r2, r2, #6
 8000e62:	2001      	movs	r0, #1
 8000e64:	0a52      	lsrs	r2, r2, #9
 8000e66:	e6ed      	b.n	8000c44 <__aeabi_fsub+0xb8>
 8000e68:	0008      	movs	r0, r1
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	40d8      	lsrs	r0, r3
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	4099      	lsls	r1, r3
 8000e72:	000b      	movs	r3, r1
 8000e74:	1e5a      	subs	r2, r3, #1
 8000e76:	4193      	sbcs	r3, r2
 8000e78:	4303      	orrs	r3, r0
 8000e7a:	449c      	add	ip, r3
 8000e7c:	4663      	mov	r3, ip
 8000e7e:	015b      	lsls	r3, r3, #5
 8000e80:	d589      	bpl.n	8000d96 <__aeabi_fsub+0x20a>
 8000e82:	3501      	adds	r5, #1
 8000e84:	2dff      	cmp	r5, #255	@ 0xff
 8000e86:	d100      	bne.n	8000e8a <__aeabi_fsub+0x2fe>
 8000e88:	e6da      	b.n	8000c40 <__aeabi_fsub+0xb4>
 8000e8a:	4662      	mov	r2, ip
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4919      	ldr	r1, [pc, #100]	@ (8000ef4 <__aeabi_fsub+0x368>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	0852      	lsrs	r2, r2, #1
 8000e94:	400a      	ands	r2, r1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	4694      	mov	ip, r2
 8000e9c:	075b      	lsls	r3, r3, #29
 8000e9e:	d004      	beq.n	8000eaa <__aeabi_fsub+0x31e>
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_fsub+0x31e>
 8000ea8:	e6bf      	b.n	8000c2a <__aeabi_fsub+0x9e>
 8000eaa:	4663      	mov	r3, ip
 8000eac:	015b      	lsls	r3, r3, #5
 8000eae:	d500      	bpl.n	8000eb2 <__aeabi_fsub+0x326>
 8000eb0:	e6c2      	b.n	8000c38 <__aeabi_fsub+0xac>
 8000eb2:	4663      	mov	r3, ip
 8000eb4:	08df      	lsrs	r7, r3, #3
 8000eb6:	002b      	movs	r3, r5
 8000eb8:	e6e3      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8000eba:	1b53      	subs	r3, r2, r5
 8000ebc:	2d00      	cmp	r5, #0
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_fsub+0x336>
 8000ec0:	e6f4      	b.n	8000cac <__aeabi_fsub+0x120>
 8000ec2:	2080      	movs	r0, #128	@ 0x80
 8000ec4:	4664      	mov	r4, ip
 8000ec6:	04c0      	lsls	r0, r0, #19
 8000ec8:	4304      	orrs	r4, r0
 8000eca:	46a4      	mov	ip, r4
 8000ecc:	0034      	movs	r4, r6
 8000ece:	2001      	movs	r0, #1
 8000ed0:	2b1b      	cmp	r3, #27
 8000ed2:	dc09      	bgt.n	8000ee8 <__aeabi_fsub+0x35c>
 8000ed4:	2520      	movs	r5, #32
 8000ed6:	4660      	mov	r0, ip
 8000ed8:	40d8      	lsrs	r0, r3
 8000eda:	1aeb      	subs	r3, r5, r3
 8000edc:	4665      	mov	r5, ip
 8000ede:	409d      	lsls	r5, r3
 8000ee0:	002b      	movs	r3, r5
 8000ee2:	1e5d      	subs	r5, r3, #1
 8000ee4:	41ab      	sbcs	r3, r5
 8000ee6:	4318      	orrs	r0, r3
 8000ee8:	1a0b      	subs	r3, r1, r0
 8000eea:	469c      	mov	ip, r3
 8000eec:	0015      	movs	r5, r2
 8000eee:	e680      	b.n	8000bf2 <__aeabi_fsub+0x66>
 8000ef0:	fbffffff 	.word	0xfbffffff
 8000ef4:	7dffffff 	.word	0x7dffffff
 8000ef8:	22fe      	movs	r2, #254	@ 0xfe
 8000efa:	1c6b      	adds	r3, r5, #1
 8000efc:	4213      	tst	r3, r2
 8000efe:	d0a3      	beq.n	8000e48 <__aeabi_fsub+0x2bc>
 8000f00:	2bff      	cmp	r3, #255	@ 0xff
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0x37a>
 8000f04:	e69c      	b.n	8000c40 <__aeabi_fsub+0xb4>
 8000f06:	4461      	add	r1, ip
 8000f08:	0849      	lsrs	r1, r1, #1
 8000f0a:	074a      	lsls	r2, r1, #29
 8000f0c:	d049      	beq.n	8000fa2 <__aeabi_fsub+0x416>
 8000f0e:	220f      	movs	r2, #15
 8000f10:	400a      	ands	r2, r1
 8000f12:	2a04      	cmp	r2, #4
 8000f14:	d045      	beq.n	8000fa2 <__aeabi_fsub+0x416>
 8000f16:	1d0a      	adds	r2, r1, #4
 8000f18:	4694      	mov	ip, r2
 8000f1a:	e6ad      	b.n	8000c78 <__aeabi_fsub+0xec>
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_fsub+0x396>
 8000f20:	e776      	b.n	8000e10 <__aeabi_fsub+0x284>
 8000f22:	e68d      	b.n	8000c40 <__aeabi_fsub+0xb4>
 8000f24:	0034      	movs	r4, r6
 8000f26:	20ff      	movs	r0, #255	@ 0xff
 8000f28:	2200      	movs	r2, #0
 8000f2a:	e68b      	b.n	8000c44 <__aeabi_fsub+0xb8>
 8000f2c:	4663      	mov	r3, ip
 8000f2e:	2401      	movs	r4, #1
 8000f30:	1acf      	subs	r7, r1, r3
 8000f32:	4034      	ands	r4, r6
 8000f34:	e664      	b.n	8000c00 <__aeabi_fsub+0x74>
 8000f36:	4461      	add	r1, ip
 8000f38:	014b      	lsls	r3, r1, #5
 8000f3a:	d56d      	bpl.n	8001018 <__aeabi_fsub+0x48c>
 8000f3c:	0848      	lsrs	r0, r1, #1
 8000f3e:	4944      	ldr	r1, [pc, #272]	@ (8001050 <__aeabi_fsub+0x4c4>)
 8000f40:	4001      	ands	r1, r0
 8000f42:	0743      	lsls	r3, r0, #29
 8000f44:	d02c      	beq.n	8000fa0 <__aeabi_fsub+0x414>
 8000f46:	230f      	movs	r3, #15
 8000f48:	4003      	ands	r3, r0
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	d028      	beq.n	8000fa0 <__aeabi_fsub+0x414>
 8000f4e:	1d0b      	adds	r3, r1, #4
 8000f50:	469c      	mov	ip, r3
 8000f52:	2302      	movs	r3, #2
 8000f54:	e690      	b.n	8000c78 <__aeabi_fsub+0xec>
 8000f56:	2900      	cmp	r1, #0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x3d0>
 8000f5a:	e72b      	b.n	8000db4 <__aeabi_fsub+0x228>
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	03db      	lsls	r3, r3, #15
 8000f60:	429f      	cmp	r7, r3
 8000f62:	d200      	bcs.n	8000f66 <__aeabi_fsub+0x3da>
 8000f64:	e726      	b.n	8000db4 <__aeabi_fsub+0x228>
 8000f66:	4298      	cmp	r0, r3
 8000f68:	d300      	bcc.n	8000f6c <__aeabi_fsub+0x3e0>
 8000f6a:	e723      	b.n	8000db4 <__aeabi_fsub+0x228>
 8000f6c:	2401      	movs	r4, #1
 8000f6e:	4034      	ands	r4, r6
 8000f70:	0007      	movs	r7, r0
 8000f72:	e71f      	b.n	8000db4 <__aeabi_fsub+0x228>
 8000f74:	0034      	movs	r4, r6
 8000f76:	468c      	mov	ip, r1
 8000f78:	e67e      	b.n	8000c78 <__aeabi_fsub+0xec>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	08cf      	lsrs	r7, r1, #3
 8000f7e:	e680      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8000f80:	2300      	movs	r3, #0
 8000f82:	e67e      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8000f84:	2020      	movs	r0, #32
 8000f86:	4665      	mov	r5, ip
 8000f88:	1b80      	subs	r0, r0, r6
 8000f8a:	4085      	lsls	r5, r0
 8000f8c:	4663      	mov	r3, ip
 8000f8e:	0028      	movs	r0, r5
 8000f90:	40f3      	lsrs	r3, r6
 8000f92:	1e45      	subs	r5, r0, #1
 8000f94:	41a8      	sbcs	r0, r5
 8000f96:	4303      	orrs	r3, r0
 8000f98:	469c      	mov	ip, r3
 8000f9a:	0015      	movs	r5, r2
 8000f9c:	448c      	add	ip, r1
 8000f9e:	e76d      	b.n	8000e7c <__aeabi_fsub+0x2f0>
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	08cf      	lsrs	r7, r1, #3
 8000fa4:	e66d      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8000fa6:	1b0f      	subs	r7, r1, r4
 8000fa8:	017b      	lsls	r3, r7, #5
 8000faa:	d528      	bpl.n	8000ffe <__aeabi_fsub+0x472>
 8000fac:	01bf      	lsls	r7, r7, #6
 8000fae:	09bf      	lsrs	r7, r7, #6
 8000fb0:	0038      	movs	r0, r7
 8000fb2:	f002 f927 	bl	8003204 <__clzsi2>
 8000fb6:	003b      	movs	r3, r7
 8000fb8:	3805      	subs	r0, #5
 8000fba:	4083      	lsls	r3, r0
 8000fbc:	0034      	movs	r4, r6
 8000fbe:	2501      	movs	r5, #1
 8000fc0:	e6ca      	b.n	8000d58 <__aeabi_fsub+0x1cc>
 8000fc2:	2900      	cmp	r1, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x43c>
 8000fc6:	e6b5      	b.n	8000d34 <__aeabi_fsub+0x1a8>
 8000fc8:	2401      	movs	r4, #1
 8000fca:	0007      	movs	r7, r0
 8000fcc:	4034      	ands	r4, r6
 8000fce:	e658      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8000fd0:	4663      	mov	r3, ip
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_fsub+0x44c>
 8000fd6:	e6e9      	b.n	8000dac <__aeabi_fsub+0x220>
 8000fd8:	2900      	cmp	r1, #0
 8000fda:	d100      	bne.n	8000fde <__aeabi_fsub+0x452>
 8000fdc:	e6ea      	b.n	8000db4 <__aeabi_fsub+0x228>
 8000fde:	2380      	movs	r3, #128	@ 0x80
 8000fe0:	03db      	lsls	r3, r3, #15
 8000fe2:	429f      	cmp	r7, r3
 8000fe4:	d200      	bcs.n	8000fe8 <__aeabi_fsub+0x45c>
 8000fe6:	e6e5      	b.n	8000db4 <__aeabi_fsub+0x228>
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	d300      	bcc.n	8000fee <__aeabi_fsub+0x462>
 8000fec:	e6e2      	b.n	8000db4 <__aeabi_fsub+0x228>
 8000fee:	0007      	movs	r7, r0
 8000ff0:	e6e0      	b.n	8000db4 <__aeabi_fsub+0x228>
 8000ff2:	2900      	cmp	r1, #0
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_fsub+0x46c>
 8000ff6:	e69e      	b.n	8000d36 <__aeabi_fsub+0x1aa>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	08cf      	lsrs	r7, r1, #3
 8000ffc:	e641      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8000ffe:	0034      	movs	r4, r6
 8001000:	2301      	movs	r3, #1
 8001002:	08ff      	lsrs	r7, r7, #3
 8001004:	e63d      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8001006:	2f00      	cmp	r7, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x480>
 800100a:	e693      	b.n	8000d34 <__aeabi_fsub+0x1a8>
 800100c:	2300      	movs	r3, #0
 800100e:	08ff      	lsrs	r7, r7, #3
 8001010:	e637      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8001012:	2300      	movs	r3, #0
 8001014:	08d7      	lsrs	r7, r2, #3
 8001016:	e634      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8001018:	2301      	movs	r3, #1
 800101a:	08cf      	lsrs	r7, r1, #3
 800101c:	e631      	b.n	8000c82 <__aeabi_fsub+0xf6>
 800101e:	2280      	movs	r2, #128	@ 0x80
 8001020:	000b      	movs	r3, r1
 8001022:	04d2      	lsls	r2, r2, #19
 8001024:	2001      	movs	r0, #1
 8001026:	4013      	ands	r3, r2
 8001028:	4211      	tst	r1, r2
 800102a:	d000      	beq.n	800102e <__aeabi_fsub+0x4a2>
 800102c:	e6ae      	b.n	8000d8c <__aeabi_fsub+0x200>
 800102e:	08cf      	lsrs	r7, r1, #3
 8001030:	e627      	b.n	8000c82 <__aeabi_fsub+0xf6>
 8001032:	2b00      	cmp	r3, #0
 8001034:	d100      	bne.n	8001038 <__aeabi_fsub+0x4ac>
 8001036:	e75f      	b.n	8000ef8 <__aeabi_fsub+0x36c>
 8001038:	1b56      	subs	r6, r2, r5
 800103a:	2d00      	cmp	r5, #0
 800103c:	d101      	bne.n	8001042 <__aeabi_fsub+0x4b6>
 800103e:	0033      	movs	r3, r6
 8001040:	e6e7      	b.n	8000e12 <__aeabi_fsub+0x286>
 8001042:	2380      	movs	r3, #128	@ 0x80
 8001044:	4660      	mov	r0, ip
 8001046:	04db      	lsls	r3, r3, #19
 8001048:	4318      	orrs	r0, r3
 800104a:	4684      	mov	ip, r0
 800104c:	e6eb      	b.n	8000e26 <__aeabi_fsub+0x29a>
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	7dffffff 	.word	0x7dffffff

08001054 <__aeabi_f2iz>:
 8001054:	0241      	lsls	r1, r0, #9
 8001056:	0042      	lsls	r2, r0, #1
 8001058:	0fc3      	lsrs	r3, r0, #31
 800105a:	0a49      	lsrs	r1, r1, #9
 800105c:	2000      	movs	r0, #0
 800105e:	0e12      	lsrs	r2, r2, #24
 8001060:	2a7e      	cmp	r2, #126	@ 0x7e
 8001062:	dd03      	ble.n	800106c <__aeabi_f2iz+0x18>
 8001064:	2a9d      	cmp	r2, #157	@ 0x9d
 8001066:	dd02      	ble.n	800106e <__aeabi_f2iz+0x1a>
 8001068:	4a09      	ldr	r2, [pc, #36]	@ (8001090 <__aeabi_f2iz+0x3c>)
 800106a:	1898      	adds	r0, r3, r2
 800106c:	4770      	bx	lr
 800106e:	2080      	movs	r0, #128	@ 0x80
 8001070:	0400      	lsls	r0, r0, #16
 8001072:	4301      	orrs	r1, r0
 8001074:	2a95      	cmp	r2, #149	@ 0x95
 8001076:	dc07      	bgt.n	8001088 <__aeabi_f2iz+0x34>
 8001078:	2096      	movs	r0, #150	@ 0x96
 800107a:	1a82      	subs	r2, r0, r2
 800107c:	40d1      	lsrs	r1, r2
 800107e:	4248      	negs	r0, r1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f3      	bne.n	800106c <__aeabi_f2iz+0x18>
 8001084:	0008      	movs	r0, r1
 8001086:	e7f1      	b.n	800106c <__aeabi_f2iz+0x18>
 8001088:	3a96      	subs	r2, #150	@ 0x96
 800108a:	4091      	lsls	r1, r2
 800108c:	e7f7      	b.n	800107e <__aeabi_f2iz+0x2a>
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	7fffffff 	.word	0x7fffffff

08001094 <__aeabi_i2f>:
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	2800      	cmp	r0, #0
 8001098:	d012      	beq.n	80010c0 <__aeabi_i2f+0x2c>
 800109a:	17c3      	asrs	r3, r0, #31
 800109c:	18c5      	adds	r5, r0, r3
 800109e:	405d      	eors	r5, r3
 80010a0:	0fc4      	lsrs	r4, r0, #31
 80010a2:	0028      	movs	r0, r5
 80010a4:	f002 f8ae 	bl	8003204 <__clzsi2>
 80010a8:	239e      	movs	r3, #158	@ 0x9e
 80010aa:	1a1b      	subs	r3, r3, r0
 80010ac:	2b96      	cmp	r3, #150	@ 0x96
 80010ae:	dc0f      	bgt.n	80010d0 <__aeabi_i2f+0x3c>
 80010b0:	2808      	cmp	r0, #8
 80010b2:	d038      	beq.n	8001126 <__aeabi_i2f+0x92>
 80010b4:	3808      	subs	r0, #8
 80010b6:	4085      	lsls	r5, r0
 80010b8:	026d      	lsls	r5, r5, #9
 80010ba:	0a6d      	lsrs	r5, r5, #9
 80010bc:	b2d8      	uxtb	r0, r3
 80010be:	e002      	b.n	80010c6 <__aeabi_i2f+0x32>
 80010c0:	2400      	movs	r4, #0
 80010c2:	2000      	movs	r0, #0
 80010c4:	2500      	movs	r5, #0
 80010c6:	05c0      	lsls	r0, r0, #23
 80010c8:	4328      	orrs	r0, r5
 80010ca:	07e4      	lsls	r4, r4, #31
 80010cc:	4320      	orrs	r0, r4
 80010ce:	bd70      	pop	{r4, r5, r6, pc}
 80010d0:	2b99      	cmp	r3, #153	@ 0x99
 80010d2:	dc14      	bgt.n	80010fe <__aeabi_i2f+0x6a>
 80010d4:	1f42      	subs	r2, r0, #5
 80010d6:	4095      	lsls	r5, r2
 80010d8:	002a      	movs	r2, r5
 80010da:	4915      	ldr	r1, [pc, #84]	@ (8001130 <__aeabi_i2f+0x9c>)
 80010dc:	4011      	ands	r1, r2
 80010de:	0755      	lsls	r5, r2, #29
 80010e0:	d01c      	beq.n	800111c <__aeabi_i2f+0x88>
 80010e2:	250f      	movs	r5, #15
 80010e4:	402a      	ands	r2, r5
 80010e6:	2a04      	cmp	r2, #4
 80010e8:	d018      	beq.n	800111c <__aeabi_i2f+0x88>
 80010ea:	3104      	adds	r1, #4
 80010ec:	08ca      	lsrs	r2, r1, #3
 80010ee:	0149      	lsls	r1, r1, #5
 80010f0:	d515      	bpl.n	800111e <__aeabi_i2f+0x8a>
 80010f2:	239f      	movs	r3, #159	@ 0x9f
 80010f4:	0252      	lsls	r2, r2, #9
 80010f6:	1a18      	subs	r0, r3, r0
 80010f8:	0a55      	lsrs	r5, r2, #9
 80010fa:	b2c0      	uxtb	r0, r0
 80010fc:	e7e3      	b.n	80010c6 <__aeabi_i2f+0x32>
 80010fe:	2205      	movs	r2, #5
 8001100:	0029      	movs	r1, r5
 8001102:	1a12      	subs	r2, r2, r0
 8001104:	40d1      	lsrs	r1, r2
 8001106:	0002      	movs	r2, r0
 8001108:	321b      	adds	r2, #27
 800110a:	4095      	lsls	r5, r2
 800110c:	002a      	movs	r2, r5
 800110e:	1e55      	subs	r5, r2, #1
 8001110:	41aa      	sbcs	r2, r5
 8001112:	430a      	orrs	r2, r1
 8001114:	4906      	ldr	r1, [pc, #24]	@ (8001130 <__aeabi_i2f+0x9c>)
 8001116:	4011      	ands	r1, r2
 8001118:	0755      	lsls	r5, r2, #29
 800111a:	d1e2      	bne.n	80010e2 <__aeabi_i2f+0x4e>
 800111c:	08ca      	lsrs	r2, r1, #3
 800111e:	0252      	lsls	r2, r2, #9
 8001120:	0a55      	lsrs	r5, r2, #9
 8001122:	b2d8      	uxtb	r0, r3
 8001124:	e7cf      	b.n	80010c6 <__aeabi_i2f+0x32>
 8001126:	026d      	lsls	r5, r5, #9
 8001128:	0a6d      	lsrs	r5, r5, #9
 800112a:	308e      	adds	r0, #142	@ 0x8e
 800112c:	e7cb      	b.n	80010c6 <__aeabi_i2f+0x32>
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	fbffffff 	.word	0xfbffffff

08001134 <__aeabi_ui2f>:
 8001134:	b510      	push	{r4, lr}
 8001136:	1e04      	subs	r4, r0, #0
 8001138:	d00d      	beq.n	8001156 <__aeabi_ui2f+0x22>
 800113a:	f002 f863 	bl	8003204 <__clzsi2>
 800113e:	239e      	movs	r3, #158	@ 0x9e
 8001140:	1a1b      	subs	r3, r3, r0
 8001142:	2b96      	cmp	r3, #150	@ 0x96
 8001144:	dc0c      	bgt.n	8001160 <__aeabi_ui2f+0x2c>
 8001146:	2808      	cmp	r0, #8
 8001148:	d034      	beq.n	80011b4 <__aeabi_ui2f+0x80>
 800114a:	3808      	subs	r0, #8
 800114c:	4084      	lsls	r4, r0
 800114e:	0264      	lsls	r4, r4, #9
 8001150:	0a64      	lsrs	r4, r4, #9
 8001152:	b2d8      	uxtb	r0, r3
 8001154:	e001      	b.n	800115a <__aeabi_ui2f+0x26>
 8001156:	2000      	movs	r0, #0
 8001158:	2400      	movs	r4, #0
 800115a:	05c0      	lsls	r0, r0, #23
 800115c:	4320      	orrs	r0, r4
 800115e:	bd10      	pop	{r4, pc}
 8001160:	2b99      	cmp	r3, #153	@ 0x99
 8001162:	dc13      	bgt.n	800118c <__aeabi_ui2f+0x58>
 8001164:	1f42      	subs	r2, r0, #5
 8001166:	4094      	lsls	r4, r2
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <__aeabi_ui2f+0x88>)
 800116a:	4022      	ands	r2, r4
 800116c:	0761      	lsls	r1, r4, #29
 800116e:	d01c      	beq.n	80011aa <__aeabi_ui2f+0x76>
 8001170:	210f      	movs	r1, #15
 8001172:	4021      	ands	r1, r4
 8001174:	2904      	cmp	r1, #4
 8001176:	d018      	beq.n	80011aa <__aeabi_ui2f+0x76>
 8001178:	3204      	adds	r2, #4
 800117a:	08d4      	lsrs	r4, r2, #3
 800117c:	0152      	lsls	r2, r2, #5
 800117e:	d515      	bpl.n	80011ac <__aeabi_ui2f+0x78>
 8001180:	239f      	movs	r3, #159	@ 0x9f
 8001182:	0264      	lsls	r4, r4, #9
 8001184:	1a18      	subs	r0, r3, r0
 8001186:	0a64      	lsrs	r4, r4, #9
 8001188:	b2c0      	uxtb	r0, r0
 800118a:	e7e6      	b.n	800115a <__aeabi_ui2f+0x26>
 800118c:	0002      	movs	r2, r0
 800118e:	0021      	movs	r1, r4
 8001190:	321b      	adds	r2, #27
 8001192:	4091      	lsls	r1, r2
 8001194:	000a      	movs	r2, r1
 8001196:	1e51      	subs	r1, r2, #1
 8001198:	418a      	sbcs	r2, r1
 800119a:	2105      	movs	r1, #5
 800119c:	1a09      	subs	r1, r1, r0
 800119e:	40cc      	lsrs	r4, r1
 80011a0:	4314      	orrs	r4, r2
 80011a2:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <__aeabi_ui2f+0x88>)
 80011a4:	4022      	ands	r2, r4
 80011a6:	0761      	lsls	r1, r4, #29
 80011a8:	d1e2      	bne.n	8001170 <__aeabi_ui2f+0x3c>
 80011aa:	08d4      	lsrs	r4, r2, #3
 80011ac:	0264      	lsls	r4, r4, #9
 80011ae:	0a64      	lsrs	r4, r4, #9
 80011b0:	b2d8      	uxtb	r0, r3
 80011b2:	e7d2      	b.n	800115a <__aeabi_ui2f+0x26>
 80011b4:	0264      	lsls	r4, r4, #9
 80011b6:	0a64      	lsrs	r4, r4, #9
 80011b8:	308e      	adds	r0, #142	@ 0x8e
 80011ba:	e7ce      	b.n	800115a <__aeabi_ui2f+0x26>
 80011bc:	fbffffff 	.word	0xfbffffff

080011c0 <__aeabi_dadd>:
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	464f      	mov	r7, r9
 80011c4:	4646      	mov	r6, r8
 80011c6:	46d6      	mov	lr, sl
 80011c8:	b5c0      	push	{r6, r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	9000      	str	r0, [sp, #0]
 80011ce:	9101      	str	r1, [sp, #4]
 80011d0:	030e      	lsls	r6, r1, #12
 80011d2:	004c      	lsls	r4, r1, #1
 80011d4:	0fcd      	lsrs	r5, r1, #31
 80011d6:	0a71      	lsrs	r1, r6, #9
 80011d8:	9e00      	ldr	r6, [sp, #0]
 80011da:	005f      	lsls	r7, r3, #1
 80011dc:	0f76      	lsrs	r6, r6, #29
 80011de:	430e      	orrs	r6, r1
 80011e0:	9900      	ldr	r1, [sp, #0]
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	00c9      	lsls	r1, r1, #3
 80011e8:	4689      	mov	r9, r1
 80011ea:	0319      	lsls	r1, r3, #12
 80011ec:	0d7b      	lsrs	r3, r7, #21
 80011ee:	4698      	mov	r8, r3
 80011f0:	9b01      	ldr	r3, [sp, #4]
 80011f2:	0a49      	lsrs	r1, r1, #9
 80011f4:	0fdb      	lsrs	r3, r3, #31
 80011f6:	469c      	mov	ip, r3
 80011f8:	9b00      	ldr	r3, [sp, #0]
 80011fa:	9a00      	ldr	r2, [sp, #0]
 80011fc:	0f5b      	lsrs	r3, r3, #29
 80011fe:	430b      	orrs	r3, r1
 8001200:	4641      	mov	r1, r8
 8001202:	0d64      	lsrs	r4, r4, #21
 8001204:	00d2      	lsls	r2, r2, #3
 8001206:	1a61      	subs	r1, r4, r1
 8001208:	4565      	cmp	r5, ip
 800120a:	d100      	bne.n	800120e <__aeabi_dadd+0x4e>
 800120c:	e0a6      	b.n	800135c <__aeabi_dadd+0x19c>
 800120e:	2900      	cmp	r1, #0
 8001210:	dd72      	ble.n	80012f8 <__aeabi_dadd+0x138>
 8001212:	4647      	mov	r7, r8
 8001214:	2f00      	cmp	r7, #0
 8001216:	d100      	bne.n	800121a <__aeabi_dadd+0x5a>
 8001218:	e0dd      	b.n	80013d6 <__aeabi_dadd+0x216>
 800121a:	4fcc      	ldr	r7, [pc, #816]	@ (800154c <__aeabi_dadd+0x38c>)
 800121c:	42bc      	cmp	r4, r7
 800121e:	d100      	bne.n	8001222 <__aeabi_dadd+0x62>
 8001220:	e19a      	b.n	8001558 <__aeabi_dadd+0x398>
 8001222:	2701      	movs	r7, #1
 8001224:	2938      	cmp	r1, #56	@ 0x38
 8001226:	dc17      	bgt.n	8001258 <__aeabi_dadd+0x98>
 8001228:	2780      	movs	r7, #128	@ 0x80
 800122a:	043f      	lsls	r7, r7, #16
 800122c:	433b      	orrs	r3, r7
 800122e:	291f      	cmp	r1, #31
 8001230:	dd00      	ble.n	8001234 <__aeabi_dadd+0x74>
 8001232:	e1dd      	b.n	80015f0 <__aeabi_dadd+0x430>
 8001234:	2720      	movs	r7, #32
 8001236:	1a78      	subs	r0, r7, r1
 8001238:	001f      	movs	r7, r3
 800123a:	4087      	lsls	r7, r0
 800123c:	46ba      	mov	sl, r7
 800123e:	0017      	movs	r7, r2
 8001240:	40cf      	lsrs	r7, r1
 8001242:	4684      	mov	ip, r0
 8001244:	0038      	movs	r0, r7
 8001246:	4657      	mov	r7, sl
 8001248:	4307      	orrs	r7, r0
 800124a:	4660      	mov	r0, ip
 800124c:	4082      	lsls	r2, r0
 800124e:	40cb      	lsrs	r3, r1
 8001250:	1e50      	subs	r0, r2, #1
 8001252:	4182      	sbcs	r2, r0
 8001254:	1af6      	subs	r6, r6, r3
 8001256:	4317      	orrs	r7, r2
 8001258:	464b      	mov	r3, r9
 800125a:	1bdf      	subs	r7, r3, r7
 800125c:	45b9      	cmp	r9, r7
 800125e:	4180      	sbcs	r0, r0
 8001260:	4240      	negs	r0, r0
 8001262:	1a36      	subs	r6, r6, r0
 8001264:	0233      	lsls	r3, r6, #8
 8001266:	d400      	bmi.n	800126a <__aeabi_dadd+0xaa>
 8001268:	e0ff      	b.n	800146a <__aeabi_dadd+0x2aa>
 800126a:	0276      	lsls	r6, r6, #9
 800126c:	0a76      	lsrs	r6, r6, #9
 800126e:	2e00      	cmp	r6, #0
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0xb4>
 8001272:	e13c      	b.n	80014ee <__aeabi_dadd+0x32e>
 8001274:	0030      	movs	r0, r6
 8001276:	f001 ffc5 	bl	8003204 <__clzsi2>
 800127a:	0003      	movs	r3, r0
 800127c:	3b08      	subs	r3, #8
 800127e:	2120      	movs	r1, #32
 8001280:	0038      	movs	r0, r7
 8001282:	1aca      	subs	r2, r1, r3
 8001284:	40d0      	lsrs	r0, r2
 8001286:	409e      	lsls	r6, r3
 8001288:	0002      	movs	r2, r0
 800128a:	409f      	lsls	r7, r3
 800128c:	4332      	orrs	r2, r6
 800128e:	429c      	cmp	r4, r3
 8001290:	dd00      	ble.n	8001294 <__aeabi_dadd+0xd4>
 8001292:	e1a6      	b.n	80015e2 <__aeabi_dadd+0x422>
 8001294:	1b18      	subs	r0, r3, r4
 8001296:	3001      	adds	r0, #1
 8001298:	1a09      	subs	r1, r1, r0
 800129a:	003e      	movs	r6, r7
 800129c:	408f      	lsls	r7, r1
 800129e:	40c6      	lsrs	r6, r0
 80012a0:	1e7b      	subs	r3, r7, #1
 80012a2:	419f      	sbcs	r7, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	408b      	lsls	r3, r1
 80012a8:	4337      	orrs	r7, r6
 80012aa:	431f      	orrs	r7, r3
 80012ac:	40c2      	lsrs	r2, r0
 80012ae:	003b      	movs	r3, r7
 80012b0:	0016      	movs	r6, r2
 80012b2:	2400      	movs	r4, #0
 80012b4:	4313      	orrs	r3, r2
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0xfa>
 80012b8:	e1df      	b.n	800167a <__aeabi_dadd+0x4ba>
 80012ba:	077b      	lsls	r3, r7, #29
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dadd+0x100>
 80012be:	e332      	b.n	8001926 <__aeabi_dadd+0x766>
 80012c0:	230f      	movs	r3, #15
 80012c2:	003a      	movs	r2, r7
 80012c4:	403b      	ands	r3, r7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d004      	beq.n	80012d4 <__aeabi_dadd+0x114>
 80012ca:	1d3a      	adds	r2, r7, #4
 80012cc:	42ba      	cmp	r2, r7
 80012ce:	41bf      	sbcs	r7, r7
 80012d0:	427f      	negs	r7, r7
 80012d2:	19f6      	adds	r6, r6, r7
 80012d4:	0233      	lsls	r3, r6, #8
 80012d6:	d400      	bmi.n	80012da <__aeabi_dadd+0x11a>
 80012d8:	e323      	b.n	8001922 <__aeabi_dadd+0x762>
 80012da:	4b9c      	ldr	r3, [pc, #624]	@ (800154c <__aeabi_dadd+0x38c>)
 80012dc:	3401      	adds	r4, #1
 80012de:	429c      	cmp	r4, r3
 80012e0:	d100      	bne.n	80012e4 <__aeabi_dadd+0x124>
 80012e2:	e0b4      	b.n	800144e <__aeabi_dadd+0x28e>
 80012e4:	4b9a      	ldr	r3, [pc, #616]	@ (8001550 <__aeabi_dadd+0x390>)
 80012e6:	0564      	lsls	r4, r4, #21
 80012e8:	401e      	ands	r6, r3
 80012ea:	0d64      	lsrs	r4, r4, #21
 80012ec:	0777      	lsls	r7, r6, #29
 80012ee:	08d2      	lsrs	r2, r2, #3
 80012f0:	0276      	lsls	r6, r6, #9
 80012f2:	4317      	orrs	r7, r2
 80012f4:	0b36      	lsrs	r6, r6, #12
 80012f6:	e0ac      	b.n	8001452 <__aeabi_dadd+0x292>
 80012f8:	2900      	cmp	r1, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_dadd+0x13e>
 80012fc:	e07e      	b.n	80013fc <__aeabi_dadd+0x23c>
 80012fe:	4641      	mov	r1, r8
 8001300:	1b09      	subs	r1, r1, r4
 8001302:	2c00      	cmp	r4, #0
 8001304:	d000      	beq.n	8001308 <__aeabi_dadd+0x148>
 8001306:	e160      	b.n	80015ca <__aeabi_dadd+0x40a>
 8001308:	0034      	movs	r4, r6
 800130a:	4648      	mov	r0, r9
 800130c:	4304      	orrs	r4, r0
 800130e:	d100      	bne.n	8001312 <__aeabi_dadd+0x152>
 8001310:	e1c9      	b.n	80016a6 <__aeabi_dadd+0x4e6>
 8001312:	1e4c      	subs	r4, r1, #1
 8001314:	2901      	cmp	r1, #1
 8001316:	d100      	bne.n	800131a <__aeabi_dadd+0x15a>
 8001318:	e22e      	b.n	8001778 <__aeabi_dadd+0x5b8>
 800131a:	4d8c      	ldr	r5, [pc, #560]	@ (800154c <__aeabi_dadd+0x38c>)
 800131c:	42a9      	cmp	r1, r5
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x162>
 8001320:	e224      	b.n	800176c <__aeabi_dadd+0x5ac>
 8001322:	2701      	movs	r7, #1
 8001324:	2c38      	cmp	r4, #56	@ 0x38
 8001326:	dc11      	bgt.n	800134c <__aeabi_dadd+0x18c>
 8001328:	0021      	movs	r1, r4
 800132a:	291f      	cmp	r1, #31
 800132c:	dd00      	ble.n	8001330 <__aeabi_dadd+0x170>
 800132e:	e20b      	b.n	8001748 <__aeabi_dadd+0x588>
 8001330:	2420      	movs	r4, #32
 8001332:	0037      	movs	r7, r6
 8001334:	4648      	mov	r0, r9
 8001336:	1a64      	subs	r4, r4, r1
 8001338:	40a7      	lsls	r7, r4
 800133a:	40c8      	lsrs	r0, r1
 800133c:	4307      	orrs	r7, r0
 800133e:	4648      	mov	r0, r9
 8001340:	40a0      	lsls	r0, r4
 8001342:	40ce      	lsrs	r6, r1
 8001344:	1e44      	subs	r4, r0, #1
 8001346:	41a0      	sbcs	r0, r4
 8001348:	1b9b      	subs	r3, r3, r6
 800134a:	4307      	orrs	r7, r0
 800134c:	1bd7      	subs	r7, r2, r7
 800134e:	42ba      	cmp	r2, r7
 8001350:	4192      	sbcs	r2, r2
 8001352:	4252      	negs	r2, r2
 8001354:	4665      	mov	r5, ip
 8001356:	4644      	mov	r4, r8
 8001358:	1a9e      	subs	r6, r3, r2
 800135a:	e783      	b.n	8001264 <__aeabi_dadd+0xa4>
 800135c:	2900      	cmp	r1, #0
 800135e:	dc00      	bgt.n	8001362 <__aeabi_dadd+0x1a2>
 8001360:	e09c      	b.n	800149c <__aeabi_dadd+0x2dc>
 8001362:	4647      	mov	r7, r8
 8001364:	2f00      	cmp	r7, #0
 8001366:	d167      	bne.n	8001438 <__aeabi_dadd+0x278>
 8001368:	001f      	movs	r7, r3
 800136a:	4317      	orrs	r7, r2
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x1b0>
 800136e:	e0e4      	b.n	800153a <__aeabi_dadd+0x37a>
 8001370:	1e48      	subs	r0, r1, #1
 8001372:	2901      	cmp	r1, #1
 8001374:	d100      	bne.n	8001378 <__aeabi_dadd+0x1b8>
 8001376:	e19b      	b.n	80016b0 <__aeabi_dadd+0x4f0>
 8001378:	4f74      	ldr	r7, [pc, #464]	@ (800154c <__aeabi_dadd+0x38c>)
 800137a:	42b9      	cmp	r1, r7
 800137c:	d100      	bne.n	8001380 <__aeabi_dadd+0x1c0>
 800137e:	e0eb      	b.n	8001558 <__aeabi_dadd+0x398>
 8001380:	2701      	movs	r7, #1
 8001382:	0001      	movs	r1, r0
 8001384:	2838      	cmp	r0, #56	@ 0x38
 8001386:	dc11      	bgt.n	80013ac <__aeabi_dadd+0x1ec>
 8001388:	291f      	cmp	r1, #31
 800138a:	dd00      	ble.n	800138e <__aeabi_dadd+0x1ce>
 800138c:	e1c7      	b.n	800171e <__aeabi_dadd+0x55e>
 800138e:	2720      	movs	r7, #32
 8001390:	1a78      	subs	r0, r7, r1
 8001392:	001f      	movs	r7, r3
 8001394:	4684      	mov	ip, r0
 8001396:	4087      	lsls	r7, r0
 8001398:	0010      	movs	r0, r2
 800139a:	40c8      	lsrs	r0, r1
 800139c:	4307      	orrs	r7, r0
 800139e:	4660      	mov	r0, ip
 80013a0:	4082      	lsls	r2, r0
 80013a2:	40cb      	lsrs	r3, r1
 80013a4:	1e50      	subs	r0, r2, #1
 80013a6:	4182      	sbcs	r2, r0
 80013a8:	18f6      	adds	r6, r6, r3
 80013aa:	4317      	orrs	r7, r2
 80013ac:	444f      	add	r7, r9
 80013ae:	454f      	cmp	r7, r9
 80013b0:	4180      	sbcs	r0, r0
 80013b2:	4240      	negs	r0, r0
 80013b4:	1836      	adds	r6, r6, r0
 80013b6:	0233      	lsls	r3, r6, #8
 80013b8:	d557      	bpl.n	800146a <__aeabi_dadd+0x2aa>
 80013ba:	4b64      	ldr	r3, [pc, #400]	@ (800154c <__aeabi_dadd+0x38c>)
 80013bc:	3401      	adds	r4, #1
 80013be:	429c      	cmp	r4, r3
 80013c0:	d045      	beq.n	800144e <__aeabi_dadd+0x28e>
 80013c2:	2101      	movs	r1, #1
 80013c4:	4b62      	ldr	r3, [pc, #392]	@ (8001550 <__aeabi_dadd+0x390>)
 80013c6:	087a      	lsrs	r2, r7, #1
 80013c8:	401e      	ands	r6, r3
 80013ca:	4039      	ands	r1, r7
 80013cc:	430a      	orrs	r2, r1
 80013ce:	07f7      	lsls	r7, r6, #31
 80013d0:	4317      	orrs	r7, r2
 80013d2:	0876      	lsrs	r6, r6, #1
 80013d4:	e771      	b.n	80012ba <__aeabi_dadd+0xfa>
 80013d6:	001f      	movs	r7, r3
 80013d8:	4317      	orrs	r7, r2
 80013da:	d100      	bne.n	80013de <__aeabi_dadd+0x21e>
 80013dc:	e0ad      	b.n	800153a <__aeabi_dadd+0x37a>
 80013de:	1e4f      	subs	r7, r1, #1
 80013e0:	46bc      	mov	ip, r7
 80013e2:	2901      	cmp	r1, #1
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dadd+0x228>
 80013e6:	e182      	b.n	80016ee <__aeabi_dadd+0x52e>
 80013e8:	4f58      	ldr	r7, [pc, #352]	@ (800154c <__aeabi_dadd+0x38c>)
 80013ea:	42b9      	cmp	r1, r7
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dadd+0x230>
 80013ee:	e190      	b.n	8001712 <__aeabi_dadd+0x552>
 80013f0:	4661      	mov	r1, ip
 80013f2:	2701      	movs	r7, #1
 80013f4:	2938      	cmp	r1, #56	@ 0x38
 80013f6:	dd00      	ble.n	80013fa <__aeabi_dadd+0x23a>
 80013f8:	e72e      	b.n	8001258 <__aeabi_dadd+0x98>
 80013fa:	e718      	b.n	800122e <__aeabi_dadd+0x6e>
 80013fc:	4f55      	ldr	r7, [pc, #340]	@ (8001554 <__aeabi_dadd+0x394>)
 80013fe:	1c61      	adds	r1, r4, #1
 8001400:	4239      	tst	r1, r7
 8001402:	d000      	beq.n	8001406 <__aeabi_dadd+0x246>
 8001404:	e0d0      	b.n	80015a8 <__aeabi_dadd+0x3e8>
 8001406:	0031      	movs	r1, r6
 8001408:	4648      	mov	r0, r9
 800140a:	001f      	movs	r7, r3
 800140c:	4301      	orrs	r1, r0
 800140e:	4317      	orrs	r7, r2
 8001410:	2c00      	cmp	r4, #0
 8001412:	d000      	beq.n	8001416 <__aeabi_dadd+0x256>
 8001414:	e13d      	b.n	8001692 <__aeabi_dadd+0x4d2>
 8001416:	2900      	cmp	r1, #0
 8001418:	d100      	bne.n	800141c <__aeabi_dadd+0x25c>
 800141a:	e1bc      	b.n	8001796 <__aeabi_dadd+0x5d6>
 800141c:	2f00      	cmp	r7, #0
 800141e:	d000      	beq.n	8001422 <__aeabi_dadd+0x262>
 8001420:	e1bf      	b.n	80017a2 <__aeabi_dadd+0x5e2>
 8001422:	464b      	mov	r3, r9
 8001424:	2100      	movs	r1, #0
 8001426:	08d8      	lsrs	r0, r3, #3
 8001428:	0777      	lsls	r7, r6, #29
 800142a:	4307      	orrs	r7, r0
 800142c:	08f0      	lsrs	r0, r6, #3
 800142e:	0306      	lsls	r6, r0, #12
 8001430:	054c      	lsls	r4, r1, #21
 8001432:	0b36      	lsrs	r6, r6, #12
 8001434:	0d64      	lsrs	r4, r4, #21
 8001436:	e00c      	b.n	8001452 <__aeabi_dadd+0x292>
 8001438:	4f44      	ldr	r7, [pc, #272]	@ (800154c <__aeabi_dadd+0x38c>)
 800143a:	42bc      	cmp	r4, r7
 800143c:	d100      	bne.n	8001440 <__aeabi_dadd+0x280>
 800143e:	e08b      	b.n	8001558 <__aeabi_dadd+0x398>
 8001440:	2701      	movs	r7, #1
 8001442:	2938      	cmp	r1, #56	@ 0x38
 8001444:	dcb2      	bgt.n	80013ac <__aeabi_dadd+0x1ec>
 8001446:	2780      	movs	r7, #128	@ 0x80
 8001448:	043f      	lsls	r7, r7, #16
 800144a:	433b      	orrs	r3, r7
 800144c:	e79c      	b.n	8001388 <__aeabi_dadd+0x1c8>
 800144e:	2600      	movs	r6, #0
 8001450:	2700      	movs	r7, #0
 8001452:	0524      	lsls	r4, r4, #20
 8001454:	4334      	orrs	r4, r6
 8001456:	07ed      	lsls	r5, r5, #31
 8001458:	432c      	orrs	r4, r5
 800145a:	0038      	movs	r0, r7
 800145c:	0021      	movs	r1, r4
 800145e:	b002      	add	sp, #8
 8001460:	bce0      	pop	{r5, r6, r7}
 8001462:	46ba      	mov	sl, r7
 8001464:	46b1      	mov	r9, r6
 8001466:	46a8      	mov	r8, r5
 8001468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146a:	077b      	lsls	r3, r7, #29
 800146c:	d004      	beq.n	8001478 <__aeabi_dadd+0x2b8>
 800146e:	230f      	movs	r3, #15
 8001470:	403b      	ands	r3, r7
 8001472:	2b04      	cmp	r3, #4
 8001474:	d000      	beq.n	8001478 <__aeabi_dadd+0x2b8>
 8001476:	e728      	b.n	80012ca <__aeabi_dadd+0x10a>
 8001478:	08f8      	lsrs	r0, r7, #3
 800147a:	4b34      	ldr	r3, [pc, #208]	@ (800154c <__aeabi_dadd+0x38c>)
 800147c:	0777      	lsls	r7, r6, #29
 800147e:	4307      	orrs	r7, r0
 8001480:	08f0      	lsrs	r0, r6, #3
 8001482:	429c      	cmp	r4, r3
 8001484:	d000      	beq.n	8001488 <__aeabi_dadd+0x2c8>
 8001486:	e24a      	b.n	800191e <__aeabi_dadd+0x75e>
 8001488:	003b      	movs	r3, r7
 800148a:	4303      	orrs	r3, r0
 800148c:	d059      	beq.n	8001542 <__aeabi_dadd+0x382>
 800148e:	2680      	movs	r6, #128	@ 0x80
 8001490:	0336      	lsls	r6, r6, #12
 8001492:	4306      	orrs	r6, r0
 8001494:	0336      	lsls	r6, r6, #12
 8001496:	4c2d      	ldr	r4, [pc, #180]	@ (800154c <__aeabi_dadd+0x38c>)
 8001498:	0b36      	lsrs	r6, r6, #12
 800149a:	e7da      	b.n	8001452 <__aeabi_dadd+0x292>
 800149c:	2900      	cmp	r1, #0
 800149e:	d061      	beq.n	8001564 <__aeabi_dadd+0x3a4>
 80014a0:	4641      	mov	r1, r8
 80014a2:	1b09      	subs	r1, r1, r4
 80014a4:	2c00      	cmp	r4, #0
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x2ea>
 80014a8:	e0b9      	b.n	800161e <__aeabi_dadd+0x45e>
 80014aa:	4c28      	ldr	r4, [pc, #160]	@ (800154c <__aeabi_dadd+0x38c>)
 80014ac:	45a0      	cmp	r8, r4
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0x2f2>
 80014b0:	e1a5      	b.n	80017fe <__aeabi_dadd+0x63e>
 80014b2:	2701      	movs	r7, #1
 80014b4:	2938      	cmp	r1, #56	@ 0x38
 80014b6:	dc13      	bgt.n	80014e0 <__aeabi_dadd+0x320>
 80014b8:	2480      	movs	r4, #128	@ 0x80
 80014ba:	0424      	lsls	r4, r4, #16
 80014bc:	4326      	orrs	r6, r4
 80014be:	291f      	cmp	r1, #31
 80014c0:	dd00      	ble.n	80014c4 <__aeabi_dadd+0x304>
 80014c2:	e1c8      	b.n	8001856 <__aeabi_dadd+0x696>
 80014c4:	2420      	movs	r4, #32
 80014c6:	0037      	movs	r7, r6
 80014c8:	4648      	mov	r0, r9
 80014ca:	1a64      	subs	r4, r4, r1
 80014cc:	40a7      	lsls	r7, r4
 80014ce:	40c8      	lsrs	r0, r1
 80014d0:	4307      	orrs	r7, r0
 80014d2:	4648      	mov	r0, r9
 80014d4:	40a0      	lsls	r0, r4
 80014d6:	40ce      	lsrs	r6, r1
 80014d8:	1e44      	subs	r4, r0, #1
 80014da:	41a0      	sbcs	r0, r4
 80014dc:	199b      	adds	r3, r3, r6
 80014de:	4307      	orrs	r7, r0
 80014e0:	18bf      	adds	r7, r7, r2
 80014e2:	4297      	cmp	r7, r2
 80014e4:	4192      	sbcs	r2, r2
 80014e6:	4252      	negs	r2, r2
 80014e8:	4644      	mov	r4, r8
 80014ea:	18d6      	adds	r6, r2, r3
 80014ec:	e763      	b.n	80013b6 <__aeabi_dadd+0x1f6>
 80014ee:	0038      	movs	r0, r7
 80014f0:	f001 fe88 	bl	8003204 <__clzsi2>
 80014f4:	0003      	movs	r3, r0
 80014f6:	3318      	adds	r3, #24
 80014f8:	2b1f      	cmp	r3, #31
 80014fa:	dc00      	bgt.n	80014fe <__aeabi_dadd+0x33e>
 80014fc:	e6bf      	b.n	800127e <__aeabi_dadd+0xbe>
 80014fe:	003a      	movs	r2, r7
 8001500:	3808      	subs	r0, #8
 8001502:	4082      	lsls	r2, r0
 8001504:	429c      	cmp	r4, r3
 8001506:	dd00      	ble.n	800150a <__aeabi_dadd+0x34a>
 8001508:	e083      	b.n	8001612 <__aeabi_dadd+0x452>
 800150a:	1b1b      	subs	r3, r3, r4
 800150c:	1c58      	adds	r0, r3, #1
 800150e:	281f      	cmp	r0, #31
 8001510:	dc00      	bgt.n	8001514 <__aeabi_dadd+0x354>
 8001512:	e1b4      	b.n	800187e <__aeabi_dadd+0x6be>
 8001514:	0017      	movs	r7, r2
 8001516:	3b1f      	subs	r3, #31
 8001518:	40df      	lsrs	r7, r3
 800151a:	2820      	cmp	r0, #32
 800151c:	d005      	beq.n	800152a <__aeabi_dadd+0x36a>
 800151e:	2340      	movs	r3, #64	@ 0x40
 8001520:	1a1b      	subs	r3, r3, r0
 8001522:	409a      	lsls	r2, r3
 8001524:	1e53      	subs	r3, r2, #1
 8001526:	419a      	sbcs	r2, r3
 8001528:	4317      	orrs	r7, r2
 800152a:	2400      	movs	r4, #0
 800152c:	2f00      	cmp	r7, #0
 800152e:	d00a      	beq.n	8001546 <__aeabi_dadd+0x386>
 8001530:	077b      	lsls	r3, r7, #29
 8001532:	d000      	beq.n	8001536 <__aeabi_dadd+0x376>
 8001534:	e6c4      	b.n	80012c0 <__aeabi_dadd+0x100>
 8001536:	0026      	movs	r6, r4
 8001538:	e79e      	b.n	8001478 <__aeabi_dadd+0x2b8>
 800153a:	464b      	mov	r3, r9
 800153c:	000c      	movs	r4, r1
 800153e:	08d8      	lsrs	r0, r3, #3
 8001540:	e79b      	b.n	800147a <__aeabi_dadd+0x2ba>
 8001542:	2700      	movs	r7, #0
 8001544:	4c01      	ldr	r4, [pc, #4]	@ (800154c <__aeabi_dadd+0x38c>)
 8001546:	2600      	movs	r6, #0
 8001548:	e783      	b.n	8001452 <__aeabi_dadd+0x292>
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	000007ff 	.word	0x000007ff
 8001550:	ff7fffff 	.word	0xff7fffff
 8001554:	000007fe 	.word	0x000007fe
 8001558:	464b      	mov	r3, r9
 800155a:	0777      	lsls	r7, r6, #29
 800155c:	08d8      	lsrs	r0, r3, #3
 800155e:	4307      	orrs	r7, r0
 8001560:	08f0      	lsrs	r0, r6, #3
 8001562:	e791      	b.n	8001488 <__aeabi_dadd+0x2c8>
 8001564:	4fcd      	ldr	r7, [pc, #820]	@ (800189c <__aeabi_dadd+0x6dc>)
 8001566:	1c61      	adds	r1, r4, #1
 8001568:	4239      	tst	r1, r7
 800156a:	d16b      	bne.n	8001644 <__aeabi_dadd+0x484>
 800156c:	0031      	movs	r1, r6
 800156e:	4648      	mov	r0, r9
 8001570:	4301      	orrs	r1, r0
 8001572:	2c00      	cmp	r4, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_dadd+0x3b8>
 8001576:	e14b      	b.n	8001810 <__aeabi_dadd+0x650>
 8001578:	001f      	movs	r7, r3
 800157a:	4317      	orrs	r7, r2
 800157c:	2900      	cmp	r1, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x3c2>
 8001580:	e181      	b.n	8001886 <__aeabi_dadd+0x6c6>
 8001582:	2f00      	cmp	r7, #0
 8001584:	d100      	bne.n	8001588 <__aeabi_dadd+0x3c8>
 8001586:	e74c      	b.n	8001422 <__aeabi_dadd+0x262>
 8001588:	444a      	add	r2, r9
 800158a:	454a      	cmp	r2, r9
 800158c:	4180      	sbcs	r0, r0
 800158e:	18f6      	adds	r6, r6, r3
 8001590:	4240      	negs	r0, r0
 8001592:	1836      	adds	r6, r6, r0
 8001594:	0233      	lsls	r3, r6, #8
 8001596:	d500      	bpl.n	800159a <__aeabi_dadd+0x3da>
 8001598:	e1b0      	b.n	80018fc <__aeabi_dadd+0x73c>
 800159a:	0017      	movs	r7, r2
 800159c:	4691      	mov	r9, r2
 800159e:	4337      	orrs	r7, r6
 80015a0:	d000      	beq.n	80015a4 <__aeabi_dadd+0x3e4>
 80015a2:	e73e      	b.n	8001422 <__aeabi_dadd+0x262>
 80015a4:	2600      	movs	r6, #0
 80015a6:	e754      	b.n	8001452 <__aeabi_dadd+0x292>
 80015a8:	4649      	mov	r1, r9
 80015aa:	1a89      	subs	r1, r1, r2
 80015ac:	4688      	mov	r8, r1
 80015ae:	45c1      	cmp	r9, r8
 80015b0:	41bf      	sbcs	r7, r7
 80015b2:	1af1      	subs	r1, r6, r3
 80015b4:	427f      	negs	r7, r7
 80015b6:	1bc9      	subs	r1, r1, r7
 80015b8:	020f      	lsls	r7, r1, #8
 80015ba:	d461      	bmi.n	8001680 <__aeabi_dadd+0x4c0>
 80015bc:	4647      	mov	r7, r8
 80015be:	430f      	orrs	r7, r1
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x404>
 80015c2:	e0bd      	b.n	8001740 <__aeabi_dadd+0x580>
 80015c4:	000e      	movs	r6, r1
 80015c6:	4647      	mov	r7, r8
 80015c8:	e651      	b.n	800126e <__aeabi_dadd+0xae>
 80015ca:	4cb5      	ldr	r4, [pc, #724]	@ (80018a0 <__aeabi_dadd+0x6e0>)
 80015cc:	45a0      	cmp	r8, r4
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dadd+0x412>
 80015d0:	e100      	b.n	80017d4 <__aeabi_dadd+0x614>
 80015d2:	2701      	movs	r7, #1
 80015d4:	2938      	cmp	r1, #56	@ 0x38
 80015d6:	dd00      	ble.n	80015da <__aeabi_dadd+0x41a>
 80015d8:	e6b8      	b.n	800134c <__aeabi_dadd+0x18c>
 80015da:	2480      	movs	r4, #128	@ 0x80
 80015dc:	0424      	lsls	r4, r4, #16
 80015de:	4326      	orrs	r6, r4
 80015e0:	e6a3      	b.n	800132a <__aeabi_dadd+0x16a>
 80015e2:	4eb0      	ldr	r6, [pc, #704]	@ (80018a4 <__aeabi_dadd+0x6e4>)
 80015e4:	1ae4      	subs	r4, r4, r3
 80015e6:	4016      	ands	r6, r2
 80015e8:	077b      	lsls	r3, r7, #29
 80015ea:	d000      	beq.n	80015ee <__aeabi_dadd+0x42e>
 80015ec:	e73f      	b.n	800146e <__aeabi_dadd+0x2ae>
 80015ee:	e743      	b.n	8001478 <__aeabi_dadd+0x2b8>
 80015f0:	000f      	movs	r7, r1
 80015f2:	0018      	movs	r0, r3
 80015f4:	3f20      	subs	r7, #32
 80015f6:	40f8      	lsrs	r0, r7
 80015f8:	4684      	mov	ip, r0
 80015fa:	2920      	cmp	r1, #32
 80015fc:	d003      	beq.n	8001606 <__aeabi_dadd+0x446>
 80015fe:	2740      	movs	r7, #64	@ 0x40
 8001600:	1a79      	subs	r1, r7, r1
 8001602:	408b      	lsls	r3, r1
 8001604:	431a      	orrs	r2, r3
 8001606:	1e53      	subs	r3, r2, #1
 8001608:	419a      	sbcs	r2, r3
 800160a:	4663      	mov	r3, ip
 800160c:	0017      	movs	r7, r2
 800160e:	431f      	orrs	r7, r3
 8001610:	e622      	b.n	8001258 <__aeabi_dadd+0x98>
 8001612:	48a4      	ldr	r0, [pc, #656]	@ (80018a4 <__aeabi_dadd+0x6e4>)
 8001614:	1ae1      	subs	r1, r4, r3
 8001616:	4010      	ands	r0, r2
 8001618:	0747      	lsls	r7, r0, #29
 800161a:	08c0      	lsrs	r0, r0, #3
 800161c:	e707      	b.n	800142e <__aeabi_dadd+0x26e>
 800161e:	0034      	movs	r4, r6
 8001620:	4648      	mov	r0, r9
 8001622:	4304      	orrs	r4, r0
 8001624:	d100      	bne.n	8001628 <__aeabi_dadd+0x468>
 8001626:	e0fa      	b.n	800181e <__aeabi_dadd+0x65e>
 8001628:	1e4c      	subs	r4, r1, #1
 800162a:	2901      	cmp	r1, #1
 800162c:	d100      	bne.n	8001630 <__aeabi_dadd+0x470>
 800162e:	e0d7      	b.n	80017e0 <__aeabi_dadd+0x620>
 8001630:	4f9b      	ldr	r7, [pc, #620]	@ (80018a0 <__aeabi_dadd+0x6e0>)
 8001632:	42b9      	cmp	r1, r7
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x478>
 8001636:	e0e2      	b.n	80017fe <__aeabi_dadd+0x63e>
 8001638:	2701      	movs	r7, #1
 800163a:	2c38      	cmp	r4, #56	@ 0x38
 800163c:	dd00      	ble.n	8001640 <__aeabi_dadd+0x480>
 800163e:	e74f      	b.n	80014e0 <__aeabi_dadd+0x320>
 8001640:	0021      	movs	r1, r4
 8001642:	e73c      	b.n	80014be <__aeabi_dadd+0x2fe>
 8001644:	4c96      	ldr	r4, [pc, #600]	@ (80018a0 <__aeabi_dadd+0x6e0>)
 8001646:	42a1      	cmp	r1, r4
 8001648:	d100      	bne.n	800164c <__aeabi_dadd+0x48c>
 800164a:	e0dd      	b.n	8001808 <__aeabi_dadd+0x648>
 800164c:	444a      	add	r2, r9
 800164e:	454a      	cmp	r2, r9
 8001650:	4180      	sbcs	r0, r0
 8001652:	18f3      	adds	r3, r6, r3
 8001654:	4240      	negs	r0, r0
 8001656:	1818      	adds	r0, r3, r0
 8001658:	07c7      	lsls	r7, r0, #31
 800165a:	0852      	lsrs	r2, r2, #1
 800165c:	4317      	orrs	r7, r2
 800165e:	0846      	lsrs	r6, r0, #1
 8001660:	0752      	lsls	r2, r2, #29
 8001662:	d005      	beq.n	8001670 <__aeabi_dadd+0x4b0>
 8001664:	220f      	movs	r2, #15
 8001666:	000c      	movs	r4, r1
 8001668:	403a      	ands	r2, r7
 800166a:	2a04      	cmp	r2, #4
 800166c:	d000      	beq.n	8001670 <__aeabi_dadd+0x4b0>
 800166e:	e62c      	b.n	80012ca <__aeabi_dadd+0x10a>
 8001670:	0776      	lsls	r6, r6, #29
 8001672:	08ff      	lsrs	r7, r7, #3
 8001674:	4337      	orrs	r7, r6
 8001676:	0900      	lsrs	r0, r0, #4
 8001678:	e6d9      	b.n	800142e <__aeabi_dadd+0x26e>
 800167a:	2700      	movs	r7, #0
 800167c:	2600      	movs	r6, #0
 800167e:	e6e8      	b.n	8001452 <__aeabi_dadd+0x292>
 8001680:	4649      	mov	r1, r9
 8001682:	1a57      	subs	r7, r2, r1
 8001684:	42ba      	cmp	r2, r7
 8001686:	4192      	sbcs	r2, r2
 8001688:	1b9e      	subs	r6, r3, r6
 800168a:	4252      	negs	r2, r2
 800168c:	4665      	mov	r5, ip
 800168e:	1ab6      	subs	r6, r6, r2
 8001690:	e5ed      	b.n	800126e <__aeabi_dadd+0xae>
 8001692:	2900      	cmp	r1, #0
 8001694:	d000      	beq.n	8001698 <__aeabi_dadd+0x4d8>
 8001696:	e0c6      	b.n	8001826 <__aeabi_dadd+0x666>
 8001698:	2f00      	cmp	r7, #0
 800169a:	d167      	bne.n	800176c <__aeabi_dadd+0x5ac>
 800169c:	2680      	movs	r6, #128	@ 0x80
 800169e:	2500      	movs	r5, #0
 80016a0:	4c7f      	ldr	r4, [pc, #508]	@ (80018a0 <__aeabi_dadd+0x6e0>)
 80016a2:	0336      	lsls	r6, r6, #12
 80016a4:	e6d5      	b.n	8001452 <__aeabi_dadd+0x292>
 80016a6:	4665      	mov	r5, ip
 80016a8:	000c      	movs	r4, r1
 80016aa:	001e      	movs	r6, r3
 80016ac:	08d0      	lsrs	r0, r2, #3
 80016ae:	e6e4      	b.n	800147a <__aeabi_dadd+0x2ba>
 80016b0:	444a      	add	r2, r9
 80016b2:	454a      	cmp	r2, r9
 80016b4:	4180      	sbcs	r0, r0
 80016b6:	18f3      	adds	r3, r6, r3
 80016b8:	4240      	negs	r0, r0
 80016ba:	1818      	adds	r0, r3, r0
 80016bc:	0011      	movs	r1, r2
 80016be:	0203      	lsls	r3, r0, #8
 80016c0:	d400      	bmi.n	80016c4 <__aeabi_dadd+0x504>
 80016c2:	e096      	b.n	80017f2 <__aeabi_dadd+0x632>
 80016c4:	4b77      	ldr	r3, [pc, #476]	@ (80018a4 <__aeabi_dadd+0x6e4>)
 80016c6:	0849      	lsrs	r1, r1, #1
 80016c8:	4018      	ands	r0, r3
 80016ca:	07c3      	lsls	r3, r0, #31
 80016cc:	430b      	orrs	r3, r1
 80016ce:	0844      	lsrs	r4, r0, #1
 80016d0:	0749      	lsls	r1, r1, #29
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dadd+0x516>
 80016d4:	e129      	b.n	800192a <__aeabi_dadd+0x76a>
 80016d6:	220f      	movs	r2, #15
 80016d8:	401a      	ands	r2, r3
 80016da:	2a04      	cmp	r2, #4
 80016dc:	d100      	bne.n	80016e0 <__aeabi_dadd+0x520>
 80016de:	e0ea      	b.n	80018b6 <__aeabi_dadd+0x6f6>
 80016e0:	1d1f      	adds	r7, r3, #4
 80016e2:	429f      	cmp	r7, r3
 80016e4:	41b6      	sbcs	r6, r6
 80016e6:	4276      	negs	r6, r6
 80016e8:	1936      	adds	r6, r6, r4
 80016ea:	2402      	movs	r4, #2
 80016ec:	e6c4      	b.n	8001478 <__aeabi_dadd+0x2b8>
 80016ee:	4649      	mov	r1, r9
 80016f0:	1a8f      	subs	r7, r1, r2
 80016f2:	45b9      	cmp	r9, r7
 80016f4:	4180      	sbcs	r0, r0
 80016f6:	1af6      	subs	r6, r6, r3
 80016f8:	4240      	negs	r0, r0
 80016fa:	1a36      	subs	r6, r6, r0
 80016fc:	0233      	lsls	r3, r6, #8
 80016fe:	d406      	bmi.n	800170e <__aeabi_dadd+0x54e>
 8001700:	0773      	lsls	r3, r6, #29
 8001702:	08ff      	lsrs	r7, r7, #3
 8001704:	2101      	movs	r1, #1
 8001706:	431f      	orrs	r7, r3
 8001708:	08f0      	lsrs	r0, r6, #3
 800170a:	e690      	b.n	800142e <__aeabi_dadd+0x26e>
 800170c:	4665      	mov	r5, ip
 800170e:	2401      	movs	r4, #1
 8001710:	e5ab      	b.n	800126a <__aeabi_dadd+0xaa>
 8001712:	464b      	mov	r3, r9
 8001714:	0777      	lsls	r7, r6, #29
 8001716:	08d8      	lsrs	r0, r3, #3
 8001718:	4307      	orrs	r7, r0
 800171a:	08f0      	lsrs	r0, r6, #3
 800171c:	e6b4      	b.n	8001488 <__aeabi_dadd+0x2c8>
 800171e:	000f      	movs	r7, r1
 8001720:	0018      	movs	r0, r3
 8001722:	3f20      	subs	r7, #32
 8001724:	40f8      	lsrs	r0, r7
 8001726:	4684      	mov	ip, r0
 8001728:	2920      	cmp	r1, #32
 800172a:	d003      	beq.n	8001734 <__aeabi_dadd+0x574>
 800172c:	2740      	movs	r7, #64	@ 0x40
 800172e:	1a79      	subs	r1, r7, r1
 8001730:	408b      	lsls	r3, r1
 8001732:	431a      	orrs	r2, r3
 8001734:	1e53      	subs	r3, r2, #1
 8001736:	419a      	sbcs	r2, r3
 8001738:	4663      	mov	r3, ip
 800173a:	0017      	movs	r7, r2
 800173c:	431f      	orrs	r7, r3
 800173e:	e635      	b.n	80013ac <__aeabi_dadd+0x1ec>
 8001740:	2500      	movs	r5, #0
 8001742:	2400      	movs	r4, #0
 8001744:	2600      	movs	r6, #0
 8001746:	e684      	b.n	8001452 <__aeabi_dadd+0x292>
 8001748:	000c      	movs	r4, r1
 800174a:	0035      	movs	r5, r6
 800174c:	3c20      	subs	r4, #32
 800174e:	40e5      	lsrs	r5, r4
 8001750:	2920      	cmp	r1, #32
 8001752:	d005      	beq.n	8001760 <__aeabi_dadd+0x5a0>
 8001754:	2440      	movs	r4, #64	@ 0x40
 8001756:	1a61      	subs	r1, r4, r1
 8001758:	408e      	lsls	r6, r1
 800175a:	4649      	mov	r1, r9
 800175c:	4331      	orrs	r1, r6
 800175e:	4689      	mov	r9, r1
 8001760:	4648      	mov	r0, r9
 8001762:	1e41      	subs	r1, r0, #1
 8001764:	4188      	sbcs	r0, r1
 8001766:	0007      	movs	r7, r0
 8001768:	432f      	orrs	r7, r5
 800176a:	e5ef      	b.n	800134c <__aeabi_dadd+0x18c>
 800176c:	08d2      	lsrs	r2, r2, #3
 800176e:	075f      	lsls	r7, r3, #29
 8001770:	4665      	mov	r5, ip
 8001772:	4317      	orrs	r7, r2
 8001774:	08d8      	lsrs	r0, r3, #3
 8001776:	e687      	b.n	8001488 <__aeabi_dadd+0x2c8>
 8001778:	1a17      	subs	r7, r2, r0
 800177a:	42ba      	cmp	r2, r7
 800177c:	4192      	sbcs	r2, r2
 800177e:	1b9e      	subs	r6, r3, r6
 8001780:	4252      	negs	r2, r2
 8001782:	1ab6      	subs	r6, r6, r2
 8001784:	0233      	lsls	r3, r6, #8
 8001786:	d4c1      	bmi.n	800170c <__aeabi_dadd+0x54c>
 8001788:	0773      	lsls	r3, r6, #29
 800178a:	08ff      	lsrs	r7, r7, #3
 800178c:	4665      	mov	r5, ip
 800178e:	2101      	movs	r1, #1
 8001790:	431f      	orrs	r7, r3
 8001792:	08f0      	lsrs	r0, r6, #3
 8001794:	e64b      	b.n	800142e <__aeabi_dadd+0x26e>
 8001796:	2f00      	cmp	r7, #0
 8001798:	d07b      	beq.n	8001892 <__aeabi_dadd+0x6d2>
 800179a:	4665      	mov	r5, ip
 800179c:	001e      	movs	r6, r3
 800179e:	4691      	mov	r9, r2
 80017a0:	e63f      	b.n	8001422 <__aeabi_dadd+0x262>
 80017a2:	1a81      	subs	r1, r0, r2
 80017a4:	4688      	mov	r8, r1
 80017a6:	45c1      	cmp	r9, r8
 80017a8:	41a4      	sbcs	r4, r4
 80017aa:	1af1      	subs	r1, r6, r3
 80017ac:	4264      	negs	r4, r4
 80017ae:	1b09      	subs	r1, r1, r4
 80017b0:	2480      	movs	r4, #128	@ 0x80
 80017b2:	0424      	lsls	r4, r4, #16
 80017b4:	4221      	tst	r1, r4
 80017b6:	d077      	beq.n	80018a8 <__aeabi_dadd+0x6e8>
 80017b8:	1a10      	subs	r0, r2, r0
 80017ba:	4282      	cmp	r2, r0
 80017bc:	4192      	sbcs	r2, r2
 80017be:	0007      	movs	r7, r0
 80017c0:	1b9e      	subs	r6, r3, r6
 80017c2:	4252      	negs	r2, r2
 80017c4:	1ab6      	subs	r6, r6, r2
 80017c6:	4337      	orrs	r7, r6
 80017c8:	d000      	beq.n	80017cc <__aeabi_dadd+0x60c>
 80017ca:	e0a0      	b.n	800190e <__aeabi_dadd+0x74e>
 80017cc:	4665      	mov	r5, ip
 80017ce:	2400      	movs	r4, #0
 80017d0:	2600      	movs	r6, #0
 80017d2:	e63e      	b.n	8001452 <__aeabi_dadd+0x292>
 80017d4:	075f      	lsls	r7, r3, #29
 80017d6:	08d2      	lsrs	r2, r2, #3
 80017d8:	4665      	mov	r5, ip
 80017da:	4317      	orrs	r7, r2
 80017dc:	08d8      	lsrs	r0, r3, #3
 80017de:	e653      	b.n	8001488 <__aeabi_dadd+0x2c8>
 80017e0:	1881      	adds	r1, r0, r2
 80017e2:	4291      	cmp	r1, r2
 80017e4:	4192      	sbcs	r2, r2
 80017e6:	18f0      	adds	r0, r6, r3
 80017e8:	4252      	negs	r2, r2
 80017ea:	1880      	adds	r0, r0, r2
 80017ec:	0203      	lsls	r3, r0, #8
 80017ee:	d500      	bpl.n	80017f2 <__aeabi_dadd+0x632>
 80017f0:	e768      	b.n	80016c4 <__aeabi_dadd+0x504>
 80017f2:	0747      	lsls	r7, r0, #29
 80017f4:	08c9      	lsrs	r1, r1, #3
 80017f6:	430f      	orrs	r7, r1
 80017f8:	08c0      	lsrs	r0, r0, #3
 80017fa:	2101      	movs	r1, #1
 80017fc:	e617      	b.n	800142e <__aeabi_dadd+0x26e>
 80017fe:	08d2      	lsrs	r2, r2, #3
 8001800:	075f      	lsls	r7, r3, #29
 8001802:	4317      	orrs	r7, r2
 8001804:	08d8      	lsrs	r0, r3, #3
 8001806:	e63f      	b.n	8001488 <__aeabi_dadd+0x2c8>
 8001808:	000c      	movs	r4, r1
 800180a:	2600      	movs	r6, #0
 800180c:	2700      	movs	r7, #0
 800180e:	e620      	b.n	8001452 <__aeabi_dadd+0x292>
 8001810:	2900      	cmp	r1, #0
 8001812:	d156      	bne.n	80018c2 <__aeabi_dadd+0x702>
 8001814:	075f      	lsls	r7, r3, #29
 8001816:	08d2      	lsrs	r2, r2, #3
 8001818:	4317      	orrs	r7, r2
 800181a:	08d8      	lsrs	r0, r3, #3
 800181c:	e634      	b.n	8001488 <__aeabi_dadd+0x2c8>
 800181e:	000c      	movs	r4, r1
 8001820:	001e      	movs	r6, r3
 8001822:	08d0      	lsrs	r0, r2, #3
 8001824:	e629      	b.n	800147a <__aeabi_dadd+0x2ba>
 8001826:	08c1      	lsrs	r1, r0, #3
 8001828:	0770      	lsls	r0, r6, #29
 800182a:	4301      	orrs	r1, r0
 800182c:	08f0      	lsrs	r0, r6, #3
 800182e:	2f00      	cmp	r7, #0
 8001830:	d062      	beq.n	80018f8 <__aeabi_dadd+0x738>
 8001832:	2480      	movs	r4, #128	@ 0x80
 8001834:	0324      	lsls	r4, r4, #12
 8001836:	4220      	tst	r0, r4
 8001838:	d007      	beq.n	800184a <__aeabi_dadd+0x68a>
 800183a:	08de      	lsrs	r6, r3, #3
 800183c:	4226      	tst	r6, r4
 800183e:	d104      	bne.n	800184a <__aeabi_dadd+0x68a>
 8001840:	4665      	mov	r5, ip
 8001842:	0030      	movs	r0, r6
 8001844:	08d1      	lsrs	r1, r2, #3
 8001846:	075b      	lsls	r3, r3, #29
 8001848:	4319      	orrs	r1, r3
 800184a:	0f4f      	lsrs	r7, r1, #29
 800184c:	00c9      	lsls	r1, r1, #3
 800184e:	08c9      	lsrs	r1, r1, #3
 8001850:	077f      	lsls	r7, r7, #29
 8001852:	430f      	orrs	r7, r1
 8001854:	e618      	b.n	8001488 <__aeabi_dadd+0x2c8>
 8001856:	000c      	movs	r4, r1
 8001858:	0030      	movs	r0, r6
 800185a:	3c20      	subs	r4, #32
 800185c:	40e0      	lsrs	r0, r4
 800185e:	4684      	mov	ip, r0
 8001860:	2920      	cmp	r1, #32
 8001862:	d005      	beq.n	8001870 <__aeabi_dadd+0x6b0>
 8001864:	2440      	movs	r4, #64	@ 0x40
 8001866:	1a61      	subs	r1, r4, r1
 8001868:	408e      	lsls	r6, r1
 800186a:	4649      	mov	r1, r9
 800186c:	4331      	orrs	r1, r6
 800186e:	4689      	mov	r9, r1
 8001870:	4648      	mov	r0, r9
 8001872:	1e41      	subs	r1, r0, #1
 8001874:	4188      	sbcs	r0, r1
 8001876:	4661      	mov	r1, ip
 8001878:	0007      	movs	r7, r0
 800187a:	430f      	orrs	r7, r1
 800187c:	e630      	b.n	80014e0 <__aeabi_dadd+0x320>
 800187e:	2120      	movs	r1, #32
 8001880:	2700      	movs	r7, #0
 8001882:	1a09      	subs	r1, r1, r0
 8001884:	e50e      	b.n	80012a4 <__aeabi_dadd+0xe4>
 8001886:	001e      	movs	r6, r3
 8001888:	2f00      	cmp	r7, #0
 800188a:	d000      	beq.n	800188e <__aeabi_dadd+0x6ce>
 800188c:	e522      	b.n	80012d4 <__aeabi_dadd+0x114>
 800188e:	2400      	movs	r4, #0
 8001890:	e758      	b.n	8001744 <__aeabi_dadd+0x584>
 8001892:	2500      	movs	r5, #0
 8001894:	2400      	movs	r4, #0
 8001896:	2600      	movs	r6, #0
 8001898:	e5db      	b.n	8001452 <__aeabi_dadd+0x292>
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	000007fe 	.word	0x000007fe
 80018a0:	000007ff 	.word	0x000007ff
 80018a4:	ff7fffff 	.word	0xff7fffff
 80018a8:	4647      	mov	r7, r8
 80018aa:	430f      	orrs	r7, r1
 80018ac:	d100      	bne.n	80018b0 <__aeabi_dadd+0x6f0>
 80018ae:	e747      	b.n	8001740 <__aeabi_dadd+0x580>
 80018b0:	000e      	movs	r6, r1
 80018b2:	46c1      	mov	r9, r8
 80018b4:	e5b5      	b.n	8001422 <__aeabi_dadd+0x262>
 80018b6:	08df      	lsrs	r7, r3, #3
 80018b8:	0764      	lsls	r4, r4, #29
 80018ba:	2102      	movs	r1, #2
 80018bc:	4327      	orrs	r7, r4
 80018be:	0900      	lsrs	r0, r0, #4
 80018c0:	e5b5      	b.n	800142e <__aeabi_dadd+0x26e>
 80018c2:	0019      	movs	r1, r3
 80018c4:	08c0      	lsrs	r0, r0, #3
 80018c6:	0777      	lsls	r7, r6, #29
 80018c8:	4307      	orrs	r7, r0
 80018ca:	4311      	orrs	r1, r2
 80018cc:	08f0      	lsrs	r0, r6, #3
 80018ce:	2900      	cmp	r1, #0
 80018d0:	d100      	bne.n	80018d4 <__aeabi_dadd+0x714>
 80018d2:	e5d9      	b.n	8001488 <__aeabi_dadd+0x2c8>
 80018d4:	2180      	movs	r1, #128	@ 0x80
 80018d6:	0309      	lsls	r1, r1, #12
 80018d8:	4208      	tst	r0, r1
 80018da:	d007      	beq.n	80018ec <__aeabi_dadd+0x72c>
 80018dc:	08dc      	lsrs	r4, r3, #3
 80018de:	420c      	tst	r4, r1
 80018e0:	d104      	bne.n	80018ec <__aeabi_dadd+0x72c>
 80018e2:	08d2      	lsrs	r2, r2, #3
 80018e4:	075b      	lsls	r3, r3, #29
 80018e6:	431a      	orrs	r2, r3
 80018e8:	0017      	movs	r7, r2
 80018ea:	0020      	movs	r0, r4
 80018ec:	0f7b      	lsrs	r3, r7, #29
 80018ee:	00ff      	lsls	r7, r7, #3
 80018f0:	08ff      	lsrs	r7, r7, #3
 80018f2:	075b      	lsls	r3, r3, #29
 80018f4:	431f      	orrs	r7, r3
 80018f6:	e5c7      	b.n	8001488 <__aeabi_dadd+0x2c8>
 80018f8:	000f      	movs	r7, r1
 80018fa:	e5c5      	b.n	8001488 <__aeabi_dadd+0x2c8>
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <__aeabi_dadd+0x788>)
 80018fe:	08d2      	lsrs	r2, r2, #3
 8001900:	4033      	ands	r3, r6
 8001902:	075f      	lsls	r7, r3, #29
 8001904:	025b      	lsls	r3, r3, #9
 8001906:	2401      	movs	r4, #1
 8001908:	4317      	orrs	r7, r2
 800190a:	0b1e      	lsrs	r6, r3, #12
 800190c:	e5a1      	b.n	8001452 <__aeabi_dadd+0x292>
 800190e:	4226      	tst	r6, r4
 8001910:	d012      	beq.n	8001938 <__aeabi_dadd+0x778>
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <__aeabi_dadd+0x788>)
 8001914:	4665      	mov	r5, ip
 8001916:	0002      	movs	r2, r0
 8001918:	2401      	movs	r4, #1
 800191a:	401e      	ands	r6, r3
 800191c:	e4e6      	b.n	80012ec <__aeabi_dadd+0x12c>
 800191e:	0021      	movs	r1, r4
 8001920:	e585      	b.n	800142e <__aeabi_dadd+0x26e>
 8001922:	0017      	movs	r7, r2
 8001924:	e5a8      	b.n	8001478 <__aeabi_dadd+0x2b8>
 8001926:	003a      	movs	r2, r7
 8001928:	e4d4      	b.n	80012d4 <__aeabi_dadd+0x114>
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	0764      	lsls	r4, r4, #29
 800192e:	431c      	orrs	r4, r3
 8001930:	0027      	movs	r7, r4
 8001932:	2102      	movs	r1, #2
 8001934:	0900      	lsrs	r0, r0, #4
 8001936:	e57a      	b.n	800142e <__aeabi_dadd+0x26e>
 8001938:	08c0      	lsrs	r0, r0, #3
 800193a:	0777      	lsls	r7, r6, #29
 800193c:	4307      	orrs	r7, r0
 800193e:	4665      	mov	r5, ip
 8001940:	2100      	movs	r1, #0
 8001942:	08f0      	lsrs	r0, r6, #3
 8001944:	e573      	b.n	800142e <__aeabi_dadd+0x26e>
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	ff7fffff 	.word	0xff7fffff

0800194c <__aeabi_ddiv>:
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	46de      	mov	lr, fp
 8001950:	4645      	mov	r5, r8
 8001952:	4657      	mov	r7, sl
 8001954:	464e      	mov	r6, r9
 8001956:	b5e0      	push	{r5, r6, r7, lr}
 8001958:	b087      	sub	sp, #28
 800195a:	9200      	str	r2, [sp, #0]
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	030b      	lsls	r3, r1, #12
 8001960:	0b1b      	lsrs	r3, r3, #12
 8001962:	469b      	mov	fp, r3
 8001964:	0fca      	lsrs	r2, r1, #31
 8001966:	004b      	lsls	r3, r1, #1
 8001968:	0004      	movs	r4, r0
 800196a:	4680      	mov	r8, r0
 800196c:	0d5b      	lsrs	r3, r3, #21
 800196e:	9202      	str	r2, [sp, #8]
 8001970:	d100      	bne.n	8001974 <__aeabi_ddiv+0x28>
 8001972:	e098      	b.n	8001aa6 <__aeabi_ddiv+0x15a>
 8001974:	4a7c      	ldr	r2, [pc, #496]	@ (8001b68 <__aeabi_ddiv+0x21c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d037      	beq.n	80019ea <__aeabi_ddiv+0x9e>
 800197a:	4659      	mov	r1, fp
 800197c:	0f42      	lsrs	r2, r0, #29
 800197e:	00c9      	lsls	r1, r1, #3
 8001980:	430a      	orrs	r2, r1
 8001982:	2180      	movs	r1, #128	@ 0x80
 8001984:	0409      	lsls	r1, r1, #16
 8001986:	4311      	orrs	r1, r2
 8001988:	00c2      	lsls	r2, r0, #3
 800198a:	4690      	mov	r8, r2
 800198c:	4a77      	ldr	r2, [pc, #476]	@ (8001b6c <__aeabi_ddiv+0x220>)
 800198e:	4689      	mov	r9, r1
 8001990:	4692      	mov	sl, r2
 8001992:	449a      	add	sl, r3
 8001994:	2300      	movs	r3, #0
 8001996:	2400      	movs	r4, #0
 8001998:	9303      	str	r3, [sp, #12]
 800199a:	9e00      	ldr	r6, [sp, #0]
 800199c:	9f01      	ldr	r7, [sp, #4]
 800199e:	033b      	lsls	r3, r7, #12
 80019a0:	0b1b      	lsrs	r3, r3, #12
 80019a2:	469b      	mov	fp, r3
 80019a4:	007b      	lsls	r3, r7, #1
 80019a6:	0030      	movs	r0, r6
 80019a8:	0d5b      	lsrs	r3, r3, #21
 80019aa:	0ffd      	lsrs	r5, r7, #31
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d059      	beq.n	8001a64 <__aeabi_ddiv+0x118>
 80019b0:	4a6d      	ldr	r2, [pc, #436]	@ (8001b68 <__aeabi_ddiv+0x21c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d048      	beq.n	8001a48 <__aeabi_ddiv+0xfc>
 80019b6:	4659      	mov	r1, fp
 80019b8:	0f72      	lsrs	r2, r6, #29
 80019ba:	00c9      	lsls	r1, r1, #3
 80019bc:	430a      	orrs	r2, r1
 80019be:	2180      	movs	r1, #128	@ 0x80
 80019c0:	0409      	lsls	r1, r1, #16
 80019c2:	4311      	orrs	r1, r2
 80019c4:	468b      	mov	fp, r1
 80019c6:	4969      	ldr	r1, [pc, #420]	@ (8001b6c <__aeabi_ddiv+0x220>)
 80019c8:	00f2      	lsls	r2, r6, #3
 80019ca:	468c      	mov	ip, r1
 80019cc:	4651      	mov	r1, sl
 80019ce:	4463      	add	r3, ip
 80019d0:	1acb      	subs	r3, r1, r3
 80019d2:	469a      	mov	sl, r3
 80019d4:	2100      	movs	r1, #0
 80019d6:	9e02      	ldr	r6, [sp, #8]
 80019d8:	406e      	eors	r6, r5
 80019da:	b2f6      	uxtb	r6, r6
 80019dc:	2c0f      	cmp	r4, #15
 80019de:	d900      	bls.n	80019e2 <__aeabi_ddiv+0x96>
 80019e0:	e0ce      	b.n	8001b80 <__aeabi_ddiv+0x234>
 80019e2:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <__aeabi_ddiv+0x224>)
 80019e4:	00a4      	lsls	r4, r4, #2
 80019e6:	591b      	ldr	r3, [r3, r4]
 80019e8:	469f      	mov	pc, r3
 80019ea:	465a      	mov	r2, fp
 80019ec:	4302      	orrs	r2, r0
 80019ee:	4691      	mov	r9, r2
 80019f0:	d000      	beq.n	80019f4 <__aeabi_ddiv+0xa8>
 80019f2:	e090      	b.n	8001b16 <__aeabi_ddiv+0x1ca>
 80019f4:	469a      	mov	sl, r3
 80019f6:	2302      	movs	r3, #2
 80019f8:	4690      	mov	r8, r2
 80019fa:	2408      	movs	r4, #8
 80019fc:	9303      	str	r3, [sp, #12]
 80019fe:	e7cc      	b.n	800199a <__aeabi_ddiv+0x4e>
 8001a00:	46cb      	mov	fp, r9
 8001a02:	4642      	mov	r2, r8
 8001a04:	9d02      	ldr	r5, [sp, #8]
 8001a06:	9903      	ldr	r1, [sp, #12]
 8001a08:	2902      	cmp	r1, #2
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_ddiv+0xc2>
 8001a0c:	e1de      	b.n	8001dcc <__aeabi_ddiv+0x480>
 8001a0e:	2903      	cmp	r1, #3
 8001a10:	d100      	bne.n	8001a14 <__aeabi_ddiv+0xc8>
 8001a12:	e08d      	b.n	8001b30 <__aeabi_ddiv+0x1e4>
 8001a14:	2901      	cmp	r1, #1
 8001a16:	d000      	beq.n	8001a1a <__aeabi_ddiv+0xce>
 8001a18:	e179      	b.n	8001d0e <__aeabi_ddiv+0x3c2>
 8001a1a:	002e      	movs	r6, r5
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2400      	movs	r4, #0
 8001a22:	4690      	mov	r8, r2
 8001a24:	051b      	lsls	r3, r3, #20
 8001a26:	4323      	orrs	r3, r4
 8001a28:	07f6      	lsls	r6, r6, #31
 8001a2a:	4333      	orrs	r3, r6
 8001a2c:	4640      	mov	r0, r8
 8001a2e:	0019      	movs	r1, r3
 8001a30:	b007      	add	sp, #28
 8001a32:	bcf0      	pop	{r4, r5, r6, r7}
 8001a34:	46bb      	mov	fp, r7
 8001a36:	46b2      	mov	sl, r6
 8001a38:	46a9      	mov	r9, r5
 8001a3a:	46a0      	mov	r8, r4
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2400      	movs	r4, #0
 8001a42:	4690      	mov	r8, r2
 8001a44:	4b48      	ldr	r3, [pc, #288]	@ (8001b68 <__aeabi_ddiv+0x21c>)
 8001a46:	e7ed      	b.n	8001a24 <__aeabi_ddiv+0xd8>
 8001a48:	465a      	mov	r2, fp
 8001a4a:	9b00      	ldr	r3, [sp, #0]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	4b49      	ldr	r3, [pc, #292]	@ (8001b74 <__aeabi_ddiv+0x228>)
 8001a50:	469c      	mov	ip, r3
 8001a52:	44e2      	add	sl, ip
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	d159      	bne.n	8001b0c <__aeabi_ddiv+0x1c0>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	431c      	orrs	r4, r3
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2102      	movs	r1, #2
 8001a60:	469b      	mov	fp, r3
 8001a62:	e7b8      	b.n	80019d6 <__aeabi_ddiv+0x8a>
 8001a64:	465a      	mov	r2, fp
 8001a66:	9b00      	ldr	r3, [sp, #0]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	d049      	beq.n	8001b00 <__aeabi_ddiv+0x1b4>
 8001a6c:	465b      	mov	r3, fp
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d100      	bne.n	8001a74 <__aeabi_ddiv+0x128>
 8001a72:	e19c      	b.n	8001dae <__aeabi_ddiv+0x462>
 8001a74:	4658      	mov	r0, fp
 8001a76:	f001 fbc5 	bl	8003204 <__clzsi2>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	3a0b      	subs	r2, #11
 8001a80:	271d      	movs	r7, #29
 8001a82:	9e00      	ldr	r6, [sp, #0]
 8001a84:	1aba      	subs	r2, r7, r2
 8001a86:	0019      	movs	r1, r3
 8001a88:	4658      	mov	r0, fp
 8001a8a:	40d6      	lsrs	r6, r2
 8001a8c:	3908      	subs	r1, #8
 8001a8e:	4088      	lsls	r0, r1
 8001a90:	0032      	movs	r2, r6
 8001a92:	4302      	orrs	r2, r0
 8001a94:	4693      	mov	fp, r2
 8001a96:	9a00      	ldr	r2, [sp, #0]
 8001a98:	408a      	lsls	r2, r1
 8001a9a:	4937      	ldr	r1, [pc, #220]	@ (8001b78 <__aeabi_ddiv+0x22c>)
 8001a9c:	4453      	add	r3, sl
 8001a9e:	468a      	mov	sl, r1
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	449a      	add	sl, r3
 8001aa4:	e797      	b.n	80019d6 <__aeabi_ddiv+0x8a>
 8001aa6:	465b      	mov	r3, fp
 8001aa8:	4303      	orrs	r3, r0
 8001aaa:	4699      	mov	r9, r3
 8001aac:	d021      	beq.n	8001af2 <__aeabi_ddiv+0x1a6>
 8001aae:	465b      	mov	r3, fp
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_ddiv+0x16a>
 8001ab4:	e169      	b.n	8001d8a <__aeabi_ddiv+0x43e>
 8001ab6:	4658      	mov	r0, fp
 8001ab8:	f001 fba4 	bl	8003204 <__clzsi2>
 8001abc:	230b      	movs	r3, #11
 8001abe:	425b      	negs	r3, r3
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	4484      	add	ip, r0
 8001ac6:	4666      	mov	r6, ip
 8001ac8:	231d      	movs	r3, #29
 8001aca:	1b9b      	subs	r3, r3, r6
 8001acc:	0026      	movs	r6, r4
 8001ace:	0011      	movs	r1, r2
 8001ad0:	4658      	mov	r0, fp
 8001ad2:	40de      	lsrs	r6, r3
 8001ad4:	3908      	subs	r1, #8
 8001ad6:	4088      	lsls	r0, r1
 8001ad8:	0033      	movs	r3, r6
 8001ada:	4303      	orrs	r3, r0
 8001adc:	4699      	mov	r9, r3
 8001ade:	0023      	movs	r3, r4
 8001ae0:	408b      	lsls	r3, r1
 8001ae2:	4698      	mov	r8, r3
 8001ae4:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <__aeabi_ddiv+0x230>)
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	469a      	mov	sl, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	9303      	str	r3, [sp, #12]
 8001af0:	e753      	b.n	800199a <__aeabi_ddiv+0x4e>
 8001af2:	2300      	movs	r3, #0
 8001af4:	4698      	mov	r8, r3
 8001af6:	469a      	mov	sl, r3
 8001af8:	3301      	adds	r3, #1
 8001afa:	2404      	movs	r4, #4
 8001afc:	9303      	str	r3, [sp, #12]
 8001afe:	e74c      	b.n	800199a <__aeabi_ddiv+0x4e>
 8001b00:	2301      	movs	r3, #1
 8001b02:	431c      	orrs	r4, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	2101      	movs	r1, #1
 8001b08:	469b      	mov	fp, r3
 8001b0a:	e764      	b.n	80019d6 <__aeabi_ddiv+0x8a>
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	0032      	movs	r2, r6
 8001b10:	2103      	movs	r1, #3
 8001b12:	431c      	orrs	r4, r3
 8001b14:	e75f      	b.n	80019d6 <__aeabi_ddiv+0x8a>
 8001b16:	469a      	mov	sl, r3
 8001b18:	2303      	movs	r3, #3
 8001b1a:	46d9      	mov	r9, fp
 8001b1c:	240c      	movs	r4, #12
 8001b1e:	9303      	str	r3, [sp, #12]
 8001b20:	e73b      	b.n	800199a <__aeabi_ddiv+0x4e>
 8001b22:	2300      	movs	r3, #0
 8001b24:	2480      	movs	r4, #128	@ 0x80
 8001b26:	4698      	mov	r8, r3
 8001b28:	2600      	movs	r6, #0
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <__aeabi_ddiv+0x21c>)
 8001b2c:	0324      	lsls	r4, r4, #12
 8001b2e:	e779      	b.n	8001a24 <__aeabi_ddiv+0xd8>
 8001b30:	2480      	movs	r4, #128	@ 0x80
 8001b32:	465b      	mov	r3, fp
 8001b34:	0324      	lsls	r4, r4, #12
 8001b36:	431c      	orrs	r4, r3
 8001b38:	0324      	lsls	r4, r4, #12
 8001b3a:	002e      	movs	r6, r5
 8001b3c:	4690      	mov	r8, r2
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <__aeabi_ddiv+0x21c>)
 8001b40:	0b24      	lsrs	r4, r4, #12
 8001b42:	e76f      	b.n	8001a24 <__aeabi_ddiv+0xd8>
 8001b44:	2480      	movs	r4, #128	@ 0x80
 8001b46:	464b      	mov	r3, r9
 8001b48:	0324      	lsls	r4, r4, #12
 8001b4a:	4223      	tst	r3, r4
 8001b4c:	d002      	beq.n	8001b54 <__aeabi_ddiv+0x208>
 8001b4e:	465b      	mov	r3, fp
 8001b50:	4223      	tst	r3, r4
 8001b52:	d0f0      	beq.n	8001b36 <__aeabi_ddiv+0x1ea>
 8001b54:	2480      	movs	r4, #128	@ 0x80
 8001b56:	464b      	mov	r3, r9
 8001b58:	0324      	lsls	r4, r4, #12
 8001b5a:	431c      	orrs	r4, r3
 8001b5c:	0324      	lsls	r4, r4, #12
 8001b5e:	9e02      	ldr	r6, [sp, #8]
 8001b60:	4b01      	ldr	r3, [pc, #4]	@ (8001b68 <__aeabi_ddiv+0x21c>)
 8001b62:	0b24      	lsrs	r4, r4, #12
 8001b64:	e75e      	b.n	8001a24 <__aeabi_ddiv+0xd8>
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	000007ff 	.word	0x000007ff
 8001b6c:	fffffc01 	.word	0xfffffc01
 8001b70:	0800ae00 	.word	0x0800ae00
 8001b74:	fffff801 	.word	0xfffff801
 8001b78:	000003f3 	.word	0x000003f3
 8001b7c:	fffffc0d 	.word	0xfffffc0d
 8001b80:	45cb      	cmp	fp, r9
 8001b82:	d200      	bcs.n	8001b86 <__aeabi_ddiv+0x23a>
 8001b84:	e0f8      	b.n	8001d78 <__aeabi_ddiv+0x42c>
 8001b86:	d100      	bne.n	8001b8a <__aeabi_ddiv+0x23e>
 8001b88:	e0f3      	b.n	8001d72 <__aeabi_ddiv+0x426>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	469c      	mov	ip, r3
 8001b90:	4644      	mov	r4, r8
 8001b92:	4648      	mov	r0, r9
 8001b94:	2500      	movs	r5, #0
 8001b96:	44e2      	add	sl, ip
 8001b98:	465b      	mov	r3, fp
 8001b9a:	0e17      	lsrs	r7, r2, #24
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	431f      	orrs	r7, r3
 8001ba0:	0c19      	lsrs	r1, r3, #16
 8001ba2:	043b      	lsls	r3, r7, #16
 8001ba4:	0212      	lsls	r2, r2, #8
 8001ba6:	9700      	str	r7, [sp, #0]
 8001ba8:	0c1f      	lsrs	r7, r3, #16
 8001baa:	4691      	mov	r9, r2
 8001bac:	9102      	str	r1, [sp, #8]
 8001bae:	9703      	str	r7, [sp, #12]
 8001bb0:	f7fe fb4a 	bl	8000248 <__aeabi_uidivmod>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	437a      	muls	r2, r7
 8001bb8:	040b      	lsls	r3, r1, #16
 8001bba:	0c21      	lsrs	r1, r4, #16
 8001bbc:	4680      	mov	r8, r0
 8001bbe:	4319      	orrs	r1, r3
 8001bc0:	428a      	cmp	r2, r1
 8001bc2:	d909      	bls.n	8001bd8 <__aeabi_ddiv+0x28c>
 8001bc4:	9f00      	ldr	r7, [sp, #0]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	46bc      	mov	ip, r7
 8001bca:	425b      	negs	r3, r3
 8001bcc:	4461      	add	r1, ip
 8001bce:	469c      	mov	ip, r3
 8001bd0:	44e0      	add	r8, ip
 8001bd2:	428f      	cmp	r7, r1
 8001bd4:	d800      	bhi.n	8001bd8 <__aeabi_ddiv+0x28c>
 8001bd6:	e15c      	b.n	8001e92 <__aeabi_ddiv+0x546>
 8001bd8:	1a88      	subs	r0, r1, r2
 8001bda:	9902      	ldr	r1, [sp, #8]
 8001bdc:	f7fe fb34 	bl	8000248 <__aeabi_uidivmod>
 8001be0:	9a03      	ldr	r2, [sp, #12]
 8001be2:	0424      	lsls	r4, r4, #16
 8001be4:	4342      	muls	r2, r0
 8001be6:	0409      	lsls	r1, r1, #16
 8001be8:	0c24      	lsrs	r4, r4, #16
 8001bea:	0003      	movs	r3, r0
 8001bec:	430c      	orrs	r4, r1
 8001bee:	42a2      	cmp	r2, r4
 8001bf0:	d906      	bls.n	8001c00 <__aeabi_ddiv+0x2b4>
 8001bf2:	9900      	ldr	r1, [sp, #0]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	468c      	mov	ip, r1
 8001bf8:	4464      	add	r4, ip
 8001bfa:	42a1      	cmp	r1, r4
 8001bfc:	d800      	bhi.n	8001c00 <__aeabi_ddiv+0x2b4>
 8001bfe:	e142      	b.n	8001e86 <__aeabi_ddiv+0x53a>
 8001c00:	1aa0      	subs	r0, r4, r2
 8001c02:	4642      	mov	r2, r8
 8001c04:	0412      	lsls	r2, r2, #16
 8001c06:	431a      	orrs	r2, r3
 8001c08:	4693      	mov	fp, r2
 8001c0a:	464b      	mov	r3, r9
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	0c1b      	lsrs	r3, r3, #16
 8001c10:	001f      	movs	r7, r3
 8001c12:	9304      	str	r3, [sp, #16]
 8001c14:	040b      	lsls	r3, r1, #16
 8001c16:	4649      	mov	r1, r9
 8001c18:	0409      	lsls	r1, r1, #16
 8001c1a:	0c09      	lsrs	r1, r1, #16
 8001c1c:	000c      	movs	r4, r1
 8001c1e:	0c1b      	lsrs	r3, r3, #16
 8001c20:	435c      	muls	r4, r3
 8001c22:	0c12      	lsrs	r2, r2, #16
 8001c24:	437b      	muls	r3, r7
 8001c26:	4688      	mov	r8, r1
 8001c28:	4351      	muls	r1, r2
 8001c2a:	437a      	muls	r2, r7
 8001c2c:	0c27      	lsrs	r7, r4, #16
 8001c2e:	46bc      	mov	ip, r7
 8001c30:	185b      	adds	r3, r3, r1
 8001c32:	4463      	add	r3, ip
 8001c34:	4299      	cmp	r1, r3
 8001c36:	d903      	bls.n	8001c40 <__aeabi_ddiv+0x2f4>
 8001c38:	2180      	movs	r1, #128	@ 0x80
 8001c3a:	0249      	lsls	r1, r1, #9
 8001c3c:	468c      	mov	ip, r1
 8001c3e:	4462      	add	r2, ip
 8001c40:	0c19      	lsrs	r1, r3, #16
 8001c42:	0424      	lsls	r4, r4, #16
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	0c24      	lsrs	r4, r4, #16
 8001c48:	188a      	adds	r2, r1, r2
 8001c4a:	191c      	adds	r4, r3, r4
 8001c4c:	4290      	cmp	r0, r2
 8001c4e:	d302      	bcc.n	8001c56 <__aeabi_ddiv+0x30a>
 8001c50:	d116      	bne.n	8001c80 <__aeabi_ddiv+0x334>
 8001c52:	42a5      	cmp	r5, r4
 8001c54:	d214      	bcs.n	8001c80 <__aeabi_ddiv+0x334>
 8001c56:	465b      	mov	r3, fp
 8001c58:	9f00      	ldr	r7, [sp, #0]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	444d      	add	r5, r9
 8001c5e:	9305      	str	r3, [sp, #20]
 8001c60:	454d      	cmp	r5, r9
 8001c62:	419b      	sbcs	r3, r3
 8001c64:	46bc      	mov	ip, r7
 8001c66:	425b      	negs	r3, r3
 8001c68:	4463      	add	r3, ip
 8001c6a:	18c0      	adds	r0, r0, r3
 8001c6c:	4287      	cmp	r7, r0
 8001c6e:	d300      	bcc.n	8001c72 <__aeabi_ddiv+0x326>
 8001c70:	e102      	b.n	8001e78 <__aeabi_ddiv+0x52c>
 8001c72:	4282      	cmp	r2, r0
 8001c74:	d900      	bls.n	8001c78 <__aeabi_ddiv+0x32c>
 8001c76:	e129      	b.n	8001ecc <__aeabi_ddiv+0x580>
 8001c78:	d100      	bne.n	8001c7c <__aeabi_ddiv+0x330>
 8001c7a:	e124      	b.n	8001ec6 <__aeabi_ddiv+0x57a>
 8001c7c:	9b05      	ldr	r3, [sp, #20]
 8001c7e:	469b      	mov	fp, r3
 8001c80:	1b2c      	subs	r4, r5, r4
 8001c82:	42a5      	cmp	r5, r4
 8001c84:	41ad      	sbcs	r5, r5
 8001c86:	9b00      	ldr	r3, [sp, #0]
 8001c88:	1a80      	subs	r0, r0, r2
 8001c8a:	426d      	negs	r5, r5
 8001c8c:	1b40      	subs	r0, r0, r5
 8001c8e:	4283      	cmp	r3, r0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_ddiv+0x348>
 8001c92:	e10f      	b.n	8001eb4 <__aeabi_ddiv+0x568>
 8001c94:	9902      	ldr	r1, [sp, #8]
 8001c96:	f7fe fad7 	bl	8000248 <__aeabi_uidivmod>
 8001c9a:	9a03      	ldr	r2, [sp, #12]
 8001c9c:	040b      	lsls	r3, r1, #16
 8001c9e:	4342      	muls	r2, r0
 8001ca0:	0c21      	lsrs	r1, r4, #16
 8001ca2:	0005      	movs	r5, r0
 8001ca4:	4319      	orrs	r1, r3
 8001ca6:	428a      	cmp	r2, r1
 8001ca8:	d900      	bls.n	8001cac <__aeabi_ddiv+0x360>
 8001caa:	e0cb      	b.n	8001e44 <__aeabi_ddiv+0x4f8>
 8001cac:	1a88      	subs	r0, r1, r2
 8001cae:	9902      	ldr	r1, [sp, #8]
 8001cb0:	f7fe faca 	bl	8000248 <__aeabi_uidivmod>
 8001cb4:	9a03      	ldr	r2, [sp, #12]
 8001cb6:	0424      	lsls	r4, r4, #16
 8001cb8:	4342      	muls	r2, r0
 8001cba:	0409      	lsls	r1, r1, #16
 8001cbc:	0c24      	lsrs	r4, r4, #16
 8001cbe:	0003      	movs	r3, r0
 8001cc0:	430c      	orrs	r4, r1
 8001cc2:	42a2      	cmp	r2, r4
 8001cc4:	d900      	bls.n	8001cc8 <__aeabi_ddiv+0x37c>
 8001cc6:	e0ca      	b.n	8001e5e <__aeabi_ddiv+0x512>
 8001cc8:	4641      	mov	r1, r8
 8001cca:	1aa4      	subs	r4, r4, r2
 8001ccc:	042a      	lsls	r2, r5, #16
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	9f04      	ldr	r7, [sp, #16]
 8001cd2:	0413      	lsls	r3, r2, #16
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	4359      	muls	r1, r3
 8001cd8:	4640      	mov	r0, r8
 8001cda:	437b      	muls	r3, r7
 8001cdc:	469c      	mov	ip, r3
 8001cde:	0c15      	lsrs	r5, r2, #16
 8001ce0:	4368      	muls	r0, r5
 8001ce2:	0c0b      	lsrs	r3, r1, #16
 8001ce4:	4484      	add	ip, r0
 8001ce6:	4463      	add	r3, ip
 8001ce8:	437d      	muls	r5, r7
 8001cea:	4298      	cmp	r0, r3
 8001cec:	d903      	bls.n	8001cf6 <__aeabi_ddiv+0x3aa>
 8001cee:	2080      	movs	r0, #128	@ 0x80
 8001cf0:	0240      	lsls	r0, r0, #9
 8001cf2:	4684      	mov	ip, r0
 8001cf4:	4465      	add	r5, ip
 8001cf6:	0c18      	lsrs	r0, r3, #16
 8001cf8:	0409      	lsls	r1, r1, #16
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	0c09      	lsrs	r1, r1, #16
 8001cfe:	1940      	adds	r0, r0, r5
 8001d00:	185b      	adds	r3, r3, r1
 8001d02:	4284      	cmp	r4, r0
 8001d04:	d327      	bcc.n	8001d56 <__aeabi_ddiv+0x40a>
 8001d06:	d023      	beq.n	8001d50 <__aeabi_ddiv+0x404>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	0035      	movs	r5, r6
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	4b94      	ldr	r3, [pc, #592]	@ (8001f60 <__aeabi_ddiv+0x614>)
 8001d10:	4453      	add	r3, sl
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	dd60      	ble.n	8001dd8 <__aeabi_ddiv+0x48c>
 8001d16:	0751      	lsls	r1, r2, #29
 8001d18:	d000      	beq.n	8001d1c <__aeabi_ddiv+0x3d0>
 8001d1a:	e086      	b.n	8001e2a <__aeabi_ddiv+0x4de>
 8001d1c:	002e      	movs	r6, r5
 8001d1e:	08d1      	lsrs	r1, r2, #3
 8001d20:	465a      	mov	r2, fp
 8001d22:	01d2      	lsls	r2, r2, #7
 8001d24:	d506      	bpl.n	8001d34 <__aeabi_ddiv+0x3e8>
 8001d26:	465a      	mov	r2, fp
 8001d28:	4b8e      	ldr	r3, [pc, #568]	@ (8001f64 <__aeabi_ddiv+0x618>)
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	4693      	mov	fp, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4453      	add	r3, sl
 8001d34:	4a8c      	ldr	r2, [pc, #560]	@ (8001f68 <__aeabi_ddiv+0x61c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	dd00      	ble.n	8001d3c <__aeabi_ddiv+0x3f0>
 8001d3a:	e680      	b.n	8001a3e <__aeabi_ddiv+0xf2>
 8001d3c:	465a      	mov	r2, fp
 8001d3e:	0752      	lsls	r2, r2, #29
 8001d40:	430a      	orrs	r2, r1
 8001d42:	4690      	mov	r8, r2
 8001d44:	465a      	mov	r2, fp
 8001d46:	055b      	lsls	r3, r3, #21
 8001d48:	0254      	lsls	r4, r2, #9
 8001d4a:	0b24      	lsrs	r4, r4, #12
 8001d4c:	0d5b      	lsrs	r3, r3, #21
 8001d4e:	e669      	b.n	8001a24 <__aeabi_ddiv+0xd8>
 8001d50:	0035      	movs	r5, r6
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0db      	beq.n	8001d0e <__aeabi_ddiv+0x3c2>
 8001d56:	9d00      	ldr	r5, [sp, #0]
 8001d58:	1e51      	subs	r1, r2, #1
 8001d5a:	46ac      	mov	ip, r5
 8001d5c:	4464      	add	r4, ip
 8001d5e:	42ac      	cmp	r4, r5
 8001d60:	d200      	bcs.n	8001d64 <__aeabi_ddiv+0x418>
 8001d62:	e09e      	b.n	8001ea2 <__aeabi_ddiv+0x556>
 8001d64:	4284      	cmp	r4, r0
 8001d66:	d200      	bcs.n	8001d6a <__aeabi_ddiv+0x41e>
 8001d68:	e0e1      	b.n	8001f2e <__aeabi_ddiv+0x5e2>
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_ddiv+0x422>
 8001d6c:	e0ee      	b.n	8001f4c <__aeabi_ddiv+0x600>
 8001d6e:	000a      	movs	r2, r1
 8001d70:	e7ca      	b.n	8001d08 <__aeabi_ddiv+0x3bc>
 8001d72:	4542      	cmp	r2, r8
 8001d74:	d900      	bls.n	8001d78 <__aeabi_ddiv+0x42c>
 8001d76:	e708      	b.n	8001b8a <__aeabi_ddiv+0x23e>
 8001d78:	464b      	mov	r3, r9
 8001d7a:	07dc      	lsls	r4, r3, #31
 8001d7c:	0858      	lsrs	r0, r3, #1
 8001d7e:	4643      	mov	r3, r8
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	431c      	orrs	r4, r3
 8001d84:	4643      	mov	r3, r8
 8001d86:	07dd      	lsls	r5, r3, #31
 8001d88:	e706      	b.n	8001b98 <__aeabi_ddiv+0x24c>
 8001d8a:	f001 fa3b 	bl	8003204 <__clzsi2>
 8001d8e:	2315      	movs	r3, #21
 8001d90:	469c      	mov	ip, r3
 8001d92:	4484      	add	ip, r0
 8001d94:	0002      	movs	r2, r0
 8001d96:	4663      	mov	r3, ip
 8001d98:	3220      	adds	r2, #32
 8001d9a:	2b1c      	cmp	r3, #28
 8001d9c:	dc00      	bgt.n	8001da0 <__aeabi_ddiv+0x454>
 8001d9e:	e692      	b.n	8001ac6 <__aeabi_ddiv+0x17a>
 8001da0:	0023      	movs	r3, r4
 8001da2:	3808      	subs	r0, #8
 8001da4:	4083      	lsls	r3, r0
 8001da6:	4699      	mov	r9, r3
 8001da8:	2300      	movs	r3, #0
 8001daa:	4698      	mov	r8, r3
 8001dac:	e69a      	b.n	8001ae4 <__aeabi_ddiv+0x198>
 8001dae:	f001 fa29 	bl	8003204 <__clzsi2>
 8001db2:	0002      	movs	r2, r0
 8001db4:	0003      	movs	r3, r0
 8001db6:	3215      	adds	r2, #21
 8001db8:	3320      	adds	r3, #32
 8001dba:	2a1c      	cmp	r2, #28
 8001dbc:	dc00      	bgt.n	8001dc0 <__aeabi_ddiv+0x474>
 8001dbe:	e65f      	b.n	8001a80 <__aeabi_ddiv+0x134>
 8001dc0:	9900      	ldr	r1, [sp, #0]
 8001dc2:	3808      	subs	r0, #8
 8001dc4:	4081      	lsls	r1, r0
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	468b      	mov	fp, r1
 8001dca:	e666      	b.n	8001a9a <__aeabi_ddiv+0x14e>
 8001dcc:	2200      	movs	r2, #0
 8001dce:	002e      	movs	r6, r5
 8001dd0:	2400      	movs	r4, #0
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	4b65      	ldr	r3, [pc, #404]	@ (8001f6c <__aeabi_ddiv+0x620>)
 8001dd6:	e625      	b.n	8001a24 <__aeabi_ddiv+0xd8>
 8001dd8:	002e      	movs	r6, r5
 8001dda:	2101      	movs	r1, #1
 8001ddc:	1ac9      	subs	r1, r1, r3
 8001dde:	2938      	cmp	r1, #56	@ 0x38
 8001de0:	dd00      	ble.n	8001de4 <__aeabi_ddiv+0x498>
 8001de2:	e61b      	b.n	8001a1c <__aeabi_ddiv+0xd0>
 8001de4:	291f      	cmp	r1, #31
 8001de6:	dc7e      	bgt.n	8001ee6 <__aeabi_ddiv+0x59a>
 8001de8:	4861      	ldr	r0, [pc, #388]	@ (8001f70 <__aeabi_ddiv+0x624>)
 8001dea:	0014      	movs	r4, r2
 8001dec:	4450      	add	r0, sl
 8001dee:	465b      	mov	r3, fp
 8001df0:	4082      	lsls	r2, r0
 8001df2:	4083      	lsls	r3, r0
 8001df4:	40cc      	lsrs	r4, r1
 8001df6:	1e50      	subs	r0, r2, #1
 8001df8:	4182      	sbcs	r2, r0
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	465b      	mov	r3, fp
 8001e00:	40cb      	lsrs	r3, r1
 8001e02:	0751      	lsls	r1, r2, #29
 8001e04:	d009      	beq.n	8001e1a <__aeabi_ddiv+0x4ce>
 8001e06:	210f      	movs	r1, #15
 8001e08:	4011      	ands	r1, r2
 8001e0a:	2904      	cmp	r1, #4
 8001e0c:	d005      	beq.n	8001e1a <__aeabi_ddiv+0x4ce>
 8001e0e:	1d11      	adds	r1, r2, #4
 8001e10:	4291      	cmp	r1, r2
 8001e12:	4192      	sbcs	r2, r2
 8001e14:	4252      	negs	r2, r2
 8001e16:	189b      	adds	r3, r3, r2
 8001e18:	000a      	movs	r2, r1
 8001e1a:	0219      	lsls	r1, r3, #8
 8001e1c:	d400      	bmi.n	8001e20 <__aeabi_ddiv+0x4d4>
 8001e1e:	e09b      	b.n	8001f58 <__aeabi_ddiv+0x60c>
 8001e20:	2200      	movs	r2, #0
 8001e22:	2301      	movs	r3, #1
 8001e24:	2400      	movs	r4, #0
 8001e26:	4690      	mov	r8, r2
 8001e28:	e5fc      	b.n	8001a24 <__aeabi_ddiv+0xd8>
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	4011      	ands	r1, r2
 8001e2e:	2904      	cmp	r1, #4
 8001e30:	d100      	bne.n	8001e34 <__aeabi_ddiv+0x4e8>
 8001e32:	e773      	b.n	8001d1c <__aeabi_ddiv+0x3d0>
 8001e34:	1d11      	adds	r1, r2, #4
 8001e36:	4291      	cmp	r1, r2
 8001e38:	4192      	sbcs	r2, r2
 8001e3a:	4252      	negs	r2, r2
 8001e3c:	002e      	movs	r6, r5
 8001e3e:	08c9      	lsrs	r1, r1, #3
 8001e40:	4493      	add	fp, r2
 8001e42:	e76d      	b.n	8001d20 <__aeabi_ddiv+0x3d4>
 8001e44:	9b00      	ldr	r3, [sp, #0]
 8001e46:	3d01      	subs	r5, #1
 8001e48:	469c      	mov	ip, r3
 8001e4a:	4461      	add	r1, ip
 8001e4c:	428b      	cmp	r3, r1
 8001e4e:	d900      	bls.n	8001e52 <__aeabi_ddiv+0x506>
 8001e50:	e72c      	b.n	8001cac <__aeabi_ddiv+0x360>
 8001e52:	428a      	cmp	r2, r1
 8001e54:	d800      	bhi.n	8001e58 <__aeabi_ddiv+0x50c>
 8001e56:	e729      	b.n	8001cac <__aeabi_ddiv+0x360>
 8001e58:	1e85      	subs	r5, r0, #2
 8001e5a:	4461      	add	r1, ip
 8001e5c:	e726      	b.n	8001cac <__aeabi_ddiv+0x360>
 8001e5e:	9900      	ldr	r1, [sp, #0]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	468c      	mov	ip, r1
 8001e64:	4464      	add	r4, ip
 8001e66:	42a1      	cmp	r1, r4
 8001e68:	d900      	bls.n	8001e6c <__aeabi_ddiv+0x520>
 8001e6a:	e72d      	b.n	8001cc8 <__aeabi_ddiv+0x37c>
 8001e6c:	42a2      	cmp	r2, r4
 8001e6e:	d800      	bhi.n	8001e72 <__aeabi_ddiv+0x526>
 8001e70:	e72a      	b.n	8001cc8 <__aeabi_ddiv+0x37c>
 8001e72:	1e83      	subs	r3, r0, #2
 8001e74:	4464      	add	r4, ip
 8001e76:	e727      	b.n	8001cc8 <__aeabi_ddiv+0x37c>
 8001e78:	4287      	cmp	r7, r0
 8001e7a:	d000      	beq.n	8001e7e <__aeabi_ddiv+0x532>
 8001e7c:	e6fe      	b.n	8001c7c <__aeabi_ddiv+0x330>
 8001e7e:	45a9      	cmp	r9, r5
 8001e80:	d900      	bls.n	8001e84 <__aeabi_ddiv+0x538>
 8001e82:	e6fb      	b.n	8001c7c <__aeabi_ddiv+0x330>
 8001e84:	e6f5      	b.n	8001c72 <__aeabi_ddiv+0x326>
 8001e86:	42a2      	cmp	r2, r4
 8001e88:	d800      	bhi.n	8001e8c <__aeabi_ddiv+0x540>
 8001e8a:	e6b9      	b.n	8001c00 <__aeabi_ddiv+0x2b4>
 8001e8c:	1e83      	subs	r3, r0, #2
 8001e8e:	4464      	add	r4, ip
 8001e90:	e6b6      	b.n	8001c00 <__aeabi_ddiv+0x2b4>
 8001e92:	428a      	cmp	r2, r1
 8001e94:	d800      	bhi.n	8001e98 <__aeabi_ddiv+0x54c>
 8001e96:	e69f      	b.n	8001bd8 <__aeabi_ddiv+0x28c>
 8001e98:	46bc      	mov	ip, r7
 8001e9a:	1e83      	subs	r3, r0, #2
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	4461      	add	r1, ip
 8001ea0:	e69a      	b.n	8001bd8 <__aeabi_ddiv+0x28c>
 8001ea2:	000a      	movs	r2, r1
 8001ea4:	4284      	cmp	r4, r0
 8001ea6:	d000      	beq.n	8001eaa <__aeabi_ddiv+0x55e>
 8001ea8:	e72e      	b.n	8001d08 <__aeabi_ddiv+0x3bc>
 8001eaa:	454b      	cmp	r3, r9
 8001eac:	d000      	beq.n	8001eb0 <__aeabi_ddiv+0x564>
 8001eae:	e72b      	b.n	8001d08 <__aeabi_ddiv+0x3bc>
 8001eb0:	0035      	movs	r5, r6
 8001eb2:	e72c      	b.n	8001d0e <__aeabi_ddiv+0x3c2>
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <__aeabi_ddiv+0x614>)
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	@ (8001f74 <__aeabi_ddiv+0x628>)
 8001eb8:	4453      	add	r3, sl
 8001eba:	4592      	cmp	sl, r2
 8001ebc:	db43      	blt.n	8001f46 <__aeabi_ddiv+0x5fa>
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4493      	add	fp, r2
 8001ec4:	e72c      	b.n	8001d20 <__aeabi_ddiv+0x3d4>
 8001ec6:	42ac      	cmp	r4, r5
 8001ec8:	d800      	bhi.n	8001ecc <__aeabi_ddiv+0x580>
 8001eca:	e6d7      	b.n	8001c7c <__aeabi_ddiv+0x330>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	425b      	negs	r3, r3
 8001ed0:	469c      	mov	ip, r3
 8001ed2:	9900      	ldr	r1, [sp, #0]
 8001ed4:	444d      	add	r5, r9
 8001ed6:	454d      	cmp	r5, r9
 8001ed8:	419b      	sbcs	r3, r3
 8001eda:	44e3      	add	fp, ip
 8001edc:	468c      	mov	ip, r1
 8001ede:	425b      	negs	r3, r3
 8001ee0:	4463      	add	r3, ip
 8001ee2:	18c0      	adds	r0, r0, r3
 8001ee4:	e6cc      	b.n	8001c80 <__aeabi_ddiv+0x334>
 8001ee6:	201f      	movs	r0, #31
 8001ee8:	4240      	negs	r0, r0
 8001eea:	1ac3      	subs	r3, r0, r3
 8001eec:	4658      	mov	r0, fp
 8001eee:	40d8      	lsrs	r0, r3
 8001ef0:	2920      	cmp	r1, #32
 8001ef2:	d004      	beq.n	8001efe <__aeabi_ddiv+0x5b2>
 8001ef4:	4659      	mov	r1, fp
 8001ef6:	4b20      	ldr	r3, [pc, #128]	@ (8001f78 <__aeabi_ddiv+0x62c>)
 8001ef8:	4453      	add	r3, sl
 8001efa:	4099      	lsls	r1, r3
 8001efc:	430a      	orrs	r2, r1
 8001efe:	1e53      	subs	r3, r2, #1
 8001f00:	419a      	sbcs	r2, r3
 8001f02:	2307      	movs	r3, #7
 8001f04:	0019      	movs	r1, r3
 8001f06:	4302      	orrs	r2, r0
 8001f08:	2400      	movs	r4, #0
 8001f0a:	4011      	ands	r1, r2
 8001f0c:	4213      	tst	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <__aeabi_ddiv+0x5d8>
 8001f10:	3308      	adds	r3, #8
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d01d      	beq.n	8001f54 <__aeabi_ddiv+0x608>
 8001f18:	1d13      	adds	r3, r2, #4
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	4189      	sbcs	r1, r1
 8001f1e:	001a      	movs	r2, r3
 8001f20:	4249      	negs	r1, r1
 8001f22:	0749      	lsls	r1, r1, #29
 8001f24:	08d2      	lsrs	r2, r2, #3
 8001f26:	430a      	orrs	r2, r1
 8001f28:	4690      	mov	r8, r2
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e57a      	b.n	8001a24 <__aeabi_ddiv+0xd8>
 8001f2e:	4649      	mov	r1, r9
 8001f30:	9f00      	ldr	r7, [sp, #0]
 8001f32:	004d      	lsls	r5, r1, #1
 8001f34:	454d      	cmp	r5, r9
 8001f36:	4189      	sbcs	r1, r1
 8001f38:	46bc      	mov	ip, r7
 8001f3a:	4249      	negs	r1, r1
 8001f3c:	4461      	add	r1, ip
 8001f3e:	46a9      	mov	r9, r5
 8001f40:	3a02      	subs	r2, #2
 8001f42:	1864      	adds	r4, r4, r1
 8001f44:	e7ae      	b.n	8001ea4 <__aeabi_ddiv+0x558>
 8001f46:	2201      	movs	r2, #1
 8001f48:	4252      	negs	r2, r2
 8001f4a:	e746      	b.n	8001dda <__aeabi_ddiv+0x48e>
 8001f4c:	4599      	cmp	r9, r3
 8001f4e:	d3ee      	bcc.n	8001f2e <__aeabi_ddiv+0x5e2>
 8001f50:	000a      	movs	r2, r1
 8001f52:	e7aa      	b.n	8001eaa <__aeabi_ddiv+0x55e>
 8001f54:	2100      	movs	r1, #0
 8001f56:	e7e5      	b.n	8001f24 <__aeabi_ddiv+0x5d8>
 8001f58:	0759      	lsls	r1, r3, #29
 8001f5a:	025b      	lsls	r3, r3, #9
 8001f5c:	0b1c      	lsrs	r4, r3, #12
 8001f5e:	e7e1      	b.n	8001f24 <__aeabi_ddiv+0x5d8>
 8001f60:	000003ff 	.word	0x000003ff
 8001f64:	feffffff 	.word	0xfeffffff
 8001f68:	000007fe 	.word	0x000007fe
 8001f6c:	000007ff 	.word	0x000007ff
 8001f70:	0000041e 	.word	0x0000041e
 8001f74:	fffffc02 	.word	0xfffffc02
 8001f78:	0000043e 	.word	0x0000043e

08001f7c <__eqdf2>:
 8001f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7e:	4657      	mov	r7, sl
 8001f80:	46de      	mov	lr, fp
 8001f82:	464e      	mov	r6, r9
 8001f84:	4645      	mov	r5, r8
 8001f86:	b5e0      	push	{r5, r6, r7, lr}
 8001f88:	000d      	movs	r5, r1
 8001f8a:	0004      	movs	r4, r0
 8001f8c:	0fe8      	lsrs	r0, r5, #31
 8001f8e:	4683      	mov	fp, r0
 8001f90:	0309      	lsls	r1, r1, #12
 8001f92:	0fd8      	lsrs	r0, r3, #31
 8001f94:	0b09      	lsrs	r1, r1, #12
 8001f96:	4682      	mov	sl, r0
 8001f98:	4819      	ldr	r0, [pc, #100]	@ (8002000 <__eqdf2+0x84>)
 8001f9a:	468c      	mov	ip, r1
 8001f9c:	031f      	lsls	r7, r3, #12
 8001f9e:	0069      	lsls	r1, r5, #1
 8001fa0:	005e      	lsls	r6, r3, #1
 8001fa2:	0d49      	lsrs	r1, r1, #21
 8001fa4:	0b3f      	lsrs	r7, r7, #12
 8001fa6:	0d76      	lsrs	r6, r6, #21
 8001fa8:	4281      	cmp	r1, r0
 8001faa:	d018      	beq.n	8001fde <__eqdf2+0x62>
 8001fac:	4286      	cmp	r6, r0
 8001fae:	d00f      	beq.n	8001fd0 <__eqdf2+0x54>
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	42b1      	cmp	r1, r6
 8001fb4:	d10d      	bne.n	8001fd2 <__eqdf2+0x56>
 8001fb6:	45bc      	cmp	ip, r7
 8001fb8:	d10b      	bne.n	8001fd2 <__eqdf2+0x56>
 8001fba:	4294      	cmp	r4, r2
 8001fbc:	d109      	bne.n	8001fd2 <__eqdf2+0x56>
 8001fbe:	45d3      	cmp	fp, sl
 8001fc0:	d01c      	beq.n	8001ffc <__eqdf2+0x80>
 8001fc2:	2900      	cmp	r1, #0
 8001fc4:	d105      	bne.n	8001fd2 <__eqdf2+0x56>
 8001fc6:	4660      	mov	r0, ip
 8001fc8:	4320      	orrs	r0, r4
 8001fca:	1e43      	subs	r3, r0, #1
 8001fcc:	4198      	sbcs	r0, r3
 8001fce:	e000      	b.n	8001fd2 <__eqdf2+0x56>
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fd4:	46bb      	mov	fp, r7
 8001fd6:	46b2      	mov	sl, r6
 8001fd8:	46a9      	mov	r9, r5
 8001fda:	46a0      	mov	r8, r4
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fde:	2001      	movs	r0, #1
 8001fe0:	428e      	cmp	r6, r1
 8001fe2:	d1f6      	bne.n	8001fd2 <__eqdf2+0x56>
 8001fe4:	4661      	mov	r1, ip
 8001fe6:	4339      	orrs	r1, r7
 8001fe8:	000f      	movs	r7, r1
 8001fea:	4317      	orrs	r7, r2
 8001fec:	4327      	orrs	r7, r4
 8001fee:	d1f0      	bne.n	8001fd2 <__eqdf2+0x56>
 8001ff0:	465b      	mov	r3, fp
 8001ff2:	4652      	mov	r2, sl
 8001ff4:	1a98      	subs	r0, r3, r2
 8001ff6:	1e43      	subs	r3, r0, #1
 8001ff8:	4198      	sbcs	r0, r3
 8001ffa:	e7ea      	b.n	8001fd2 <__eqdf2+0x56>
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	e7e8      	b.n	8001fd2 <__eqdf2+0x56>
 8002000:	000007ff 	.word	0x000007ff

08002004 <__gedf2>:
 8002004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002006:	4657      	mov	r7, sl
 8002008:	464e      	mov	r6, r9
 800200a:	4645      	mov	r5, r8
 800200c:	46de      	mov	lr, fp
 800200e:	b5e0      	push	{r5, r6, r7, lr}
 8002010:	000d      	movs	r5, r1
 8002012:	030e      	lsls	r6, r1, #12
 8002014:	0049      	lsls	r1, r1, #1
 8002016:	0d49      	lsrs	r1, r1, #21
 8002018:	468a      	mov	sl, r1
 800201a:	0fdf      	lsrs	r7, r3, #31
 800201c:	0fe9      	lsrs	r1, r5, #31
 800201e:	46bc      	mov	ip, r7
 8002020:	b083      	sub	sp, #12
 8002022:	4f2f      	ldr	r7, [pc, #188]	@ (80020e0 <__gedf2+0xdc>)
 8002024:	0004      	movs	r4, r0
 8002026:	4680      	mov	r8, r0
 8002028:	9101      	str	r1, [sp, #4]
 800202a:	0058      	lsls	r0, r3, #1
 800202c:	0319      	lsls	r1, r3, #12
 800202e:	4691      	mov	r9, r2
 8002030:	0b36      	lsrs	r6, r6, #12
 8002032:	0b09      	lsrs	r1, r1, #12
 8002034:	0d40      	lsrs	r0, r0, #21
 8002036:	45ba      	cmp	sl, r7
 8002038:	d01d      	beq.n	8002076 <__gedf2+0x72>
 800203a:	42b8      	cmp	r0, r7
 800203c:	d00d      	beq.n	800205a <__gedf2+0x56>
 800203e:	4657      	mov	r7, sl
 8002040:	2f00      	cmp	r7, #0
 8002042:	d12a      	bne.n	800209a <__gedf2+0x96>
 8002044:	4334      	orrs	r4, r6
 8002046:	2800      	cmp	r0, #0
 8002048:	d124      	bne.n	8002094 <__gedf2+0x90>
 800204a:	430a      	orrs	r2, r1
 800204c:	d036      	beq.n	80020bc <__gedf2+0xb8>
 800204e:	2c00      	cmp	r4, #0
 8002050:	d141      	bne.n	80020d6 <__gedf2+0xd2>
 8002052:	4663      	mov	r3, ip
 8002054:	0058      	lsls	r0, r3, #1
 8002056:	3801      	subs	r0, #1
 8002058:	e015      	b.n	8002086 <__gedf2+0x82>
 800205a:	4311      	orrs	r1, r2
 800205c:	d138      	bne.n	80020d0 <__gedf2+0xcc>
 800205e:	4653      	mov	r3, sl
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <__gedf2+0x64>
 8002064:	4326      	orrs	r6, r4
 8002066:	d0f4      	beq.n	8002052 <__gedf2+0x4e>
 8002068:	9b01      	ldr	r3, [sp, #4]
 800206a:	4563      	cmp	r3, ip
 800206c:	d107      	bne.n	800207e <__gedf2+0x7a>
 800206e:	9b01      	ldr	r3, [sp, #4]
 8002070:	0058      	lsls	r0, r3, #1
 8002072:	3801      	subs	r0, #1
 8002074:	e007      	b.n	8002086 <__gedf2+0x82>
 8002076:	4326      	orrs	r6, r4
 8002078:	d12a      	bne.n	80020d0 <__gedf2+0xcc>
 800207a:	4550      	cmp	r0, sl
 800207c:	d021      	beq.n	80020c2 <__gedf2+0xbe>
 800207e:	2001      	movs	r0, #1
 8002080:	9b01      	ldr	r3, [sp, #4]
 8002082:	425f      	negs	r7, r3
 8002084:	4338      	orrs	r0, r7
 8002086:	b003      	add	sp, #12
 8002088:	bcf0      	pop	{r4, r5, r6, r7}
 800208a:	46bb      	mov	fp, r7
 800208c:	46b2      	mov	sl, r6
 800208e:	46a9      	mov	r9, r5
 8002090:	46a0      	mov	r8, r4
 8002092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002094:	2c00      	cmp	r4, #0
 8002096:	d0dc      	beq.n	8002052 <__gedf2+0x4e>
 8002098:	e7e6      	b.n	8002068 <__gedf2+0x64>
 800209a:	2800      	cmp	r0, #0
 800209c:	d0ef      	beq.n	800207e <__gedf2+0x7a>
 800209e:	9b01      	ldr	r3, [sp, #4]
 80020a0:	4563      	cmp	r3, ip
 80020a2:	d1ec      	bne.n	800207e <__gedf2+0x7a>
 80020a4:	4582      	cmp	sl, r0
 80020a6:	dcea      	bgt.n	800207e <__gedf2+0x7a>
 80020a8:	dbe1      	blt.n	800206e <__gedf2+0x6a>
 80020aa:	428e      	cmp	r6, r1
 80020ac:	d8e7      	bhi.n	800207e <__gedf2+0x7a>
 80020ae:	d1de      	bne.n	800206e <__gedf2+0x6a>
 80020b0:	45c8      	cmp	r8, r9
 80020b2:	d8e4      	bhi.n	800207e <__gedf2+0x7a>
 80020b4:	2000      	movs	r0, #0
 80020b6:	45c8      	cmp	r8, r9
 80020b8:	d2e5      	bcs.n	8002086 <__gedf2+0x82>
 80020ba:	e7d8      	b.n	800206e <__gedf2+0x6a>
 80020bc:	2c00      	cmp	r4, #0
 80020be:	d0e2      	beq.n	8002086 <__gedf2+0x82>
 80020c0:	e7dd      	b.n	800207e <__gedf2+0x7a>
 80020c2:	4311      	orrs	r1, r2
 80020c4:	d104      	bne.n	80020d0 <__gedf2+0xcc>
 80020c6:	9b01      	ldr	r3, [sp, #4]
 80020c8:	4563      	cmp	r3, ip
 80020ca:	d1d8      	bne.n	800207e <__gedf2+0x7a>
 80020cc:	2000      	movs	r0, #0
 80020ce:	e7da      	b.n	8002086 <__gedf2+0x82>
 80020d0:	2002      	movs	r0, #2
 80020d2:	4240      	negs	r0, r0
 80020d4:	e7d7      	b.n	8002086 <__gedf2+0x82>
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	4563      	cmp	r3, ip
 80020da:	d0e6      	beq.n	80020aa <__gedf2+0xa6>
 80020dc:	e7cf      	b.n	800207e <__gedf2+0x7a>
 80020de:	46c0      	nop			@ (mov r8, r8)
 80020e0:	000007ff 	.word	0x000007ff

080020e4 <__ledf2>:
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	4645      	mov	r5, r8
 80020ec:	46de      	mov	lr, fp
 80020ee:	b5e0      	push	{r5, r6, r7, lr}
 80020f0:	000d      	movs	r5, r1
 80020f2:	030e      	lsls	r6, r1, #12
 80020f4:	0049      	lsls	r1, r1, #1
 80020f6:	0d49      	lsrs	r1, r1, #21
 80020f8:	468a      	mov	sl, r1
 80020fa:	0fdf      	lsrs	r7, r3, #31
 80020fc:	0fe9      	lsrs	r1, r5, #31
 80020fe:	46bc      	mov	ip, r7
 8002100:	b083      	sub	sp, #12
 8002102:	4f2e      	ldr	r7, [pc, #184]	@ (80021bc <__ledf2+0xd8>)
 8002104:	0004      	movs	r4, r0
 8002106:	4680      	mov	r8, r0
 8002108:	9101      	str	r1, [sp, #4]
 800210a:	0058      	lsls	r0, r3, #1
 800210c:	0319      	lsls	r1, r3, #12
 800210e:	4691      	mov	r9, r2
 8002110:	0b36      	lsrs	r6, r6, #12
 8002112:	0b09      	lsrs	r1, r1, #12
 8002114:	0d40      	lsrs	r0, r0, #21
 8002116:	45ba      	cmp	sl, r7
 8002118:	d01e      	beq.n	8002158 <__ledf2+0x74>
 800211a:	42b8      	cmp	r0, r7
 800211c:	d00d      	beq.n	800213a <__ledf2+0x56>
 800211e:	4657      	mov	r7, sl
 8002120:	2f00      	cmp	r7, #0
 8002122:	d127      	bne.n	8002174 <__ledf2+0x90>
 8002124:	4334      	orrs	r4, r6
 8002126:	2800      	cmp	r0, #0
 8002128:	d133      	bne.n	8002192 <__ledf2+0xae>
 800212a:	430a      	orrs	r2, r1
 800212c:	d034      	beq.n	8002198 <__ledf2+0xb4>
 800212e:	2c00      	cmp	r4, #0
 8002130:	d140      	bne.n	80021b4 <__ledf2+0xd0>
 8002132:	4663      	mov	r3, ip
 8002134:	0058      	lsls	r0, r3, #1
 8002136:	3801      	subs	r0, #1
 8002138:	e015      	b.n	8002166 <__ledf2+0x82>
 800213a:	4311      	orrs	r1, r2
 800213c:	d112      	bne.n	8002164 <__ledf2+0x80>
 800213e:	4653      	mov	r3, sl
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <__ledf2+0x64>
 8002144:	4326      	orrs	r6, r4
 8002146:	d0f4      	beq.n	8002132 <__ledf2+0x4e>
 8002148:	9b01      	ldr	r3, [sp, #4]
 800214a:	4563      	cmp	r3, ip
 800214c:	d01d      	beq.n	800218a <__ledf2+0xa6>
 800214e:	2001      	movs	r0, #1
 8002150:	9b01      	ldr	r3, [sp, #4]
 8002152:	425f      	negs	r7, r3
 8002154:	4338      	orrs	r0, r7
 8002156:	e006      	b.n	8002166 <__ledf2+0x82>
 8002158:	4326      	orrs	r6, r4
 800215a:	d103      	bne.n	8002164 <__ledf2+0x80>
 800215c:	4550      	cmp	r0, sl
 800215e:	d1f6      	bne.n	800214e <__ledf2+0x6a>
 8002160:	4311      	orrs	r1, r2
 8002162:	d01c      	beq.n	800219e <__ledf2+0xba>
 8002164:	2002      	movs	r0, #2
 8002166:	b003      	add	sp, #12
 8002168:	bcf0      	pop	{r4, r5, r6, r7}
 800216a:	46bb      	mov	fp, r7
 800216c:	46b2      	mov	sl, r6
 800216e:	46a9      	mov	r9, r5
 8002170:	46a0      	mov	r8, r4
 8002172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002174:	2800      	cmp	r0, #0
 8002176:	d0ea      	beq.n	800214e <__ledf2+0x6a>
 8002178:	9b01      	ldr	r3, [sp, #4]
 800217a:	4563      	cmp	r3, ip
 800217c:	d1e7      	bne.n	800214e <__ledf2+0x6a>
 800217e:	4582      	cmp	sl, r0
 8002180:	dce5      	bgt.n	800214e <__ledf2+0x6a>
 8002182:	db02      	blt.n	800218a <__ledf2+0xa6>
 8002184:	428e      	cmp	r6, r1
 8002186:	d8e2      	bhi.n	800214e <__ledf2+0x6a>
 8002188:	d00e      	beq.n	80021a8 <__ledf2+0xc4>
 800218a:	9b01      	ldr	r3, [sp, #4]
 800218c:	0058      	lsls	r0, r3, #1
 800218e:	3801      	subs	r0, #1
 8002190:	e7e9      	b.n	8002166 <__ledf2+0x82>
 8002192:	2c00      	cmp	r4, #0
 8002194:	d0cd      	beq.n	8002132 <__ledf2+0x4e>
 8002196:	e7d7      	b.n	8002148 <__ledf2+0x64>
 8002198:	2c00      	cmp	r4, #0
 800219a:	d0e4      	beq.n	8002166 <__ledf2+0x82>
 800219c:	e7d7      	b.n	800214e <__ledf2+0x6a>
 800219e:	9b01      	ldr	r3, [sp, #4]
 80021a0:	2000      	movs	r0, #0
 80021a2:	4563      	cmp	r3, ip
 80021a4:	d0df      	beq.n	8002166 <__ledf2+0x82>
 80021a6:	e7d2      	b.n	800214e <__ledf2+0x6a>
 80021a8:	45c8      	cmp	r8, r9
 80021aa:	d8d0      	bhi.n	800214e <__ledf2+0x6a>
 80021ac:	2000      	movs	r0, #0
 80021ae:	45c8      	cmp	r8, r9
 80021b0:	d2d9      	bcs.n	8002166 <__ledf2+0x82>
 80021b2:	e7ea      	b.n	800218a <__ledf2+0xa6>
 80021b4:	9b01      	ldr	r3, [sp, #4]
 80021b6:	4563      	cmp	r3, ip
 80021b8:	d0e4      	beq.n	8002184 <__ledf2+0xa0>
 80021ba:	e7c8      	b.n	800214e <__ledf2+0x6a>
 80021bc:	000007ff 	.word	0x000007ff

080021c0 <__aeabi_dmul>:
 80021c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c2:	4657      	mov	r7, sl
 80021c4:	464e      	mov	r6, r9
 80021c6:	46de      	mov	lr, fp
 80021c8:	4645      	mov	r5, r8
 80021ca:	b5e0      	push	{r5, r6, r7, lr}
 80021cc:	001f      	movs	r7, r3
 80021ce:	030b      	lsls	r3, r1, #12
 80021d0:	0b1b      	lsrs	r3, r3, #12
 80021d2:	0016      	movs	r6, r2
 80021d4:	469a      	mov	sl, r3
 80021d6:	0fca      	lsrs	r2, r1, #31
 80021d8:	004b      	lsls	r3, r1, #1
 80021da:	0004      	movs	r4, r0
 80021dc:	4691      	mov	r9, r2
 80021de:	b085      	sub	sp, #20
 80021e0:	0d5b      	lsrs	r3, r3, #21
 80021e2:	d100      	bne.n	80021e6 <__aeabi_dmul+0x26>
 80021e4:	e1cf      	b.n	8002586 <__aeabi_dmul+0x3c6>
 80021e6:	4acd      	ldr	r2, [pc, #820]	@ (800251c <__aeabi_dmul+0x35c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d055      	beq.n	8002298 <__aeabi_dmul+0xd8>
 80021ec:	4651      	mov	r1, sl
 80021ee:	0f42      	lsrs	r2, r0, #29
 80021f0:	00c9      	lsls	r1, r1, #3
 80021f2:	430a      	orrs	r2, r1
 80021f4:	2180      	movs	r1, #128	@ 0x80
 80021f6:	0409      	lsls	r1, r1, #16
 80021f8:	4311      	orrs	r1, r2
 80021fa:	00c2      	lsls	r2, r0, #3
 80021fc:	4690      	mov	r8, r2
 80021fe:	4ac8      	ldr	r2, [pc, #800]	@ (8002520 <__aeabi_dmul+0x360>)
 8002200:	468a      	mov	sl, r1
 8002202:	4693      	mov	fp, r2
 8002204:	449b      	add	fp, r3
 8002206:	2300      	movs	r3, #0
 8002208:	2500      	movs	r5, #0
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	033c      	lsls	r4, r7, #12
 800220e:	007b      	lsls	r3, r7, #1
 8002210:	0ffa      	lsrs	r2, r7, #31
 8002212:	9601      	str	r6, [sp, #4]
 8002214:	0b24      	lsrs	r4, r4, #12
 8002216:	0d5b      	lsrs	r3, r3, #21
 8002218:	9200      	str	r2, [sp, #0]
 800221a:	d100      	bne.n	800221e <__aeabi_dmul+0x5e>
 800221c:	e188      	b.n	8002530 <__aeabi_dmul+0x370>
 800221e:	4abf      	ldr	r2, [pc, #764]	@ (800251c <__aeabi_dmul+0x35c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d100      	bne.n	8002226 <__aeabi_dmul+0x66>
 8002224:	e092      	b.n	800234c <__aeabi_dmul+0x18c>
 8002226:	4abe      	ldr	r2, [pc, #760]	@ (8002520 <__aeabi_dmul+0x360>)
 8002228:	4694      	mov	ip, r2
 800222a:	4463      	add	r3, ip
 800222c:	449b      	add	fp, r3
 800222e:	2d0a      	cmp	r5, #10
 8002230:	dc42      	bgt.n	80022b8 <__aeabi_dmul+0xf8>
 8002232:	00e4      	lsls	r4, r4, #3
 8002234:	0f73      	lsrs	r3, r6, #29
 8002236:	4323      	orrs	r3, r4
 8002238:	2480      	movs	r4, #128	@ 0x80
 800223a:	4649      	mov	r1, r9
 800223c:	0424      	lsls	r4, r4, #16
 800223e:	431c      	orrs	r4, r3
 8002240:	00f3      	lsls	r3, r6, #3
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	9b00      	ldr	r3, [sp, #0]
 8002246:	2000      	movs	r0, #0
 8002248:	4059      	eors	r1, r3
 800224a:	b2cb      	uxtb	r3, r1
 800224c:	9303      	str	r3, [sp, #12]
 800224e:	2d02      	cmp	r5, #2
 8002250:	dc00      	bgt.n	8002254 <__aeabi_dmul+0x94>
 8002252:	e094      	b.n	800237e <__aeabi_dmul+0x1be>
 8002254:	2301      	movs	r3, #1
 8002256:	40ab      	lsls	r3, r5
 8002258:	001d      	movs	r5, r3
 800225a:	23a6      	movs	r3, #166	@ 0xa6
 800225c:	002a      	movs	r2, r5
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	401a      	ands	r2, r3
 8002262:	421d      	tst	r5, r3
 8002264:	d000      	beq.n	8002268 <__aeabi_dmul+0xa8>
 8002266:	e229      	b.n	80026bc <__aeabi_dmul+0x4fc>
 8002268:	2390      	movs	r3, #144	@ 0x90
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	421d      	tst	r5, r3
 800226e:	d100      	bne.n	8002272 <__aeabi_dmul+0xb2>
 8002270:	e24d      	b.n	800270e <__aeabi_dmul+0x54e>
 8002272:	2300      	movs	r3, #0
 8002274:	2480      	movs	r4, #128	@ 0x80
 8002276:	4699      	mov	r9, r3
 8002278:	0324      	lsls	r4, r4, #12
 800227a:	4ba8      	ldr	r3, [pc, #672]	@ (800251c <__aeabi_dmul+0x35c>)
 800227c:	0010      	movs	r0, r2
 800227e:	464a      	mov	r2, r9
 8002280:	051b      	lsls	r3, r3, #20
 8002282:	4323      	orrs	r3, r4
 8002284:	07d2      	lsls	r2, r2, #31
 8002286:	4313      	orrs	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	b005      	add	sp, #20
 800228c:	bcf0      	pop	{r4, r5, r6, r7}
 800228e:	46bb      	mov	fp, r7
 8002290:	46b2      	mov	sl, r6
 8002292:	46a9      	mov	r9, r5
 8002294:	46a0      	mov	r8, r4
 8002296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002298:	4652      	mov	r2, sl
 800229a:	4302      	orrs	r2, r0
 800229c:	4690      	mov	r8, r2
 800229e:	d000      	beq.n	80022a2 <__aeabi_dmul+0xe2>
 80022a0:	e1ac      	b.n	80025fc <__aeabi_dmul+0x43c>
 80022a2:	469b      	mov	fp, r3
 80022a4:	2302      	movs	r3, #2
 80022a6:	4692      	mov	sl, r2
 80022a8:	2508      	movs	r5, #8
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	e7ae      	b.n	800220c <__aeabi_dmul+0x4c>
 80022ae:	9b00      	ldr	r3, [sp, #0]
 80022b0:	46a2      	mov	sl, r4
 80022b2:	4699      	mov	r9, r3
 80022b4:	9b01      	ldr	r3, [sp, #4]
 80022b6:	4698      	mov	r8, r3
 80022b8:	9b02      	ldr	r3, [sp, #8]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dmul+0x100>
 80022be:	e1ca      	b.n	8002656 <__aeabi_dmul+0x496>
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dmul+0x106>
 80022c4:	e192      	b.n	80025ec <__aeabi_dmul+0x42c>
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d110      	bne.n	80022ec <__aeabi_dmul+0x12c>
 80022ca:	2300      	movs	r3, #0
 80022cc:	2400      	movs	r4, #0
 80022ce:	2200      	movs	r2, #0
 80022d0:	e7d4      	b.n	800227c <__aeabi_dmul+0xbc>
 80022d2:	2201      	movs	r2, #1
 80022d4:	087b      	lsrs	r3, r7, #1
 80022d6:	403a      	ands	r2, r7
 80022d8:	4313      	orrs	r3, r2
 80022da:	4652      	mov	r2, sl
 80022dc:	07d2      	lsls	r2, r2, #31
 80022de:	4313      	orrs	r3, r2
 80022e0:	4698      	mov	r8, r3
 80022e2:	4653      	mov	r3, sl
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	469a      	mov	sl, r3
 80022e8:	9b03      	ldr	r3, [sp, #12]
 80022ea:	4699      	mov	r9, r3
 80022ec:	465b      	mov	r3, fp
 80022ee:	1c58      	adds	r0, r3, #1
 80022f0:	2380      	movs	r3, #128	@ 0x80
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	445b      	add	r3, fp
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	dc00      	bgt.n	80022fc <__aeabi_dmul+0x13c>
 80022fa:	e1b1      	b.n	8002660 <__aeabi_dmul+0x4a0>
 80022fc:	4642      	mov	r2, r8
 80022fe:	0752      	lsls	r2, r2, #29
 8002300:	d00b      	beq.n	800231a <__aeabi_dmul+0x15a>
 8002302:	220f      	movs	r2, #15
 8002304:	4641      	mov	r1, r8
 8002306:	400a      	ands	r2, r1
 8002308:	2a04      	cmp	r2, #4
 800230a:	d006      	beq.n	800231a <__aeabi_dmul+0x15a>
 800230c:	4642      	mov	r2, r8
 800230e:	1d11      	adds	r1, r2, #4
 8002310:	4541      	cmp	r1, r8
 8002312:	4192      	sbcs	r2, r2
 8002314:	4688      	mov	r8, r1
 8002316:	4252      	negs	r2, r2
 8002318:	4492      	add	sl, r2
 800231a:	4652      	mov	r2, sl
 800231c:	01d2      	lsls	r2, r2, #7
 800231e:	d506      	bpl.n	800232e <__aeabi_dmul+0x16e>
 8002320:	4652      	mov	r2, sl
 8002322:	4b80      	ldr	r3, [pc, #512]	@ (8002524 <__aeabi_dmul+0x364>)
 8002324:	401a      	ands	r2, r3
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	4692      	mov	sl, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	18c3      	adds	r3, r0, r3
 800232e:	4a7e      	ldr	r2, [pc, #504]	@ (8002528 <__aeabi_dmul+0x368>)
 8002330:	4293      	cmp	r3, r2
 8002332:	dd00      	ble.n	8002336 <__aeabi_dmul+0x176>
 8002334:	e18f      	b.n	8002656 <__aeabi_dmul+0x496>
 8002336:	4642      	mov	r2, r8
 8002338:	08d1      	lsrs	r1, r2, #3
 800233a:	4652      	mov	r2, sl
 800233c:	0752      	lsls	r2, r2, #29
 800233e:	430a      	orrs	r2, r1
 8002340:	4651      	mov	r1, sl
 8002342:	055b      	lsls	r3, r3, #21
 8002344:	024c      	lsls	r4, r1, #9
 8002346:	0b24      	lsrs	r4, r4, #12
 8002348:	0d5b      	lsrs	r3, r3, #21
 800234a:	e797      	b.n	800227c <__aeabi_dmul+0xbc>
 800234c:	4b73      	ldr	r3, [pc, #460]	@ (800251c <__aeabi_dmul+0x35c>)
 800234e:	4326      	orrs	r6, r4
 8002350:	469c      	mov	ip, r3
 8002352:	44e3      	add	fp, ip
 8002354:	2e00      	cmp	r6, #0
 8002356:	d100      	bne.n	800235a <__aeabi_dmul+0x19a>
 8002358:	e16f      	b.n	800263a <__aeabi_dmul+0x47a>
 800235a:	2303      	movs	r3, #3
 800235c:	4649      	mov	r1, r9
 800235e:	431d      	orrs	r5, r3
 8002360:	9b00      	ldr	r3, [sp, #0]
 8002362:	4059      	eors	r1, r3
 8002364:	b2cb      	uxtb	r3, r1
 8002366:	9303      	str	r3, [sp, #12]
 8002368:	2d0a      	cmp	r5, #10
 800236a:	dd00      	ble.n	800236e <__aeabi_dmul+0x1ae>
 800236c:	e133      	b.n	80025d6 <__aeabi_dmul+0x416>
 800236e:	2301      	movs	r3, #1
 8002370:	40ab      	lsls	r3, r5
 8002372:	001d      	movs	r5, r3
 8002374:	2303      	movs	r3, #3
 8002376:	9302      	str	r3, [sp, #8]
 8002378:	2288      	movs	r2, #136	@ 0x88
 800237a:	422a      	tst	r2, r5
 800237c:	d197      	bne.n	80022ae <__aeabi_dmul+0xee>
 800237e:	4642      	mov	r2, r8
 8002380:	4643      	mov	r3, r8
 8002382:	0412      	lsls	r2, r2, #16
 8002384:	0c12      	lsrs	r2, r2, #16
 8002386:	0016      	movs	r6, r2
 8002388:	9801      	ldr	r0, [sp, #4]
 800238a:	0c1d      	lsrs	r5, r3, #16
 800238c:	0c03      	lsrs	r3, r0, #16
 800238e:	0400      	lsls	r0, r0, #16
 8002390:	0c00      	lsrs	r0, r0, #16
 8002392:	4346      	muls	r6, r0
 8002394:	46b4      	mov	ip, r6
 8002396:	001e      	movs	r6, r3
 8002398:	436e      	muls	r6, r5
 800239a:	9600      	str	r6, [sp, #0]
 800239c:	0016      	movs	r6, r2
 800239e:	0007      	movs	r7, r0
 80023a0:	435e      	muls	r6, r3
 80023a2:	4661      	mov	r1, ip
 80023a4:	46b0      	mov	r8, r6
 80023a6:	436f      	muls	r7, r5
 80023a8:	0c0e      	lsrs	r6, r1, #16
 80023aa:	44b8      	add	r8, r7
 80023ac:	4446      	add	r6, r8
 80023ae:	42b7      	cmp	r7, r6
 80023b0:	d905      	bls.n	80023be <__aeabi_dmul+0x1fe>
 80023b2:	2180      	movs	r1, #128	@ 0x80
 80023b4:	0249      	lsls	r1, r1, #9
 80023b6:	4688      	mov	r8, r1
 80023b8:	9f00      	ldr	r7, [sp, #0]
 80023ba:	4447      	add	r7, r8
 80023bc:	9700      	str	r7, [sp, #0]
 80023be:	4661      	mov	r1, ip
 80023c0:	0409      	lsls	r1, r1, #16
 80023c2:	0c09      	lsrs	r1, r1, #16
 80023c4:	0c37      	lsrs	r7, r6, #16
 80023c6:	0436      	lsls	r6, r6, #16
 80023c8:	468c      	mov	ip, r1
 80023ca:	0031      	movs	r1, r6
 80023cc:	4461      	add	r1, ip
 80023ce:	9101      	str	r1, [sp, #4]
 80023d0:	0011      	movs	r1, r2
 80023d2:	0c26      	lsrs	r6, r4, #16
 80023d4:	0424      	lsls	r4, r4, #16
 80023d6:	0c24      	lsrs	r4, r4, #16
 80023d8:	4361      	muls	r1, r4
 80023da:	468c      	mov	ip, r1
 80023dc:	0021      	movs	r1, r4
 80023de:	4369      	muls	r1, r5
 80023e0:	4689      	mov	r9, r1
 80023e2:	4661      	mov	r1, ip
 80023e4:	0c09      	lsrs	r1, r1, #16
 80023e6:	4688      	mov	r8, r1
 80023e8:	4372      	muls	r2, r6
 80023ea:	444a      	add	r2, r9
 80023ec:	4442      	add	r2, r8
 80023ee:	4375      	muls	r5, r6
 80023f0:	4591      	cmp	r9, r2
 80023f2:	d903      	bls.n	80023fc <__aeabi_dmul+0x23c>
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	0249      	lsls	r1, r1, #9
 80023f8:	4688      	mov	r8, r1
 80023fa:	4445      	add	r5, r8
 80023fc:	0c11      	lsrs	r1, r2, #16
 80023fe:	4688      	mov	r8, r1
 8002400:	4661      	mov	r1, ip
 8002402:	0409      	lsls	r1, r1, #16
 8002404:	0c09      	lsrs	r1, r1, #16
 8002406:	468c      	mov	ip, r1
 8002408:	0412      	lsls	r2, r2, #16
 800240a:	4462      	add	r2, ip
 800240c:	18b9      	adds	r1, r7, r2
 800240e:	9102      	str	r1, [sp, #8]
 8002410:	4651      	mov	r1, sl
 8002412:	0c09      	lsrs	r1, r1, #16
 8002414:	468c      	mov	ip, r1
 8002416:	4651      	mov	r1, sl
 8002418:	040f      	lsls	r7, r1, #16
 800241a:	0c3f      	lsrs	r7, r7, #16
 800241c:	0039      	movs	r1, r7
 800241e:	4341      	muls	r1, r0
 8002420:	4445      	add	r5, r8
 8002422:	4688      	mov	r8, r1
 8002424:	4661      	mov	r1, ip
 8002426:	4341      	muls	r1, r0
 8002428:	468a      	mov	sl, r1
 800242a:	4641      	mov	r1, r8
 800242c:	4660      	mov	r0, ip
 800242e:	0c09      	lsrs	r1, r1, #16
 8002430:	4689      	mov	r9, r1
 8002432:	4358      	muls	r0, r3
 8002434:	437b      	muls	r3, r7
 8002436:	4453      	add	r3, sl
 8002438:	444b      	add	r3, r9
 800243a:	459a      	cmp	sl, r3
 800243c:	d903      	bls.n	8002446 <__aeabi_dmul+0x286>
 800243e:	2180      	movs	r1, #128	@ 0x80
 8002440:	0249      	lsls	r1, r1, #9
 8002442:	4689      	mov	r9, r1
 8002444:	4448      	add	r0, r9
 8002446:	0c19      	lsrs	r1, r3, #16
 8002448:	4689      	mov	r9, r1
 800244a:	4641      	mov	r1, r8
 800244c:	0409      	lsls	r1, r1, #16
 800244e:	0c09      	lsrs	r1, r1, #16
 8002450:	4688      	mov	r8, r1
 8002452:	0039      	movs	r1, r7
 8002454:	4361      	muls	r1, r4
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	4443      	add	r3, r8
 800245a:	4688      	mov	r8, r1
 800245c:	4661      	mov	r1, ip
 800245e:	434c      	muls	r4, r1
 8002460:	4371      	muls	r1, r6
 8002462:	468c      	mov	ip, r1
 8002464:	4641      	mov	r1, r8
 8002466:	4377      	muls	r7, r6
 8002468:	0c0e      	lsrs	r6, r1, #16
 800246a:	193f      	adds	r7, r7, r4
 800246c:	19f6      	adds	r6, r6, r7
 800246e:	4448      	add	r0, r9
 8002470:	42b4      	cmp	r4, r6
 8002472:	d903      	bls.n	800247c <__aeabi_dmul+0x2bc>
 8002474:	2180      	movs	r1, #128	@ 0x80
 8002476:	0249      	lsls	r1, r1, #9
 8002478:	4689      	mov	r9, r1
 800247a:	44cc      	add	ip, r9
 800247c:	9902      	ldr	r1, [sp, #8]
 800247e:	9f00      	ldr	r7, [sp, #0]
 8002480:	4689      	mov	r9, r1
 8002482:	0431      	lsls	r1, r6, #16
 8002484:	444f      	add	r7, r9
 8002486:	4689      	mov	r9, r1
 8002488:	4641      	mov	r1, r8
 800248a:	4297      	cmp	r7, r2
 800248c:	4192      	sbcs	r2, r2
 800248e:	040c      	lsls	r4, r1, #16
 8002490:	0c24      	lsrs	r4, r4, #16
 8002492:	444c      	add	r4, r9
 8002494:	18ff      	adds	r7, r7, r3
 8002496:	4252      	negs	r2, r2
 8002498:	1964      	adds	r4, r4, r5
 800249a:	18a1      	adds	r1, r4, r2
 800249c:	429f      	cmp	r7, r3
 800249e:	419b      	sbcs	r3, r3
 80024a0:	4688      	mov	r8, r1
 80024a2:	4682      	mov	sl, r0
 80024a4:	425b      	negs	r3, r3
 80024a6:	4699      	mov	r9, r3
 80024a8:	4590      	cmp	r8, r2
 80024aa:	4192      	sbcs	r2, r2
 80024ac:	42ac      	cmp	r4, r5
 80024ae:	41a4      	sbcs	r4, r4
 80024b0:	44c2      	add	sl, r8
 80024b2:	44d1      	add	r9, sl
 80024b4:	4252      	negs	r2, r2
 80024b6:	4264      	negs	r4, r4
 80024b8:	4314      	orrs	r4, r2
 80024ba:	4599      	cmp	r9, r3
 80024bc:	419b      	sbcs	r3, r3
 80024be:	4582      	cmp	sl, r0
 80024c0:	4192      	sbcs	r2, r2
 80024c2:	425b      	negs	r3, r3
 80024c4:	4252      	negs	r2, r2
 80024c6:	4313      	orrs	r3, r2
 80024c8:	464a      	mov	r2, r9
 80024ca:	0c36      	lsrs	r6, r6, #16
 80024cc:	19a4      	adds	r4, r4, r6
 80024ce:	18e3      	adds	r3, r4, r3
 80024d0:	4463      	add	r3, ip
 80024d2:	025b      	lsls	r3, r3, #9
 80024d4:	0dd2      	lsrs	r2, r2, #23
 80024d6:	431a      	orrs	r2, r3
 80024d8:	9901      	ldr	r1, [sp, #4]
 80024da:	4692      	mov	sl, r2
 80024dc:	027a      	lsls	r2, r7, #9
 80024de:	430a      	orrs	r2, r1
 80024e0:	1e50      	subs	r0, r2, #1
 80024e2:	4182      	sbcs	r2, r0
 80024e4:	0dff      	lsrs	r7, r7, #23
 80024e6:	4317      	orrs	r7, r2
 80024e8:	464a      	mov	r2, r9
 80024ea:	0252      	lsls	r2, r2, #9
 80024ec:	4317      	orrs	r7, r2
 80024ee:	46b8      	mov	r8, r7
 80024f0:	01db      	lsls	r3, r3, #7
 80024f2:	d500      	bpl.n	80024f6 <__aeabi_dmul+0x336>
 80024f4:	e6ed      	b.n	80022d2 <__aeabi_dmul+0x112>
 80024f6:	4b0d      	ldr	r3, [pc, #52]	@ (800252c <__aeabi_dmul+0x36c>)
 80024f8:	9a03      	ldr	r2, [sp, #12]
 80024fa:	445b      	add	r3, fp
 80024fc:	4691      	mov	r9, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	dc00      	bgt.n	8002504 <__aeabi_dmul+0x344>
 8002502:	e0ac      	b.n	800265e <__aeabi_dmul+0x49e>
 8002504:	003a      	movs	r2, r7
 8002506:	0752      	lsls	r2, r2, #29
 8002508:	d100      	bne.n	800250c <__aeabi_dmul+0x34c>
 800250a:	e710      	b.n	800232e <__aeabi_dmul+0x16e>
 800250c:	220f      	movs	r2, #15
 800250e:	4658      	mov	r0, fp
 8002510:	403a      	ands	r2, r7
 8002512:	2a04      	cmp	r2, #4
 8002514:	d000      	beq.n	8002518 <__aeabi_dmul+0x358>
 8002516:	e6f9      	b.n	800230c <__aeabi_dmul+0x14c>
 8002518:	e709      	b.n	800232e <__aeabi_dmul+0x16e>
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	000007ff 	.word	0x000007ff
 8002520:	fffffc01 	.word	0xfffffc01
 8002524:	feffffff 	.word	0xfeffffff
 8002528:	000007fe 	.word	0x000007fe
 800252c:	000003ff 	.word	0x000003ff
 8002530:	0022      	movs	r2, r4
 8002532:	4332      	orrs	r2, r6
 8002534:	d06f      	beq.n	8002616 <__aeabi_dmul+0x456>
 8002536:	2c00      	cmp	r4, #0
 8002538:	d100      	bne.n	800253c <__aeabi_dmul+0x37c>
 800253a:	e0c2      	b.n	80026c2 <__aeabi_dmul+0x502>
 800253c:	0020      	movs	r0, r4
 800253e:	f000 fe61 	bl	8003204 <__clzsi2>
 8002542:	0002      	movs	r2, r0
 8002544:	0003      	movs	r3, r0
 8002546:	3a0b      	subs	r2, #11
 8002548:	201d      	movs	r0, #29
 800254a:	1a82      	subs	r2, r0, r2
 800254c:	0030      	movs	r0, r6
 800254e:	0019      	movs	r1, r3
 8002550:	40d0      	lsrs	r0, r2
 8002552:	3908      	subs	r1, #8
 8002554:	408c      	lsls	r4, r1
 8002556:	0002      	movs	r2, r0
 8002558:	4322      	orrs	r2, r4
 800255a:	0034      	movs	r4, r6
 800255c:	408c      	lsls	r4, r1
 800255e:	4659      	mov	r1, fp
 8002560:	1acb      	subs	r3, r1, r3
 8002562:	4986      	ldr	r1, [pc, #536]	@ (800277c <__aeabi_dmul+0x5bc>)
 8002564:	468b      	mov	fp, r1
 8002566:	449b      	add	fp, r3
 8002568:	2d0a      	cmp	r5, #10
 800256a:	dd00      	ble.n	800256e <__aeabi_dmul+0x3ae>
 800256c:	e6a4      	b.n	80022b8 <__aeabi_dmul+0xf8>
 800256e:	4649      	mov	r1, r9
 8002570:	9b00      	ldr	r3, [sp, #0]
 8002572:	9401      	str	r4, [sp, #4]
 8002574:	4059      	eors	r1, r3
 8002576:	b2cb      	uxtb	r3, r1
 8002578:	0014      	movs	r4, r2
 800257a:	2000      	movs	r0, #0
 800257c:	9303      	str	r3, [sp, #12]
 800257e:	2d02      	cmp	r5, #2
 8002580:	dd00      	ble.n	8002584 <__aeabi_dmul+0x3c4>
 8002582:	e667      	b.n	8002254 <__aeabi_dmul+0x94>
 8002584:	e6fb      	b.n	800237e <__aeabi_dmul+0x1be>
 8002586:	4653      	mov	r3, sl
 8002588:	4303      	orrs	r3, r0
 800258a:	4698      	mov	r8, r3
 800258c:	d03c      	beq.n	8002608 <__aeabi_dmul+0x448>
 800258e:	4653      	mov	r3, sl
 8002590:	2b00      	cmp	r3, #0
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x3d6>
 8002594:	e0a3      	b.n	80026de <__aeabi_dmul+0x51e>
 8002596:	4650      	mov	r0, sl
 8002598:	f000 fe34 	bl	8003204 <__clzsi2>
 800259c:	230b      	movs	r3, #11
 800259e:	425b      	negs	r3, r3
 80025a0:	469c      	mov	ip, r3
 80025a2:	0002      	movs	r2, r0
 80025a4:	4484      	add	ip, r0
 80025a6:	0011      	movs	r1, r2
 80025a8:	4650      	mov	r0, sl
 80025aa:	3908      	subs	r1, #8
 80025ac:	4088      	lsls	r0, r1
 80025ae:	231d      	movs	r3, #29
 80025b0:	4680      	mov	r8, r0
 80025b2:	4660      	mov	r0, ip
 80025b4:	1a1b      	subs	r3, r3, r0
 80025b6:	0020      	movs	r0, r4
 80025b8:	40d8      	lsrs	r0, r3
 80025ba:	0003      	movs	r3, r0
 80025bc:	4640      	mov	r0, r8
 80025be:	4303      	orrs	r3, r0
 80025c0:	469a      	mov	sl, r3
 80025c2:	0023      	movs	r3, r4
 80025c4:	408b      	lsls	r3, r1
 80025c6:	4698      	mov	r8, r3
 80025c8:	4b6c      	ldr	r3, [pc, #432]	@ (800277c <__aeabi_dmul+0x5bc>)
 80025ca:	2500      	movs	r5, #0
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	469b      	mov	fp, r3
 80025d0:	2300      	movs	r3, #0
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	e61a      	b.n	800220c <__aeabi_dmul+0x4c>
 80025d6:	2d0f      	cmp	r5, #15
 80025d8:	d000      	beq.n	80025dc <__aeabi_dmul+0x41c>
 80025da:	e0c9      	b.n	8002770 <__aeabi_dmul+0x5b0>
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	4652      	mov	r2, sl
 80025e0:	031b      	lsls	r3, r3, #12
 80025e2:	421a      	tst	r2, r3
 80025e4:	d002      	beq.n	80025ec <__aeabi_dmul+0x42c>
 80025e6:	421c      	tst	r4, r3
 80025e8:	d100      	bne.n	80025ec <__aeabi_dmul+0x42c>
 80025ea:	e092      	b.n	8002712 <__aeabi_dmul+0x552>
 80025ec:	2480      	movs	r4, #128	@ 0x80
 80025ee:	4653      	mov	r3, sl
 80025f0:	0324      	lsls	r4, r4, #12
 80025f2:	431c      	orrs	r4, r3
 80025f4:	0324      	lsls	r4, r4, #12
 80025f6:	4642      	mov	r2, r8
 80025f8:	0b24      	lsrs	r4, r4, #12
 80025fa:	e63e      	b.n	800227a <__aeabi_dmul+0xba>
 80025fc:	469b      	mov	fp, r3
 80025fe:	2303      	movs	r3, #3
 8002600:	4680      	mov	r8, r0
 8002602:	250c      	movs	r5, #12
 8002604:	9302      	str	r3, [sp, #8]
 8002606:	e601      	b.n	800220c <__aeabi_dmul+0x4c>
 8002608:	2300      	movs	r3, #0
 800260a:	469a      	mov	sl, r3
 800260c:	469b      	mov	fp, r3
 800260e:	3301      	adds	r3, #1
 8002610:	2504      	movs	r5, #4
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	e5fa      	b.n	800220c <__aeabi_dmul+0x4c>
 8002616:	2101      	movs	r1, #1
 8002618:	430d      	orrs	r5, r1
 800261a:	2d0a      	cmp	r5, #10
 800261c:	dd00      	ble.n	8002620 <__aeabi_dmul+0x460>
 800261e:	e64b      	b.n	80022b8 <__aeabi_dmul+0xf8>
 8002620:	4649      	mov	r1, r9
 8002622:	9800      	ldr	r0, [sp, #0]
 8002624:	4041      	eors	r1, r0
 8002626:	b2c9      	uxtb	r1, r1
 8002628:	9103      	str	r1, [sp, #12]
 800262a:	2d02      	cmp	r5, #2
 800262c:	dc00      	bgt.n	8002630 <__aeabi_dmul+0x470>
 800262e:	e096      	b.n	800275e <__aeabi_dmul+0x59e>
 8002630:	2300      	movs	r3, #0
 8002632:	2400      	movs	r4, #0
 8002634:	2001      	movs	r0, #1
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	e60c      	b.n	8002254 <__aeabi_dmul+0x94>
 800263a:	4649      	mov	r1, r9
 800263c:	2302      	movs	r3, #2
 800263e:	9a00      	ldr	r2, [sp, #0]
 8002640:	432b      	orrs	r3, r5
 8002642:	4051      	eors	r1, r2
 8002644:	b2ca      	uxtb	r2, r1
 8002646:	9203      	str	r2, [sp, #12]
 8002648:	2b0a      	cmp	r3, #10
 800264a:	dd00      	ble.n	800264e <__aeabi_dmul+0x48e>
 800264c:	e634      	b.n	80022b8 <__aeabi_dmul+0xf8>
 800264e:	2d00      	cmp	r5, #0
 8002650:	d157      	bne.n	8002702 <__aeabi_dmul+0x542>
 8002652:	9b03      	ldr	r3, [sp, #12]
 8002654:	4699      	mov	r9, r3
 8002656:	2400      	movs	r4, #0
 8002658:	2200      	movs	r2, #0
 800265a:	4b49      	ldr	r3, [pc, #292]	@ (8002780 <__aeabi_dmul+0x5c0>)
 800265c:	e60e      	b.n	800227c <__aeabi_dmul+0xbc>
 800265e:	4658      	mov	r0, fp
 8002660:	2101      	movs	r1, #1
 8002662:	1ac9      	subs	r1, r1, r3
 8002664:	2938      	cmp	r1, #56	@ 0x38
 8002666:	dd00      	ble.n	800266a <__aeabi_dmul+0x4aa>
 8002668:	e62f      	b.n	80022ca <__aeabi_dmul+0x10a>
 800266a:	291f      	cmp	r1, #31
 800266c:	dd56      	ble.n	800271c <__aeabi_dmul+0x55c>
 800266e:	221f      	movs	r2, #31
 8002670:	4654      	mov	r4, sl
 8002672:	4252      	negs	r2, r2
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	40dc      	lsrs	r4, r3
 8002678:	2920      	cmp	r1, #32
 800267a:	d007      	beq.n	800268c <__aeabi_dmul+0x4cc>
 800267c:	4b41      	ldr	r3, [pc, #260]	@ (8002784 <__aeabi_dmul+0x5c4>)
 800267e:	4642      	mov	r2, r8
 8002680:	469c      	mov	ip, r3
 8002682:	4653      	mov	r3, sl
 8002684:	4460      	add	r0, ip
 8002686:	4083      	lsls	r3, r0
 8002688:	431a      	orrs	r2, r3
 800268a:	4690      	mov	r8, r2
 800268c:	4642      	mov	r2, r8
 800268e:	2107      	movs	r1, #7
 8002690:	1e53      	subs	r3, r2, #1
 8002692:	419a      	sbcs	r2, r3
 8002694:	000b      	movs	r3, r1
 8002696:	4322      	orrs	r2, r4
 8002698:	4013      	ands	r3, r2
 800269a:	2400      	movs	r4, #0
 800269c:	4211      	tst	r1, r2
 800269e:	d009      	beq.n	80026b4 <__aeabi_dmul+0x4f4>
 80026a0:	230f      	movs	r3, #15
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d05d      	beq.n	8002764 <__aeabi_dmul+0x5a4>
 80026a8:	1d11      	adds	r1, r2, #4
 80026aa:	4291      	cmp	r1, r2
 80026ac:	419b      	sbcs	r3, r3
 80026ae:	000a      	movs	r2, r1
 80026b0:	425b      	negs	r3, r3
 80026b2:	075b      	lsls	r3, r3, #29
 80026b4:	08d2      	lsrs	r2, r2, #3
 80026b6:	431a      	orrs	r2, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	e5df      	b.n	800227c <__aeabi_dmul+0xbc>
 80026bc:	9b03      	ldr	r3, [sp, #12]
 80026be:	4699      	mov	r9, r3
 80026c0:	e5fa      	b.n	80022b8 <__aeabi_dmul+0xf8>
 80026c2:	9801      	ldr	r0, [sp, #4]
 80026c4:	f000 fd9e 	bl	8003204 <__clzsi2>
 80026c8:	0002      	movs	r2, r0
 80026ca:	0003      	movs	r3, r0
 80026cc:	3215      	adds	r2, #21
 80026ce:	3320      	adds	r3, #32
 80026d0:	2a1c      	cmp	r2, #28
 80026d2:	dc00      	bgt.n	80026d6 <__aeabi_dmul+0x516>
 80026d4:	e738      	b.n	8002548 <__aeabi_dmul+0x388>
 80026d6:	9a01      	ldr	r2, [sp, #4]
 80026d8:	3808      	subs	r0, #8
 80026da:	4082      	lsls	r2, r0
 80026dc:	e73f      	b.n	800255e <__aeabi_dmul+0x39e>
 80026de:	f000 fd91 	bl	8003204 <__clzsi2>
 80026e2:	2315      	movs	r3, #21
 80026e4:	469c      	mov	ip, r3
 80026e6:	4484      	add	ip, r0
 80026e8:	0002      	movs	r2, r0
 80026ea:	4663      	mov	r3, ip
 80026ec:	3220      	adds	r2, #32
 80026ee:	2b1c      	cmp	r3, #28
 80026f0:	dc00      	bgt.n	80026f4 <__aeabi_dmul+0x534>
 80026f2:	e758      	b.n	80025a6 <__aeabi_dmul+0x3e6>
 80026f4:	2300      	movs	r3, #0
 80026f6:	4698      	mov	r8, r3
 80026f8:	0023      	movs	r3, r4
 80026fa:	3808      	subs	r0, #8
 80026fc:	4083      	lsls	r3, r0
 80026fe:	469a      	mov	sl, r3
 8002700:	e762      	b.n	80025c8 <__aeabi_dmul+0x408>
 8002702:	001d      	movs	r5, r3
 8002704:	2300      	movs	r3, #0
 8002706:	2400      	movs	r4, #0
 8002708:	2002      	movs	r0, #2
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	e5a2      	b.n	8002254 <__aeabi_dmul+0x94>
 800270e:	9002      	str	r0, [sp, #8]
 8002710:	e632      	b.n	8002378 <__aeabi_dmul+0x1b8>
 8002712:	431c      	orrs	r4, r3
 8002714:	9b00      	ldr	r3, [sp, #0]
 8002716:	9a01      	ldr	r2, [sp, #4]
 8002718:	4699      	mov	r9, r3
 800271a:	e5ae      	b.n	800227a <__aeabi_dmul+0xba>
 800271c:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <__aeabi_dmul+0x5c8>)
 800271e:	4652      	mov	r2, sl
 8002720:	18c3      	adds	r3, r0, r3
 8002722:	4640      	mov	r0, r8
 8002724:	409a      	lsls	r2, r3
 8002726:	40c8      	lsrs	r0, r1
 8002728:	4302      	orrs	r2, r0
 800272a:	4640      	mov	r0, r8
 800272c:	4098      	lsls	r0, r3
 800272e:	0003      	movs	r3, r0
 8002730:	1e58      	subs	r0, r3, #1
 8002732:	4183      	sbcs	r3, r0
 8002734:	4654      	mov	r4, sl
 8002736:	431a      	orrs	r2, r3
 8002738:	40cc      	lsrs	r4, r1
 800273a:	0753      	lsls	r3, r2, #29
 800273c:	d009      	beq.n	8002752 <__aeabi_dmul+0x592>
 800273e:	230f      	movs	r3, #15
 8002740:	4013      	ands	r3, r2
 8002742:	2b04      	cmp	r3, #4
 8002744:	d005      	beq.n	8002752 <__aeabi_dmul+0x592>
 8002746:	1d13      	adds	r3, r2, #4
 8002748:	4293      	cmp	r3, r2
 800274a:	4192      	sbcs	r2, r2
 800274c:	4252      	negs	r2, r2
 800274e:	18a4      	adds	r4, r4, r2
 8002750:	001a      	movs	r2, r3
 8002752:	0223      	lsls	r3, r4, #8
 8002754:	d508      	bpl.n	8002768 <__aeabi_dmul+0x5a8>
 8002756:	2301      	movs	r3, #1
 8002758:	2400      	movs	r4, #0
 800275a:	2200      	movs	r2, #0
 800275c:	e58e      	b.n	800227c <__aeabi_dmul+0xbc>
 800275e:	4689      	mov	r9, r1
 8002760:	2400      	movs	r4, #0
 8002762:	e58b      	b.n	800227c <__aeabi_dmul+0xbc>
 8002764:	2300      	movs	r3, #0
 8002766:	e7a5      	b.n	80026b4 <__aeabi_dmul+0x4f4>
 8002768:	0763      	lsls	r3, r4, #29
 800276a:	0264      	lsls	r4, r4, #9
 800276c:	0b24      	lsrs	r4, r4, #12
 800276e:	e7a1      	b.n	80026b4 <__aeabi_dmul+0x4f4>
 8002770:	9b00      	ldr	r3, [sp, #0]
 8002772:	46a2      	mov	sl, r4
 8002774:	4699      	mov	r9, r3
 8002776:	9b01      	ldr	r3, [sp, #4]
 8002778:	4698      	mov	r8, r3
 800277a:	e737      	b.n	80025ec <__aeabi_dmul+0x42c>
 800277c:	fffffc0d 	.word	0xfffffc0d
 8002780:	000007ff 	.word	0x000007ff
 8002784:	0000043e 	.word	0x0000043e
 8002788:	0000041e 	.word	0x0000041e

0800278c <__aeabi_dsub>:
 800278c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278e:	4657      	mov	r7, sl
 8002790:	464e      	mov	r6, r9
 8002792:	4645      	mov	r5, r8
 8002794:	46de      	mov	lr, fp
 8002796:	b5e0      	push	{r5, r6, r7, lr}
 8002798:	b083      	sub	sp, #12
 800279a:	9000      	str	r0, [sp, #0]
 800279c:	9101      	str	r1, [sp, #4]
 800279e:	030c      	lsls	r4, r1, #12
 80027a0:	004d      	lsls	r5, r1, #1
 80027a2:	0fce      	lsrs	r6, r1, #31
 80027a4:	0a61      	lsrs	r1, r4, #9
 80027a6:	9c00      	ldr	r4, [sp, #0]
 80027a8:	005f      	lsls	r7, r3, #1
 80027aa:	0f64      	lsrs	r4, r4, #29
 80027ac:	430c      	orrs	r4, r1
 80027ae:	9900      	ldr	r1, [sp, #0]
 80027b0:	9200      	str	r2, [sp, #0]
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	00c8      	lsls	r0, r1, #3
 80027b6:	0319      	lsls	r1, r3, #12
 80027b8:	0d7b      	lsrs	r3, r7, #21
 80027ba:	4699      	mov	r9, r3
 80027bc:	9b01      	ldr	r3, [sp, #4]
 80027be:	4fcc      	ldr	r7, [pc, #816]	@ (8002af0 <__aeabi_dsub+0x364>)
 80027c0:	0fdb      	lsrs	r3, r3, #31
 80027c2:	469c      	mov	ip, r3
 80027c4:	0a4b      	lsrs	r3, r1, #9
 80027c6:	9900      	ldr	r1, [sp, #0]
 80027c8:	4680      	mov	r8, r0
 80027ca:	0f49      	lsrs	r1, r1, #29
 80027cc:	4319      	orrs	r1, r3
 80027ce:	9b00      	ldr	r3, [sp, #0]
 80027d0:	468b      	mov	fp, r1
 80027d2:	00da      	lsls	r2, r3, #3
 80027d4:	4692      	mov	sl, r2
 80027d6:	0d6d      	lsrs	r5, r5, #21
 80027d8:	45b9      	cmp	r9, r7
 80027da:	d100      	bne.n	80027de <__aeabi_dsub+0x52>
 80027dc:	e0bf      	b.n	800295e <__aeabi_dsub+0x1d2>
 80027de:	2301      	movs	r3, #1
 80027e0:	4661      	mov	r1, ip
 80027e2:	4059      	eors	r1, r3
 80027e4:	464b      	mov	r3, r9
 80027e6:	468c      	mov	ip, r1
 80027e8:	1aeb      	subs	r3, r5, r3
 80027ea:	428e      	cmp	r6, r1
 80027ec:	d075      	beq.n	80028da <__aeabi_dsub+0x14e>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	dc00      	bgt.n	80027f4 <__aeabi_dsub+0x68>
 80027f2:	e2a3      	b.n	8002d3c <__aeabi_dsub+0x5b0>
 80027f4:	4649      	mov	r1, r9
 80027f6:	2900      	cmp	r1, #0
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x70>
 80027fa:	e0ce      	b.n	800299a <__aeabi_dsub+0x20e>
 80027fc:	42bd      	cmp	r5, r7
 80027fe:	d100      	bne.n	8002802 <__aeabi_dsub+0x76>
 8002800:	e200      	b.n	8002c04 <__aeabi_dsub+0x478>
 8002802:	2701      	movs	r7, #1
 8002804:	2b38      	cmp	r3, #56	@ 0x38
 8002806:	dc19      	bgt.n	800283c <__aeabi_dsub+0xb0>
 8002808:	2780      	movs	r7, #128	@ 0x80
 800280a:	4659      	mov	r1, fp
 800280c:	043f      	lsls	r7, r7, #16
 800280e:	4339      	orrs	r1, r7
 8002810:	468b      	mov	fp, r1
 8002812:	2b1f      	cmp	r3, #31
 8002814:	dd00      	ble.n	8002818 <__aeabi_dsub+0x8c>
 8002816:	e1fa      	b.n	8002c0e <__aeabi_dsub+0x482>
 8002818:	2720      	movs	r7, #32
 800281a:	1af9      	subs	r1, r7, r3
 800281c:	468c      	mov	ip, r1
 800281e:	4659      	mov	r1, fp
 8002820:	4667      	mov	r7, ip
 8002822:	40b9      	lsls	r1, r7
 8002824:	000f      	movs	r7, r1
 8002826:	0011      	movs	r1, r2
 8002828:	40d9      	lsrs	r1, r3
 800282a:	430f      	orrs	r7, r1
 800282c:	4661      	mov	r1, ip
 800282e:	408a      	lsls	r2, r1
 8002830:	1e51      	subs	r1, r2, #1
 8002832:	418a      	sbcs	r2, r1
 8002834:	4659      	mov	r1, fp
 8002836:	40d9      	lsrs	r1, r3
 8002838:	4317      	orrs	r7, r2
 800283a:	1a64      	subs	r4, r4, r1
 800283c:	1bc7      	subs	r7, r0, r7
 800283e:	42b8      	cmp	r0, r7
 8002840:	4180      	sbcs	r0, r0
 8002842:	4240      	negs	r0, r0
 8002844:	1a24      	subs	r4, r4, r0
 8002846:	0223      	lsls	r3, r4, #8
 8002848:	d400      	bmi.n	800284c <__aeabi_dsub+0xc0>
 800284a:	e140      	b.n	8002ace <__aeabi_dsub+0x342>
 800284c:	0264      	lsls	r4, r4, #9
 800284e:	0a64      	lsrs	r4, r4, #9
 8002850:	2c00      	cmp	r4, #0
 8002852:	d100      	bne.n	8002856 <__aeabi_dsub+0xca>
 8002854:	e154      	b.n	8002b00 <__aeabi_dsub+0x374>
 8002856:	0020      	movs	r0, r4
 8002858:	f000 fcd4 	bl	8003204 <__clzsi2>
 800285c:	0003      	movs	r3, r0
 800285e:	3b08      	subs	r3, #8
 8002860:	2120      	movs	r1, #32
 8002862:	0038      	movs	r0, r7
 8002864:	1aca      	subs	r2, r1, r3
 8002866:	40d0      	lsrs	r0, r2
 8002868:	409c      	lsls	r4, r3
 800286a:	0002      	movs	r2, r0
 800286c:	409f      	lsls	r7, r3
 800286e:	4322      	orrs	r2, r4
 8002870:	429d      	cmp	r5, r3
 8002872:	dd00      	ble.n	8002876 <__aeabi_dsub+0xea>
 8002874:	e1a6      	b.n	8002bc4 <__aeabi_dsub+0x438>
 8002876:	1b58      	subs	r0, r3, r5
 8002878:	3001      	adds	r0, #1
 800287a:	1a09      	subs	r1, r1, r0
 800287c:	003c      	movs	r4, r7
 800287e:	408f      	lsls	r7, r1
 8002880:	40c4      	lsrs	r4, r0
 8002882:	1e7b      	subs	r3, r7, #1
 8002884:	419f      	sbcs	r7, r3
 8002886:	0013      	movs	r3, r2
 8002888:	408b      	lsls	r3, r1
 800288a:	4327      	orrs	r7, r4
 800288c:	431f      	orrs	r7, r3
 800288e:	40c2      	lsrs	r2, r0
 8002890:	003b      	movs	r3, r7
 8002892:	0014      	movs	r4, r2
 8002894:	2500      	movs	r5, #0
 8002896:	4313      	orrs	r3, r2
 8002898:	d100      	bne.n	800289c <__aeabi_dsub+0x110>
 800289a:	e1f7      	b.n	8002c8c <__aeabi_dsub+0x500>
 800289c:	077b      	lsls	r3, r7, #29
 800289e:	d100      	bne.n	80028a2 <__aeabi_dsub+0x116>
 80028a0:	e377      	b.n	8002f92 <__aeabi_dsub+0x806>
 80028a2:	230f      	movs	r3, #15
 80028a4:	0038      	movs	r0, r7
 80028a6:	403b      	ands	r3, r7
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d004      	beq.n	80028b6 <__aeabi_dsub+0x12a>
 80028ac:	1d38      	adds	r0, r7, #4
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	41bf      	sbcs	r7, r7
 80028b2:	427f      	negs	r7, r7
 80028b4:	19e4      	adds	r4, r4, r7
 80028b6:	0223      	lsls	r3, r4, #8
 80028b8:	d400      	bmi.n	80028bc <__aeabi_dsub+0x130>
 80028ba:	e368      	b.n	8002f8e <__aeabi_dsub+0x802>
 80028bc:	4b8c      	ldr	r3, [pc, #560]	@ (8002af0 <__aeabi_dsub+0x364>)
 80028be:	3501      	adds	r5, #1
 80028c0:	429d      	cmp	r5, r3
 80028c2:	d100      	bne.n	80028c6 <__aeabi_dsub+0x13a>
 80028c4:	e0f4      	b.n	8002ab0 <__aeabi_dsub+0x324>
 80028c6:	4b8b      	ldr	r3, [pc, #556]	@ (8002af4 <__aeabi_dsub+0x368>)
 80028c8:	056d      	lsls	r5, r5, #21
 80028ca:	401c      	ands	r4, r3
 80028cc:	0d6d      	lsrs	r5, r5, #21
 80028ce:	0767      	lsls	r7, r4, #29
 80028d0:	08c0      	lsrs	r0, r0, #3
 80028d2:	0264      	lsls	r4, r4, #9
 80028d4:	4307      	orrs	r7, r0
 80028d6:	0b24      	lsrs	r4, r4, #12
 80028d8:	e0ec      	b.n	8002ab4 <__aeabi_dsub+0x328>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	dc00      	bgt.n	80028e0 <__aeabi_dsub+0x154>
 80028de:	e329      	b.n	8002f34 <__aeabi_dsub+0x7a8>
 80028e0:	4649      	mov	r1, r9
 80028e2:	2900      	cmp	r1, #0
 80028e4:	d000      	beq.n	80028e8 <__aeabi_dsub+0x15c>
 80028e6:	e0d6      	b.n	8002a96 <__aeabi_dsub+0x30a>
 80028e8:	4659      	mov	r1, fp
 80028ea:	4311      	orrs	r1, r2
 80028ec:	d100      	bne.n	80028f0 <__aeabi_dsub+0x164>
 80028ee:	e12e      	b.n	8002b4e <__aeabi_dsub+0x3c2>
 80028f0:	1e59      	subs	r1, r3, #1
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0x16c>
 80028f6:	e1e6      	b.n	8002cc6 <__aeabi_dsub+0x53a>
 80028f8:	42bb      	cmp	r3, r7
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x172>
 80028fc:	e182      	b.n	8002c04 <__aeabi_dsub+0x478>
 80028fe:	2701      	movs	r7, #1
 8002900:	000b      	movs	r3, r1
 8002902:	2938      	cmp	r1, #56	@ 0x38
 8002904:	dc14      	bgt.n	8002930 <__aeabi_dsub+0x1a4>
 8002906:	2b1f      	cmp	r3, #31
 8002908:	dd00      	ble.n	800290c <__aeabi_dsub+0x180>
 800290a:	e23c      	b.n	8002d86 <__aeabi_dsub+0x5fa>
 800290c:	2720      	movs	r7, #32
 800290e:	1af9      	subs	r1, r7, r3
 8002910:	468c      	mov	ip, r1
 8002912:	4659      	mov	r1, fp
 8002914:	4667      	mov	r7, ip
 8002916:	40b9      	lsls	r1, r7
 8002918:	000f      	movs	r7, r1
 800291a:	0011      	movs	r1, r2
 800291c:	40d9      	lsrs	r1, r3
 800291e:	430f      	orrs	r7, r1
 8002920:	4661      	mov	r1, ip
 8002922:	408a      	lsls	r2, r1
 8002924:	1e51      	subs	r1, r2, #1
 8002926:	418a      	sbcs	r2, r1
 8002928:	4659      	mov	r1, fp
 800292a:	40d9      	lsrs	r1, r3
 800292c:	4317      	orrs	r7, r2
 800292e:	1864      	adds	r4, r4, r1
 8002930:	183f      	adds	r7, r7, r0
 8002932:	4287      	cmp	r7, r0
 8002934:	4180      	sbcs	r0, r0
 8002936:	4240      	negs	r0, r0
 8002938:	1824      	adds	r4, r4, r0
 800293a:	0223      	lsls	r3, r4, #8
 800293c:	d400      	bmi.n	8002940 <__aeabi_dsub+0x1b4>
 800293e:	e0c6      	b.n	8002ace <__aeabi_dsub+0x342>
 8002940:	4b6b      	ldr	r3, [pc, #428]	@ (8002af0 <__aeabi_dsub+0x364>)
 8002942:	3501      	adds	r5, #1
 8002944:	429d      	cmp	r5, r3
 8002946:	d100      	bne.n	800294a <__aeabi_dsub+0x1be>
 8002948:	e0b2      	b.n	8002ab0 <__aeabi_dsub+0x324>
 800294a:	2101      	movs	r1, #1
 800294c:	4b69      	ldr	r3, [pc, #420]	@ (8002af4 <__aeabi_dsub+0x368>)
 800294e:	087a      	lsrs	r2, r7, #1
 8002950:	401c      	ands	r4, r3
 8002952:	4039      	ands	r1, r7
 8002954:	430a      	orrs	r2, r1
 8002956:	07e7      	lsls	r7, r4, #31
 8002958:	4317      	orrs	r7, r2
 800295a:	0864      	lsrs	r4, r4, #1
 800295c:	e79e      	b.n	800289c <__aeabi_dsub+0x110>
 800295e:	4b66      	ldr	r3, [pc, #408]	@ (8002af8 <__aeabi_dsub+0x36c>)
 8002960:	4311      	orrs	r1, r2
 8002962:	468a      	mov	sl, r1
 8002964:	18eb      	adds	r3, r5, r3
 8002966:	2900      	cmp	r1, #0
 8002968:	d028      	beq.n	80029bc <__aeabi_dsub+0x230>
 800296a:	4566      	cmp	r6, ip
 800296c:	d02c      	beq.n	80029c8 <__aeabi_dsub+0x23c>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d05b      	beq.n	8002a2a <__aeabi_dsub+0x29e>
 8002972:	2d00      	cmp	r5, #0
 8002974:	d100      	bne.n	8002978 <__aeabi_dsub+0x1ec>
 8002976:	e12c      	b.n	8002bd2 <__aeabi_dsub+0x446>
 8002978:	465b      	mov	r3, fp
 800297a:	4666      	mov	r6, ip
 800297c:	075f      	lsls	r7, r3, #29
 800297e:	08d2      	lsrs	r2, r2, #3
 8002980:	4317      	orrs	r7, r2
 8002982:	08dd      	lsrs	r5, r3, #3
 8002984:	003b      	movs	r3, r7
 8002986:	432b      	orrs	r3, r5
 8002988:	d100      	bne.n	800298c <__aeabi_dsub+0x200>
 800298a:	e0e2      	b.n	8002b52 <__aeabi_dsub+0x3c6>
 800298c:	2480      	movs	r4, #128	@ 0x80
 800298e:	0324      	lsls	r4, r4, #12
 8002990:	432c      	orrs	r4, r5
 8002992:	0324      	lsls	r4, r4, #12
 8002994:	4d56      	ldr	r5, [pc, #344]	@ (8002af0 <__aeabi_dsub+0x364>)
 8002996:	0b24      	lsrs	r4, r4, #12
 8002998:	e08c      	b.n	8002ab4 <__aeabi_dsub+0x328>
 800299a:	4659      	mov	r1, fp
 800299c:	4311      	orrs	r1, r2
 800299e:	d100      	bne.n	80029a2 <__aeabi_dsub+0x216>
 80029a0:	e0d5      	b.n	8002b4e <__aeabi_dsub+0x3c2>
 80029a2:	1e59      	subs	r1, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d100      	bne.n	80029aa <__aeabi_dsub+0x21e>
 80029a8:	e1b9      	b.n	8002d1e <__aeabi_dsub+0x592>
 80029aa:	42bb      	cmp	r3, r7
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dsub+0x224>
 80029ae:	e1b1      	b.n	8002d14 <__aeabi_dsub+0x588>
 80029b0:	2701      	movs	r7, #1
 80029b2:	000b      	movs	r3, r1
 80029b4:	2938      	cmp	r1, #56	@ 0x38
 80029b6:	dd00      	ble.n	80029ba <__aeabi_dsub+0x22e>
 80029b8:	e740      	b.n	800283c <__aeabi_dsub+0xb0>
 80029ba:	e72a      	b.n	8002812 <__aeabi_dsub+0x86>
 80029bc:	4661      	mov	r1, ip
 80029be:	2701      	movs	r7, #1
 80029c0:	4079      	eors	r1, r7
 80029c2:	468c      	mov	ip, r1
 80029c4:	4566      	cmp	r6, ip
 80029c6:	d1d2      	bne.n	800296e <__aeabi_dsub+0x1e2>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d100      	bne.n	80029ce <__aeabi_dsub+0x242>
 80029cc:	e0c5      	b.n	8002b5a <__aeabi_dsub+0x3ce>
 80029ce:	2d00      	cmp	r5, #0
 80029d0:	d000      	beq.n	80029d4 <__aeabi_dsub+0x248>
 80029d2:	e155      	b.n	8002c80 <__aeabi_dsub+0x4f4>
 80029d4:	464b      	mov	r3, r9
 80029d6:	0025      	movs	r5, r4
 80029d8:	4305      	orrs	r5, r0
 80029da:	d100      	bne.n	80029de <__aeabi_dsub+0x252>
 80029dc:	e212      	b.n	8002e04 <__aeabi_dsub+0x678>
 80029de:	1e59      	subs	r1, r3, #1
 80029e0:	468c      	mov	ip, r1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x25c>
 80029e6:	e249      	b.n	8002e7c <__aeabi_dsub+0x6f0>
 80029e8:	4d41      	ldr	r5, [pc, #260]	@ (8002af0 <__aeabi_dsub+0x364>)
 80029ea:	42ab      	cmp	r3, r5
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x264>
 80029ee:	e28f      	b.n	8002f10 <__aeabi_dsub+0x784>
 80029f0:	2701      	movs	r7, #1
 80029f2:	2938      	cmp	r1, #56	@ 0x38
 80029f4:	dc11      	bgt.n	8002a1a <__aeabi_dsub+0x28e>
 80029f6:	4663      	mov	r3, ip
 80029f8:	2b1f      	cmp	r3, #31
 80029fa:	dd00      	ble.n	80029fe <__aeabi_dsub+0x272>
 80029fc:	e25b      	b.n	8002eb6 <__aeabi_dsub+0x72a>
 80029fe:	4661      	mov	r1, ip
 8002a00:	2320      	movs	r3, #32
 8002a02:	0027      	movs	r7, r4
 8002a04:	1a5b      	subs	r3, r3, r1
 8002a06:	0005      	movs	r5, r0
 8002a08:	4098      	lsls	r0, r3
 8002a0a:	409f      	lsls	r7, r3
 8002a0c:	40cd      	lsrs	r5, r1
 8002a0e:	1e43      	subs	r3, r0, #1
 8002a10:	4198      	sbcs	r0, r3
 8002a12:	40cc      	lsrs	r4, r1
 8002a14:	432f      	orrs	r7, r5
 8002a16:	4307      	orrs	r7, r0
 8002a18:	44a3      	add	fp, r4
 8002a1a:	18bf      	adds	r7, r7, r2
 8002a1c:	4297      	cmp	r7, r2
 8002a1e:	4192      	sbcs	r2, r2
 8002a20:	4252      	negs	r2, r2
 8002a22:	445a      	add	r2, fp
 8002a24:	0014      	movs	r4, r2
 8002a26:	464d      	mov	r5, r9
 8002a28:	e787      	b.n	800293a <__aeabi_dsub+0x1ae>
 8002a2a:	4f34      	ldr	r7, [pc, #208]	@ (8002afc <__aeabi_dsub+0x370>)
 8002a2c:	1c6b      	adds	r3, r5, #1
 8002a2e:	423b      	tst	r3, r7
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x2a8>
 8002a32:	e0b6      	b.n	8002ba2 <__aeabi_dsub+0x416>
 8002a34:	4659      	mov	r1, fp
 8002a36:	0023      	movs	r3, r4
 8002a38:	4311      	orrs	r1, r2
 8002a3a:	000f      	movs	r7, r1
 8002a3c:	4303      	orrs	r3, r0
 8002a3e:	2d00      	cmp	r5, #0
 8002a40:	d000      	beq.n	8002a44 <__aeabi_dsub+0x2b8>
 8002a42:	e126      	b.n	8002c92 <__aeabi_dsub+0x506>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d100      	bne.n	8002a4a <__aeabi_dsub+0x2be>
 8002a48:	e1c0      	b.n	8002dcc <__aeabi_dsub+0x640>
 8002a4a:	2900      	cmp	r1, #0
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x2c4>
 8002a4e:	e0a1      	b.n	8002b94 <__aeabi_dsub+0x408>
 8002a50:	1a83      	subs	r3, r0, r2
 8002a52:	4698      	mov	r8, r3
 8002a54:	465b      	mov	r3, fp
 8002a56:	4540      	cmp	r0, r8
 8002a58:	41ad      	sbcs	r5, r5
 8002a5a:	1ae3      	subs	r3, r4, r3
 8002a5c:	426d      	negs	r5, r5
 8002a5e:	1b5b      	subs	r3, r3, r5
 8002a60:	2580      	movs	r5, #128	@ 0x80
 8002a62:	042d      	lsls	r5, r5, #16
 8002a64:	422b      	tst	r3, r5
 8002a66:	d100      	bne.n	8002a6a <__aeabi_dsub+0x2de>
 8002a68:	e14b      	b.n	8002d02 <__aeabi_dsub+0x576>
 8002a6a:	465b      	mov	r3, fp
 8002a6c:	1a10      	subs	r0, r2, r0
 8002a6e:	4282      	cmp	r2, r0
 8002a70:	4192      	sbcs	r2, r2
 8002a72:	1b1c      	subs	r4, r3, r4
 8002a74:	0007      	movs	r7, r0
 8002a76:	2601      	movs	r6, #1
 8002a78:	4663      	mov	r3, ip
 8002a7a:	4252      	negs	r2, r2
 8002a7c:	1aa4      	subs	r4, r4, r2
 8002a7e:	4327      	orrs	r7, r4
 8002a80:	401e      	ands	r6, r3
 8002a82:	2f00      	cmp	r7, #0
 8002a84:	d100      	bne.n	8002a88 <__aeabi_dsub+0x2fc>
 8002a86:	e142      	b.n	8002d0e <__aeabi_dsub+0x582>
 8002a88:	422c      	tst	r4, r5
 8002a8a:	d100      	bne.n	8002a8e <__aeabi_dsub+0x302>
 8002a8c:	e26d      	b.n	8002f6a <__aeabi_dsub+0x7de>
 8002a8e:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <__aeabi_dsub+0x368>)
 8002a90:	2501      	movs	r5, #1
 8002a92:	401c      	ands	r4, r3
 8002a94:	e71b      	b.n	80028ce <__aeabi_dsub+0x142>
 8002a96:	42bd      	cmp	r5, r7
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x310>
 8002a9a:	e13b      	b.n	8002d14 <__aeabi_dsub+0x588>
 8002a9c:	2701      	movs	r7, #1
 8002a9e:	2b38      	cmp	r3, #56	@ 0x38
 8002aa0:	dd00      	ble.n	8002aa4 <__aeabi_dsub+0x318>
 8002aa2:	e745      	b.n	8002930 <__aeabi_dsub+0x1a4>
 8002aa4:	2780      	movs	r7, #128	@ 0x80
 8002aa6:	4659      	mov	r1, fp
 8002aa8:	043f      	lsls	r7, r7, #16
 8002aaa:	4339      	orrs	r1, r7
 8002aac:	468b      	mov	fp, r1
 8002aae:	e72a      	b.n	8002906 <__aeabi_dsub+0x17a>
 8002ab0:	2400      	movs	r4, #0
 8002ab2:	2700      	movs	r7, #0
 8002ab4:	052d      	lsls	r5, r5, #20
 8002ab6:	4325      	orrs	r5, r4
 8002ab8:	07f6      	lsls	r6, r6, #31
 8002aba:	4335      	orrs	r5, r6
 8002abc:	0038      	movs	r0, r7
 8002abe:	0029      	movs	r1, r5
 8002ac0:	b003      	add	sp, #12
 8002ac2:	bcf0      	pop	{r4, r5, r6, r7}
 8002ac4:	46bb      	mov	fp, r7
 8002ac6:	46b2      	mov	sl, r6
 8002ac8:	46a9      	mov	r9, r5
 8002aca:	46a0      	mov	r8, r4
 8002acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ace:	077b      	lsls	r3, r7, #29
 8002ad0:	d004      	beq.n	8002adc <__aeabi_dsub+0x350>
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	403b      	ands	r3, r7
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d000      	beq.n	8002adc <__aeabi_dsub+0x350>
 8002ada:	e6e7      	b.n	80028ac <__aeabi_dsub+0x120>
 8002adc:	002b      	movs	r3, r5
 8002ade:	08f8      	lsrs	r0, r7, #3
 8002ae0:	4a03      	ldr	r2, [pc, #12]	@ (8002af0 <__aeabi_dsub+0x364>)
 8002ae2:	0767      	lsls	r7, r4, #29
 8002ae4:	4307      	orrs	r7, r0
 8002ae6:	08e5      	lsrs	r5, r4, #3
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d100      	bne.n	8002aee <__aeabi_dsub+0x362>
 8002aec:	e74a      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002aee:	e0a5      	b.n	8002c3c <__aeabi_dsub+0x4b0>
 8002af0:	000007ff 	.word	0x000007ff
 8002af4:	ff7fffff 	.word	0xff7fffff
 8002af8:	fffff801 	.word	0xfffff801
 8002afc:	000007fe 	.word	0x000007fe
 8002b00:	0038      	movs	r0, r7
 8002b02:	f000 fb7f 	bl	8003204 <__clzsi2>
 8002b06:	0003      	movs	r3, r0
 8002b08:	3318      	adds	r3, #24
 8002b0a:	2b1f      	cmp	r3, #31
 8002b0c:	dc00      	bgt.n	8002b10 <__aeabi_dsub+0x384>
 8002b0e:	e6a7      	b.n	8002860 <__aeabi_dsub+0xd4>
 8002b10:	003a      	movs	r2, r7
 8002b12:	3808      	subs	r0, #8
 8002b14:	4082      	lsls	r2, r0
 8002b16:	429d      	cmp	r5, r3
 8002b18:	dd00      	ble.n	8002b1c <__aeabi_dsub+0x390>
 8002b1a:	e08a      	b.n	8002c32 <__aeabi_dsub+0x4a6>
 8002b1c:	1b5b      	subs	r3, r3, r5
 8002b1e:	1c58      	adds	r0, r3, #1
 8002b20:	281f      	cmp	r0, #31
 8002b22:	dc00      	bgt.n	8002b26 <__aeabi_dsub+0x39a>
 8002b24:	e1d8      	b.n	8002ed8 <__aeabi_dsub+0x74c>
 8002b26:	0017      	movs	r7, r2
 8002b28:	3b1f      	subs	r3, #31
 8002b2a:	40df      	lsrs	r7, r3
 8002b2c:	2820      	cmp	r0, #32
 8002b2e:	d005      	beq.n	8002b3c <__aeabi_dsub+0x3b0>
 8002b30:	2340      	movs	r3, #64	@ 0x40
 8002b32:	1a1b      	subs	r3, r3, r0
 8002b34:	409a      	lsls	r2, r3
 8002b36:	1e53      	subs	r3, r2, #1
 8002b38:	419a      	sbcs	r2, r3
 8002b3a:	4317      	orrs	r7, r2
 8002b3c:	2500      	movs	r5, #0
 8002b3e:	2f00      	cmp	r7, #0
 8002b40:	d100      	bne.n	8002b44 <__aeabi_dsub+0x3b8>
 8002b42:	e0e5      	b.n	8002d10 <__aeabi_dsub+0x584>
 8002b44:	077b      	lsls	r3, r7, #29
 8002b46:	d000      	beq.n	8002b4a <__aeabi_dsub+0x3be>
 8002b48:	e6ab      	b.n	80028a2 <__aeabi_dsub+0x116>
 8002b4a:	002c      	movs	r4, r5
 8002b4c:	e7c6      	b.n	8002adc <__aeabi_dsub+0x350>
 8002b4e:	08c0      	lsrs	r0, r0, #3
 8002b50:	e7c6      	b.n	8002ae0 <__aeabi_dsub+0x354>
 8002b52:	2700      	movs	r7, #0
 8002b54:	2400      	movs	r4, #0
 8002b56:	4dd1      	ldr	r5, [pc, #836]	@ (8002e9c <__aeabi_dsub+0x710>)
 8002b58:	e7ac      	b.n	8002ab4 <__aeabi_dsub+0x328>
 8002b5a:	4fd1      	ldr	r7, [pc, #836]	@ (8002ea0 <__aeabi_dsub+0x714>)
 8002b5c:	1c6b      	adds	r3, r5, #1
 8002b5e:	423b      	tst	r3, r7
 8002b60:	d171      	bne.n	8002c46 <__aeabi_dsub+0x4ba>
 8002b62:	0023      	movs	r3, r4
 8002b64:	4303      	orrs	r3, r0
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d000      	beq.n	8002b6c <__aeabi_dsub+0x3e0>
 8002b6a:	e14e      	b.n	8002e0a <__aeabi_dsub+0x67e>
 8002b6c:	4657      	mov	r7, sl
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d100      	bne.n	8002b74 <__aeabi_dsub+0x3e8>
 8002b72:	e1b5      	b.n	8002ee0 <__aeabi_dsub+0x754>
 8002b74:	2f00      	cmp	r7, #0
 8002b76:	d00d      	beq.n	8002b94 <__aeabi_dsub+0x408>
 8002b78:	1883      	adds	r3, r0, r2
 8002b7a:	4283      	cmp	r3, r0
 8002b7c:	4180      	sbcs	r0, r0
 8002b7e:	445c      	add	r4, fp
 8002b80:	4240      	negs	r0, r0
 8002b82:	1824      	adds	r4, r4, r0
 8002b84:	0222      	lsls	r2, r4, #8
 8002b86:	d500      	bpl.n	8002b8a <__aeabi_dsub+0x3fe>
 8002b88:	e1c8      	b.n	8002f1c <__aeabi_dsub+0x790>
 8002b8a:	001f      	movs	r7, r3
 8002b8c:	4698      	mov	r8, r3
 8002b8e:	4327      	orrs	r7, r4
 8002b90:	d100      	bne.n	8002b94 <__aeabi_dsub+0x408>
 8002b92:	e0bc      	b.n	8002d0e <__aeabi_dsub+0x582>
 8002b94:	4643      	mov	r3, r8
 8002b96:	0767      	lsls	r7, r4, #29
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	431f      	orrs	r7, r3
 8002b9c:	08e5      	lsrs	r5, r4, #3
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e04c      	b.n	8002c3c <__aeabi_dsub+0x4b0>
 8002ba2:	1a83      	subs	r3, r0, r2
 8002ba4:	4698      	mov	r8, r3
 8002ba6:	465b      	mov	r3, fp
 8002ba8:	4540      	cmp	r0, r8
 8002baa:	41bf      	sbcs	r7, r7
 8002bac:	1ae3      	subs	r3, r4, r3
 8002bae:	427f      	negs	r7, r7
 8002bb0:	1bdb      	subs	r3, r3, r7
 8002bb2:	021f      	lsls	r7, r3, #8
 8002bb4:	d47c      	bmi.n	8002cb0 <__aeabi_dsub+0x524>
 8002bb6:	4647      	mov	r7, r8
 8002bb8:	431f      	orrs	r7, r3
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x432>
 8002bbc:	e0a6      	b.n	8002d0c <__aeabi_dsub+0x580>
 8002bbe:	001c      	movs	r4, r3
 8002bc0:	4647      	mov	r7, r8
 8002bc2:	e645      	b.n	8002850 <__aeabi_dsub+0xc4>
 8002bc4:	4cb7      	ldr	r4, [pc, #732]	@ (8002ea4 <__aeabi_dsub+0x718>)
 8002bc6:	1aed      	subs	r5, r5, r3
 8002bc8:	4014      	ands	r4, r2
 8002bca:	077b      	lsls	r3, r7, #29
 8002bcc:	d000      	beq.n	8002bd0 <__aeabi_dsub+0x444>
 8002bce:	e780      	b.n	8002ad2 <__aeabi_dsub+0x346>
 8002bd0:	e784      	b.n	8002adc <__aeabi_dsub+0x350>
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	0025      	movs	r5, r4
 8002bd6:	4305      	orrs	r5, r0
 8002bd8:	d066      	beq.n	8002ca8 <__aeabi_dsub+0x51c>
 8002bda:	1e5f      	subs	r7, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d100      	bne.n	8002be2 <__aeabi_dsub+0x456>
 8002be0:	e0fc      	b.n	8002ddc <__aeabi_dsub+0x650>
 8002be2:	4dae      	ldr	r5, [pc, #696]	@ (8002e9c <__aeabi_dsub+0x710>)
 8002be4:	42ab      	cmp	r3, r5
 8002be6:	d100      	bne.n	8002bea <__aeabi_dsub+0x45e>
 8002be8:	e15e      	b.n	8002ea8 <__aeabi_dsub+0x71c>
 8002bea:	4666      	mov	r6, ip
 8002bec:	2f38      	cmp	r7, #56	@ 0x38
 8002bee:	dc00      	bgt.n	8002bf2 <__aeabi_dsub+0x466>
 8002bf0:	e0b4      	b.n	8002d5c <__aeabi_dsub+0x5d0>
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	1a17      	subs	r7, r2, r0
 8002bf6:	42ba      	cmp	r2, r7
 8002bf8:	4192      	sbcs	r2, r2
 8002bfa:	465b      	mov	r3, fp
 8002bfc:	4252      	negs	r2, r2
 8002bfe:	464d      	mov	r5, r9
 8002c00:	1a9c      	subs	r4, r3, r2
 8002c02:	e620      	b.n	8002846 <__aeabi_dsub+0xba>
 8002c04:	0767      	lsls	r7, r4, #29
 8002c06:	08c0      	lsrs	r0, r0, #3
 8002c08:	4307      	orrs	r7, r0
 8002c0a:	08e5      	lsrs	r5, r4, #3
 8002c0c:	e6ba      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002c0e:	001f      	movs	r7, r3
 8002c10:	4659      	mov	r1, fp
 8002c12:	3f20      	subs	r7, #32
 8002c14:	40f9      	lsrs	r1, r7
 8002c16:	000f      	movs	r7, r1
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d005      	beq.n	8002c28 <__aeabi_dsub+0x49c>
 8002c1c:	2140      	movs	r1, #64	@ 0x40
 8002c1e:	1acb      	subs	r3, r1, r3
 8002c20:	4659      	mov	r1, fp
 8002c22:	4099      	lsls	r1, r3
 8002c24:	430a      	orrs	r2, r1
 8002c26:	4692      	mov	sl, r2
 8002c28:	4653      	mov	r3, sl
 8002c2a:	1e5a      	subs	r2, r3, #1
 8002c2c:	4193      	sbcs	r3, r2
 8002c2e:	431f      	orrs	r7, r3
 8002c30:	e604      	b.n	800283c <__aeabi_dsub+0xb0>
 8002c32:	1aeb      	subs	r3, r5, r3
 8002c34:	4d9b      	ldr	r5, [pc, #620]	@ (8002ea4 <__aeabi_dsub+0x718>)
 8002c36:	4015      	ands	r5, r2
 8002c38:	076f      	lsls	r7, r5, #29
 8002c3a:	08ed      	lsrs	r5, r5, #3
 8002c3c:	032c      	lsls	r4, r5, #12
 8002c3e:	055d      	lsls	r5, r3, #21
 8002c40:	0b24      	lsrs	r4, r4, #12
 8002c42:	0d6d      	lsrs	r5, r5, #21
 8002c44:	e736      	b.n	8002ab4 <__aeabi_dsub+0x328>
 8002c46:	4d95      	ldr	r5, [pc, #596]	@ (8002e9c <__aeabi_dsub+0x710>)
 8002c48:	42ab      	cmp	r3, r5
 8002c4a:	d100      	bne.n	8002c4e <__aeabi_dsub+0x4c2>
 8002c4c:	e0d6      	b.n	8002dfc <__aeabi_dsub+0x670>
 8002c4e:	1882      	adds	r2, r0, r2
 8002c50:	0021      	movs	r1, r4
 8002c52:	4282      	cmp	r2, r0
 8002c54:	4180      	sbcs	r0, r0
 8002c56:	4459      	add	r1, fp
 8002c58:	4240      	negs	r0, r0
 8002c5a:	1808      	adds	r0, r1, r0
 8002c5c:	07c7      	lsls	r7, r0, #31
 8002c5e:	0852      	lsrs	r2, r2, #1
 8002c60:	4317      	orrs	r7, r2
 8002c62:	0844      	lsrs	r4, r0, #1
 8002c64:	0752      	lsls	r2, r2, #29
 8002c66:	d400      	bmi.n	8002c6a <__aeabi_dsub+0x4de>
 8002c68:	e185      	b.n	8002f76 <__aeabi_dsub+0x7ea>
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	001d      	movs	r5, r3
 8002c6e:	403a      	ands	r2, r7
 8002c70:	2a04      	cmp	r2, #4
 8002c72:	d000      	beq.n	8002c76 <__aeabi_dsub+0x4ea>
 8002c74:	e61a      	b.n	80028ac <__aeabi_dsub+0x120>
 8002c76:	08ff      	lsrs	r7, r7, #3
 8002c78:	0764      	lsls	r4, r4, #29
 8002c7a:	4327      	orrs	r7, r4
 8002c7c:	0905      	lsrs	r5, r0, #4
 8002c7e:	e7dd      	b.n	8002c3c <__aeabi_dsub+0x4b0>
 8002c80:	465b      	mov	r3, fp
 8002c82:	08d2      	lsrs	r2, r2, #3
 8002c84:	075f      	lsls	r7, r3, #29
 8002c86:	4317      	orrs	r7, r2
 8002c88:	08dd      	lsrs	r5, r3, #3
 8002c8a:	e67b      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002c8c:	2700      	movs	r7, #0
 8002c8e:	2400      	movs	r4, #0
 8002c90:	e710      	b.n	8002ab4 <__aeabi_dsub+0x328>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d000      	beq.n	8002c98 <__aeabi_dsub+0x50c>
 8002c96:	e0d6      	b.n	8002e46 <__aeabi_dsub+0x6ba>
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	d000      	beq.n	8002c9e <__aeabi_dsub+0x512>
 8002c9c:	e12f      	b.n	8002efe <__aeabi_dsub+0x772>
 8002c9e:	2480      	movs	r4, #128	@ 0x80
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	4d7e      	ldr	r5, [pc, #504]	@ (8002e9c <__aeabi_dsub+0x710>)
 8002ca4:	0324      	lsls	r4, r4, #12
 8002ca6:	e705      	b.n	8002ab4 <__aeabi_dsub+0x328>
 8002ca8:	4666      	mov	r6, ip
 8002caa:	465c      	mov	r4, fp
 8002cac:	08d0      	lsrs	r0, r2, #3
 8002cae:	e717      	b.n	8002ae0 <__aeabi_dsub+0x354>
 8002cb0:	465b      	mov	r3, fp
 8002cb2:	1a17      	subs	r7, r2, r0
 8002cb4:	42ba      	cmp	r2, r7
 8002cb6:	4192      	sbcs	r2, r2
 8002cb8:	1b1c      	subs	r4, r3, r4
 8002cba:	2601      	movs	r6, #1
 8002cbc:	4663      	mov	r3, ip
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	1aa4      	subs	r4, r4, r2
 8002cc2:	401e      	ands	r6, r3
 8002cc4:	e5c4      	b.n	8002850 <__aeabi_dsub+0xc4>
 8002cc6:	1883      	adds	r3, r0, r2
 8002cc8:	4283      	cmp	r3, r0
 8002cca:	4180      	sbcs	r0, r0
 8002ccc:	445c      	add	r4, fp
 8002cce:	4240      	negs	r0, r0
 8002cd0:	1825      	adds	r5, r4, r0
 8002cd2:	022a      	lsls	r2, r5, #8
 8002cd4:	d400      	bmi.n	8002cd8 <__aeabi_dsub+0x54c>
 8002cd6:	e0da      	b.n	8002e8e <__aeabi_dsub+0x702>
 8002cd8:	4a72      	ldr	r2, [pc, #456]	@ (8002ea4 <__aeabi_dsub+0x718>)
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	4015      	ands	r5, r2
 8002cde:	07ea      	lsls	r2, r5, #31
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	0869      	lsrs	r1, r5, #1
 8002ce4:	075b      	lsls	r3, r3, #29
 8002ce6:	d400      	bmi.n	8002cea <__aeabi_dsub+0x55e>
 8002ce8:	e14a      	b.n	8002f80 <__aeabi_dsub+0x7f4>
 8002cea:	230f      	movs	r3, #15
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d100      	bne.n	8002cf4 <__aeabi_dsub+0x568>
 8002cf2:	e0fc      	b.n	8002eee <__aeabi_dsub+0x762>
 8002cf4:	1d17      	adds	r7, r2, #4
 8002cf6:	4297      	cmp	r7, r2
 8002cf8:	41a4      	sbcs	r4, r4
 8002cfa:	4264      	negs	r4, r4
 8002cfc:	2502      	movs	r5, #2
 8002cfe:	1864      	adds	r4, r4, r1
 8002d00:	e6ec      	b.n	8002adc <__aeabi_dsub+0x350>
 8002d02:	4647      	mov	r7, r8
 8002d04:	001c      	movs	r4, r3
 8002d06:	431f      	orrs	r7, r3
 8002d08:	d000      	beq.n	8002d0c <__aeabi_dsub+0x580>
 8002d0a:	e743      	b.n	8002b94 <__aeabi_dsub+0x408>
 8002d0c:	2600      	movs	r6, #0
 8002d0e:	2500      	movs	r5, #0
 8002d10:	2400      	movs	r4, #0
 8002d12:	e6cf      	b.n	8002ab4 <__aeabi_dsub+0x328>
 8002d14:	08c0      	lsrs	r0, r0, #3
 8002d16:	0767      	lsls	r7, r4, #29
 8002d18:	4307      	orrs	r7, r0
 8002d1a:	08e5      	lsrs	r5, r4, #3
 8002d1c:	e632      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002d1e:	1a87      	subs	r7, r0, r2
 8002d20:	465b      	mov	r3, fp
 8002d22:	42b8      	cmp	r0, r7
 8002d24:	4180      	sbcs	r0, r0
 8002d26:	1ae4      	subs	r4, r4, r3
 8002d28:	4240      	negs	r0, r0
 8002d2a:	1a24      	subs	r4, r4, r0
 8002d2c:	0223      	lsls	r3, r4, #8
 8002d2e:	d428      	bmi.n	8002d82 <__aeabi_dsub+0x5f6>
 8002d30:	0763      	lsls	r3, r4, #29
 8002d32:	08ff      	lsrs	r7, r7, #3
 8002d34:	431f      	orrs	r7, r3
 8002d36:	08e5      	lsrs	r5, r4, #3
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e77f      	b.n	8002c3c <__aeabi_dsub+0x4b0>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d100      	bne.n	8002d42 <__aeabi_dsub+0x5b6>
 8002d40:	e673      	b.n	8002a2a <__aeabi_dsub+0x29e>
 8002d42:	464b      	mov	r3, r9
 8002d44:	1b5f      	subs	r7, r3, r5
 8002d46:	003b      	movs	r3, r7
 8002d48:	2d00      	cmp	r5, #0
 8002d4a:	d100      	bne.n	8002d4e <__aeabi_dsub+0x5c2>
 8002d4c:	e742      	b.n	8002bd4 <__aeabi_dsub+0x448>
 8002d4e:	2f38      	cmp	r7, #56	@ 0x38
 8002d50:	dd00      	ble.n	8002d54 <__aeabi_dsub+0x5c8>
 8002d52:	e0ec      	b.n	8002f2e <__aeabi_dsub+0x7a2>
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	000e      	movs	r6, r1
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	431c      	orrs	r4, r3
 8002d5c:	2f1f      	cmp	r7, #31
 8002d5e:	dc25      	bgt.n	8002dac <__aeabi_dsub+0x620>
 8002d60:	2520      	movs	r5, #32
 8002d62:	0023      	movs	r3, r4
 8002d64:	1bed      	subs	r5, r5, r7
 8002d66:	0001      	movs	r1, r0
 8002d68:	40a8      	lsls	r0, r5
 8002d6a:	40ab      	lsls	r3, r5
 8002d6c:	40f9      	lsrs	r1, r7
 8002d6e:	1e45      	subs	r5, r0, #1
 8002d70:	41a8      	sbcs	r0, r5
 8002d72:	430b      	orrs	r3, r1
 8002d74:	40fc      	lsrs	r4, r7
 8002d76:	4318      	orrs	r0, r3
 8002d78:	465b      	mov	r3, fp
 8002d7a:	1b1b      	subs	r3, r3, r4
 8002d7c:	469b      	mov	fp, r3
 8002d7e:	e739      	b.n	8002bf4 <__aeabi_dsub+0x468>
 8002d80:	4666      	mov	r6, ip
 8002d82:	2501      	movs	r5, #1
 8002d84:	e562      	b.n	800284c <__aeabi_dsub+0xc0>
 8002d86:	001f      	movs	r7, r3
 8002d88:	4659      	mov	r1, fp
 8002d8a:	3f20      	subs	r7, #32
 8002d8c:	40f9      	lsrs	r1, r7
 8002d8e:	468c      	mov	ip, r1
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d005      	beq.n	8002da0 <__aeabi_dsub+0x614>
 8002d94:	2740      	movs	r7, #64	@ 0x40
 8002d96:	4659      	mov	r1, fp
 8002d98:	1afb      	subs	r3, r7, r3
 8002d9a:	4099      	lsls	r1, r3
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	4692      	mov	sl, r2
 8002da0:	4657      	mov	r7, sl
 8002da2:	1e7b      	subs	r3, r7, #1
 8002da4:	419f      	sbcs	r7, r3
 8002da6:	4663      	mov	r3, ip
 8002da8:	431f      	orrs	r7, r3
 8002daa:	e5c1      	b.n	8002930 <__aeabi_dsub+0x1a4>
 8002dac:	003b      	movs	r3, r7
 8002dae:	0025      	movs	r5, r4
 8002db0:	3b20      	subs	r3, #32
 8002db2:	40dd      	lsrs	r5, r3
 8002db4:	2f20      	cmp	r7, #32
 8002db6:	d004      	beq.n	8002dc2 <__aeabi_dsub+0x636>
 8002db8:	2340      	movs	r3, #64	@ 0x40
 8002dba:	1bdb      	subs	r3, r3, r7
 8002dbc:	409c      	lsls	r4, r3
 8002dbe:	4320      	orrs	r0, r4
 8002dc0:	4680      	mov	r8, r0
 8002dc2:	4640      	mov	r0, r8
 8002dc4:	1e43      	subs	r3, r0, #1
 8002dc6:	4198      	sbcs	r0, r3
 8002dc8:	4328      	orrs	r0, r5
 8002dca:	e713      	b.n	8002bf4 <__aeabi_dsub+0x468>
 8002dcc:	2900      	cmp	r1, #0
 8002dce:	d09d      	beq.n	8002d0c <__aeabi_dsub+0x580>
 8002dd0:	2601      	movs	r6, #1
 8002dd2:	4663      	mov	r3, ip
 8002dd4:	465c      	mov	r4, fp
 8002dd6:	4690      	mov	r8, r2
 8002dd8:	401e      	ands	r6, r3
 8002dda:	e6db      	b.n	8002b94 <__aeabi_dsub+0x408>
 8002ddc:	1a17      	subs	r7, r2, r0
 8002dde:	465b      	mov	r3, fp
 8002de0:	42ba      	cmp	r2, r7
 8002de2:	4192      	sbcs	r2, r2
 8002de4:	1b1c      	subs	r4, r3, r4
 8002de6:	4252      	negs	r2, r2
 8002de8:	1aa4      	subs	r4, r4, r2
 8002dea:	0223      	lsls	r3, r4, #8
 8002dec:	d4c8      	bmi.n	8002d80 <__aeabi_dsub+0x5f4>
 8002dee:	0763      	lsls	r3, r4, #29
 8002df0:	08ff      	lsrs	r7, r7, #3
 8002df2:	431f      	orrs	r7, r3
 8002df4:	4666      	mov	r6, ip
 8002df6:	2301      	movs	r3, #1
 8002df8:	08e5      	lsrs	r5, r4, #3
 8002dfa:	e71f      	b.n	8002c3c <__aeabi_dsub+0x4b0>
 8002dfc:	001d      	movs	r5, r3
 8002dfe:	2400      	movs	r4, #0
 8002e00:	2700      	movs	r7, #0
 8002e02:	e657      	b.n	8002ab4 <__aeabi_dsub+0x328>
 8002e04:	465c      	mov	r4, fp
 8002e06:	08d0      	lsrs	r0, r2, #3
 8002e08:	e66a      	b.n	8002ae0 <__aeabi_dsub+0x354>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d100      	bne.n	8002e10 <__aeabi_dsub+0x684>
 8002e0e:	e737      	b.n	8002c80 <__aeabi_dsub+0x4f4>
 8002e10:	4653      	mov	r3, sl
 8002e12:	08c0      	lsrs	r0, r0, #3
 8002e14:	0767      	lsls	r7, r4, #29
 8002e16:	4307      	orrs	r7, r0
 8002e18:	08e5      	lsrs	r5, r4, #3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d100      	bne.n	8002e20 <__aeabi_dsub+0x694>
 8002e1e:	e5b1      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002e20:	2380      	movs	r3, #128	@ 0x80
 8002e22:	031b      	lsls	r3, r3, #12
 8002e24:	421d      	tst	r5, r3
 8002e26:	d008      	beq.n	8002e3a <__aeabi_dsub+0x6ae>
 8002e28:	4659      	mov	r1, fp
 8002e2a:	08c8      	lsrs	r0, r1, #3
 8002e2c:	4218      	tst	r0, r3
 8002e2e:	d104      	bne.n	8002e3a <__aeabi_dsub+0x6ae>
 8002e30:	08d2      	lsrs	r2, r2, #3
 8002e32:	0749      	lsls	r1, r1, #29
 8002e34:	430a      	orrs	r2, r1
 8002e36:	0017      	movs	r7, r2
 8002e38:	0005      	movs	r5, r0
 8002e3a:	0f7b      	lsrs	r3, r7, #29
 8002e3c:	00ff      	lsls	r7, r7, #3
 8002e3e:	08ff      	lsrs	r7, r7, #3
 8002e40:	075b      	lsls	r3, r3, #29
 8002e42:	431f      	orrs	r7, r3
 8002e44:	e59e      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002e46:	08c0      	lsrs	r0, r0, #3
 8002e48:	0763      	lsls	r3, r4, #29
 8002e4a:	4318      	orrs	r0, r3
 8002e4c:	08e5      	lsrs	r5, r4, #3
 8002e4e:	2900      	cmp	r1, #0
 8002e50:	d053      	beq.n	8002efa <__aeabi_dsub+0x76e>
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	031b      	lsls	r3, r3, #12
 8002e56:	421d      	tst	r5, r3
 8002e58:	d00a      	beq.n	8002e70 <__aeabi_dsub+0x6e4>
 8002e5a:	4659      	mov	r1, fp
 8002e5c:	08cc      	lsrs	r4, r1, #3
 8002e5e:	421c      	tst	r4, r3
 8002e60:	d106      	bne.n	8002e70 <__aeabi_dsub+0x6e4>
 8002e62:	2601      	movs	r6, #1
 8002e64:	4663      	mov	r3, ip
 8002e66:	0025      	movs	r5, r4
 8002e68:	08d0      	lsrs	r0, r2, #3
 8002e6a:	0749      	lsls	r1, r1, #29
 8002e6c:	4308      	orrs	r0, r1
 8002e6e:	401e      	ands	r6, r3
 8002e70:	0f47      	lsrs	r7, r0, #29
 8002e72:	00c0      	lsls	r0, r0, #3
 8002e74:	08c0      	lsrs	r0, r0, #3
 8002e76:	077f      	lsls	r7, r7, #29
 8002e78:	4307      	orrs	r7, r0
 8002e7a:	e583      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002e7c:	1883      	adds	r3, r0, r2
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	4192      	sbcs	r2, r2
 8002e82:	445c      	add	r4, fp
 8002e84:	4252      	negs	r2, r2
 8002e86:	18a5      	adds	r5, r4, r2
 8002e88:	022a      	lsls	r2, r5, #8
 8002e8a:	d500      	bpl.n	8002e8e <__aeabi_dsub+0x702>
 8002e8c:	e724      	b.n	8002cd8 <__aeabi_dsub+0x54c>
 8002e8e:	076f      	lsls	r7, r5, #29
 8002e90:	08db      	lsrs	r3, r3, #3
 8002e92:	431f      	orrs	r7, r3
 8002e94:	08ed      	lsrs	r5, r5, #3
 8002e96:	2301      	movs	r3, #1
 8002e98:	e6d0      	b.n	8002c3c <__aeabi_dsub+0x4b0>
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	000007ff 	.word	0x000007ff
 8002ea0:	000007fe 	.word	0x000007fe
 8002ea4:	ff7fffff 	.word	0xff7fffff
 8002ea8:	465b      	mov	r3, fp
 8002eaa:	08d2      	lsrs	r2, r2, #3
 8002eac:	075f      	lsls	r7, r3, #29
 8002eae:	4666      	mov	r6, ip
 8002eb0:	4317      	orrs	r7, r2
 8002eb2:	08dd      	lsrs	r5, r3, #3
 8002eb4:	e566      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002eb6:	0025      	movs	r5, r4
 8002eb8:	3b20      	subs	r3, #32
 8002eba:	40dd      	lsrs	r5, r3
 8002ebc:	4663      	mov	r3, ip
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d005      	beq.n	8002ece <__aeabi_dsub+0x742>
 8002ec2:	2340      	movs	r3, #64	@ 0x40
 8002ec4:	4661      	mov	r1, ip
 8002ec6:	1a5b      	subs	r3, r3, r1
 8002ec8:	409c      	lsls	r4, r3
 8002eca:	4320      	orrs	r0, r4
 8002ecc:	4680      	mov	r8, r0
 8002ece:	4647      	mov	r7, r8
 8002ed0:	1e7b      	subs	r3, r7, #1
 8002ed2:	419f      	sbcs	r7, r3
 8002ed4:	432f      	orrs	r7, r5
 8002ed6:	e5a0      	b.n	8002a1a <__aeabi_dsub+0x28e>
 8002ed8:	2120      	movs	r1, #32
 8002eda:	2700      	movs	r7, #0
 8002edc:	1a09      	subs	r1, r1, r0
 8002ede:	e4d2      	b.n	8002886 <__aeabi_dsub+0xfa>
 8002ee0:	2f00      	cmp	r7, #0
 8002ee2:	d100      	bne.n	8002ee6 <__aeabi_dsub+0x75a>
 8002ee4:	e713      	b.n	8002d0e <__aeabi_dsub+0x582>
 8002ee6:	465c      	mov	r4, fp
 8002ee8:	0017      	movs	r7, r2
 8002eea:	2500      	movs	r5, #0
 8002eec:	e5f6      	b.n	8002adc <__aeabi_dsub+0x350>
 8002eee:	08d7      	lsrs	r7, r2, #3
 8002ef0:	0749      	lsls	r1, r1, #29
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	430f      	orrs	r7, r1
 8002ef6:	092d      	lsrs	r5, r5, #4
 8002ef8:	e6a0      	b.n	8002c3c <__aeabi_dsub+0x4b0>
 8002efa:	0007      	movs	r7, r0
 8002efc:	e542      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002efe:	465b      	mov	r3, fp
 8002f00:	2601      	movs	r6, #1
 8002f02:	075f      	lsls	r7, r3, #29
 8002f04:	08dd      	lsrs	r5, r3, #3
 8002f06:	4663      	mov	r3, ip
 8002f08:	08d2      	lsrs	r2, r2, #3
 8002f0a:	4317      	orrs	r7, r2
 8002f0c:	401e      	ands	r6, r3
 8002f0e:	e539      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002f10:	465b      	mov	r3, fp
 8002f12:	08d2      	lsrs	r2, r2, #3
 8002f14:	075f      	lsls	r7, r3, #29
 8002f16:	4317      	orrs	r7, r2
 8002f18:	08dd      	lsrs	r5, r3, #3
 8002f1a:	e533      	b.n	8002984 <__aeabi_dsub+0x1f8>
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002f98 <__aeabi_dsub+0x80c>)
 8002f1e:	08db      	lsrs	r3, r3, #3
 8002f20:	4022      	ands	r2, r4
 8002f22:	0757      	lsls	r7, r2, #29
 8002f24:	0252      	lsls	r2, r2, #9
 8002f26:	2501      	movs	r5, #1
 8002f28:	431f      	orrs	r7, r3
 8002f2a:	0b14      	lsrs	r4, r2, #12
 8002f2c:	e5c2      	b.n	8002ab4 <__aeabi_dsub+0x328>
 8002f2e:	000e      	movs	r6, r1
 8002f30:	2001      	movs	r0, #1
 8002f32:	e65f      	b.n	8002bf4 <__aeabi_dsub+0x468>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <__aeabi_dsub+0x7c8>
 8002f38:	464b      	mov	r3, r9
 8002f3a:	1b5b      	subs	r3, r3, r5
 8002f3c:	469c      	mov	ip, r3
 8002f3e:	2d00      	cmp	r5, #0
 8002f40:	d100      	bne.n	8002f44 <__aeabi_dsub+0x7b8>
 8002f42:	e548      	b.n	80029d6 <__aeabi_dsub+0x24a>
 8002f44:	2701      	movs	r7, #1
 8002f46:	2b38      	cmp	r3, #56	@ 0x38
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x7c0>
 8002f4a:	e566      	b.n	8002a1a <__aeabi_dsub+0x28e>
 8002f4c:	2380      	movs	r3, #128	@ 0x80
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	431c      	orrs	r4, r3
 8002f52:	e550      	b.n	80029f6 <__aeabi_dsub+0x26a>
 8002f54:	1c6b      	adds	r3, r5, #1
 8002f56:	4d11      	ldr	r5, [pc, #68]	@ (8002f9c <__aeabi_dsub+0x810>)
 8002f58:	422b      	tst	r3, r5
 8002f5a:	d000      	beq.n	8002f5e <__aeabi_dsub+0x7d2>
 8002f5c:	e673      	b.n	8002c46 <__aeabi_dsub+0x4ba>
 8002f5e:	4659      	mov	r1, fp
 8002f60:	0023      	movs	r3, r4
 8002f62:	4311      	orrs	r1, r2
 8002f64:	468a      	mov	sl, r1
 8002f66:	4303      	orrs	r3, r0
 8002f68:	e600      	b.n	8002b6c <__aeabi_dsub+0x3e0>
 8002f6a:	0767      	lsls	r7, r4, #29
 8002f6c:	08c0      	lsrs	r0, r0, #3
 8002f6e:	2300      	movs	r3, #0
 8002f70:	4307      	orrs	r7, r0
 8002f72:	08e5      	lsrs	r5, r4, #3
 8002f74:	e662      	b.n	8002c3c <__aeabi_dsub+0x4b0>
 8002f76:	0764      	lsls	r4, r4, #29
 8002f78:	08ff      	lsrs	r7, r7, #3
 8002f7a:	4327      	orrs	r7, r4
 8002f7c:	0905      	lsrs	r5, r0, #4
 8002f7e:	e65d      	b.n	8002c3c <__aeabi_dsub+0x4b0>
 8002f80:	08d2      	lsrs	r2, r2, #3
 8002f82:	0749      	lsls	r1, r1, #29
 8002f84:	4311      	orrs	r1, r2
 8002f86:	000f      	movs	r7, r1
 8002f88:	2302      	movs	r3, #2
 8002f8a:	092d      	lsrs	r5, r5, #4
 8002f8c:	e656      	b.n	8002c3c <__aeabi_dsub+0x4b0>
 8002f8e:	0007      	movs	r7, r0
 8002f90:	e5a4      	b.n	8002adc <__aeabi_dsub+0x350>
 8002f92:	0038      	movs	r0, r7
 8002f94:	e48f      	b.n	80028b6 <__aeabi_dsub+0x12a>
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	ff7fffff 	.word	0xff7fffff
 8002f9c:	000007fe 	.word	0x000007fe

08002fa0 <__aeabi_dcmpun>:
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	46c6      	mov	lr, r8
 8002fa4:	031e      	lsls	r6, r3, #12
 8002fa6:	0b36      	lsrs	r6, r6, #12
 8002fa8:	46b0      	mov	r8, r6
 8002faa:	4e0d      	ldr	r6, [pc, #52]	@ (8002fe0 <__aeabi_dcmpun+0x40>)
 8002fac:	030c      	lsls	r4, r1, #12
 8002fae:	004d      	lsls	r5, r1, #1
 8002fb0:	005f      	lsls	r7, r3, #1
 8002fb2:	b500      	push	{lr}
 8002fb4:	0b24      	lsrs	r4, r4, #12
 8002fb6:	0d6d      	lsrs	r5, r5, #21
 8002fb8:	0d7f      	lsrs	r7, r7, #21
 8002fba:	42b5      	cmp	r5, r6
 8002fbc:	d00b      	beq.n	8002fd6 <__aeabi_dcmpun+0x36>
 8002fbe:	4908      	ldr	r1, [pc, #32]	@ (8002fe0 <__aeabi_dcmpun+0x40>)
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	428f      	cmp	r7, r1
 8002fc4:	d104      	bne.n	8002fd0 <__aeabi_dcmpun+0x30>
 8002fc6:	4646      	mov	r6, r8
 8002fc8:	4316      	orrs	r6, r2
 8002fca:	0030      	movs	r0, r6
 8002fcc:	1e43      	subs	r3, r0, #1
 8002fce:	4198      	sbcs	r0, r3
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	46b8      	mov	r8, r7
 8002fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd6:	4304      	orrs	r4, r0
 8002fd8:	2001      	movs	r0, #1
 8002fda:	2c00      	cmp	r4, #0
 8002fdc:	d1f8      	bne.n	8002fd0 <__aeabi_dcmpun+0x30>
 8002fde:	e7ee      	b.n	8002fbe <__aeabi_dcmpun+0x1e>
 8002fe0:	000007ff 	.word	0x000007ff

08002fe4 <__aeabi_d2iz>:
 8002fe4:	000b      	movs	r3, r1
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	4d16      	ldr	r5, [pc, #88]	@ (8003044 <__aeabi_d2iz+0x60>)
 8002fec:	030c      	lsls	r4, r1, #12
 8002fee:	b082      	sub	sp, #8
 8002ff0:	0049      	lsls	r1, r1, #1
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	9200      	str	r2, [sp, #0]
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	0b24      	lsrs	r4, r4, #12
 8002ffa:	0d49      	lsrs	r1, r1, #21
 8002ffc:	0fde      	lsrs	r6, r3, #31
 8002ffe:	42a9      	cmp	r1, r5
 8003000:	dd04      	ble.n	800300c <__aeabi_d2iz+0x28>
 8003002:	4811      	ldr	r0, [pc, #68]	@ (8003048 <__aeabi_d2iz+0x64>)
 8003004:	4281      	cmp	r1, r0
 8003006:	dd03      	ble.n	8003010 <__aeabi_d2iz+0x2c>
 8003008:	4b10      	ldr	r3, [pc, #64]	@ (800304c <__aeabi_d2iz+0x68>)
 800300a:	18f0      	adds	r0, r6, r3
 800300c:	b002      	add	sp, #8
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	2080      	movs	r0, #128	@ 0x80
 8003012:	0340      	lsls	r0, r0, #13
 8003014:	4320      	orrs	r0, r4
 8003016:	4c0e      	ldr	r4, [pc, #56]	@ (8003050 <__aeabi_d2iz+0x6c>)
 8003018:	1a64      	subs	r4, r4, r1
 800301a:	2c1f      	cmp	r4, #31
 800301c:	dd08      	ble.n	8003030 <__aeabi_d2iz+0x4c>
 800301e:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <__aeabi_d2iz+0x70>)
 8003020:	1a5b      	subs	r3, r3, r1
 8003022:	40d8      	lsrs	r0, r3
 8003024:	0003      	movs	r3, r0
 8003026:	4258      	negs	r0, r3
 8003028:	2e00      	cmp	r6, #0
 800302a:	d1ef      	bne.n	800300c <__aeabi_d2iz+0x28>
 800302c:	0018      	movs	r0, r3
 800302e:	e7ed      	b.n	800300c <__aeabi_d2iz+0x28>
 8003030:	4b09      	ldr	r3, [pc, #36]	@ (8003058 <__aeabi_d2iz+0x74>)
 8003032:	9a00      	ldr	r2, [sp, #0]
 8003034:	469c      	mov	ip, r3
 8003036:	0003      	movs	r3, r0
 8003038:	4461      	add	r1, ip
 800303a:	408b      	lsls	r3, r1
 800303c:	40e2      	lsrs	r2, r4
 800303e:	4313      	orrs	r3, r2
 8003040:	e7f1      	b.n	8003026 <__aeabi_d2iz+0x42>
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	000003fe 	.word	0x000003fe
 8003048:	0000041d 	.word	0x0000041d
 800304c:	7fffffff 	.word	0x7fffffff
 8003050:	00000433 	.word	0x00000433
 8003054:	00000413 	.word	0x00000413
 8003058:	fffffbed 	.word	0xfffffbed

0800305c <__aeabi_i2d>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	2800      	cmp	r0, #0
 8003060:	d016      	beq.n	8003090 <__aeabi_i2d+0x34>
 8003062:	17c3      	asrs	r3, r0, #31
 8003064:	18c5      	adds	r5, r0, r3
 8003066:	405d      	eors	r5, r3
 8003068:	0fc4      	lsrs	r4, r0, #31
 800306a:	0028      	movs	r0, r5
 800306c:	f000 f8ca 	bl	8003204 <__clzsi2>
 8003070:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <__aeabi_i2d+0x58>)
 8003072:	1a1b      	subs	r3, r3, r0
 8003074:	055b      	lsls	r3, r3, #21
 8003076:	0d5b      	lsrs	r3, r3, #21
 8003078:	280a      	cmp	r0, #10
 800307a:	dc14      	bgt.n	80030a6 <__aeabi_i2d+0x4a>
 800307c:	0002      	movs	r2, r0
 800307e:	002e      	movs	r6, r5
 8003080:	3215      	adds	r2, #21
 8003082:	4096      	lsls	r6, r2
 8003084:	220b      	movs	r2, #11
 8003086:	1a12      	subs	r2, r2, r0
 8003088:	40d5      	lsrs	r5, r2
 800308a:	032d      	lsls	r5, r5, #12
 800308c:	0b2d      	lsrs	r5, r5, #12
 800308e:	e003      	b.n	8003098 <__aeabi_i2d+0x3c>
 8003090:	2400      	movs	r4, #0
 8003092:	2300      	movs	r3, #0
 8003094:	2500      	movs	r5, #0
 8003096:	2600      	movs	r6, #0
 8003098:	051b      	lsls	r3, r3, #20
 800309a:	432b      	orrs	r3, r5
 800309c:	07e4      	lsls	r4, r4, #31
 800309e:	4323      	orrs	r3, r4
 80030a0:	0030      	movs	r0, r6
 80030a2:	0019      	movs	r1, r3
 80030a4:	bd70      	pop	{r4, r5, r6, pc}
 80030a6:	380b      	subs	r0, #11
 80030a8:	4085      	lsls	r5, r0
 80030aa:	032d      	lsls	r5, r5, #12
 80030ac:	2600      	movs	r6, #0
 80030ae:	0b2d      	lsrs	r5, r5, #12
 80030b0:	e7f2      	b.n	8003098 <__aeabi_i2d+0x3c>
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	0000041e 	.word	0x0000041e

080030b8 <__aeabi_ui2d>:
 80030b8:	b510      	push	{r4, lr}
 80030ba:	1e04      	subs	r4, r0, #0
 80030bc:	d010      	beq.n	80030e0 <__aeabi_ui2d+0x28>
 80030be:	f000 f8a1 	bl	8003204 <__clzsi2>
 80030c2:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <__aeabi_ui2d+0x44>)
 80030c4:	1a1b      	subs	r3, r3, r0
 80030c6:	055b      	lsls	r3, r3, #21
 80030c8:	0d5b      	lsrs	r3, r3, #21
 80030ca:	280a      	cmp	r0, #10
 80030cc:	dc0f      	bgt.n	80030ee <__aeabi_ui2d+0x36>
 80030ce:	220b      	movs	r2, #11
 80030d0:	0021      	movs	r1, r4
 80030d2:	1a12      	subs	r2, r2, r0
 80030d4:	40d1      	lsrs	r1, r2
 80030d6:	3015      	adds	r0, #21
 80030d8:	030a      	lsls	r2, r1, #12
 80030da:	4084      	lsls	r4, r0
 80030dc:	0b12      	lsrs	r2, r2, #12
 80030de:	e001      	b.n	80030e4 <__aeabi_ui2d+0x2c>
 80030e0:	2300      	movs	r3, #0
 80030e2:	2200      	movs	r2, #0
 80030e4:	051b      	lsls	r3, r3, #20
 80030e6:	4313      	orrs	r3, r2
 80030e8:	0020      	movs	r0, r4
 80030ea:	0019      	movs	r1, r3
 80030ec:	bd10      	pop	{r4, pc}
 80030ee:	0022      	movs	r2, r4
 80030f0:	380b      	subs	r0, #11
 80030f2:	4082      	lsls	r2, r0
 80030f4:	0312      	lsls	r2, r2, #12
 80030f6:	2400      	movs	r4, #0
 80030f8:	0b12      	lsrs	r2, r2, #12
 80030fa:	e7f3      	b.n	80030e4 <__aeabi_ui2d+0x2c>
 80030fc:	0000041e 	.word	0x0000041e

08003100 <__aeabi_f2d>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	0242      	lsls	r2, r0, #9
 8003104:	0043      	lsls	r3, r0, #1
 8003106:	0fc4      	lsrs	r4, r0, #31
 8003108:	20fe      	movs	r0, #254	@ 0xfe
 800310a:	0e1b      	lsrs	r3, r3, #24
 800310c:	1c59      	adds	r1, r3, #1
 800310e:	0a55      	lsrs	r5, r2, #9
 8003110:	4208      	tst	r0, r1
 8003112:	d00c      	beq.n	800312e <__aeabi_f2d+0x2e>
 8003114:	21e0      	movs	r1, #224	@ 0xe0
 8003116:	0089      	lsls	r1, r1, #2
 8003118:	468c      	mov	ip, r1
 800311a:	076d      	lsls	r5, r5, #29
 800311c:	0b12      	lsrs	r2, r2, #12
 800311e:	4463      	add	r3, ip
 8003120:	051b      	lsls	r3, r3, #20
 8003122:	4313      	orrs	r3, r2
 8003124:	07e4      	lsls	r4, r4, #31
 8003126:	4323      	orrs	r3, r4
 8003128:	0028      	movs	r0, r5
 800312a:	0019      	movs	r1, r3
 800312c:	bd70      	pop	{r4, r5, r6, pc}
 800312e:	2b00      	cmp	r3, #0
 8003130:	d114      	bne.n	800315c <__aeabi_f2d+0x5c>
 8003132:	2d00      	cmp	r5, #0
 8003134:	d01b      	beq.n	800316e <__aeabi_f2d+0x6e>
 8003136:	0028      	movs	r0, r5
 8003138:	f000 f864 	bl	8003204 <__clzsi2>
 800313c:	280a      	cmp	r0, #10
 800313e:	dc1c      	bgt.n	800317a <__aeabi_f2d+0x7a>
 8003140:	230b      	movs	r3, #11
 8003142:	002a      	movs	r2, r5
 8003144:	1a1b      	subs	r3, r3, r0
 8003146:	40da      	lsrs	r2, r3
 8003148:	0003      	movs	r3, r0
 800314a:	3315      	adds	r3, #21
 800314c:	409d      	lsls	r5, r3
 800314e:	4b0e      	ldr	r3, [pc, #56]	@ (8003188 <__aeabi_f2d+0x88>)
 8003150:	0312      	lsls	r2, r2, #12
 8003152:	1a1b      	subs	r3, r3, r0
 8003154:	055b      	lsls	r3, r3, #21
 8003156:	0b12      	lsrs	r2, r2, #12
 8003158:	0d5b      	lsrs	r3, r3, #21
 800315a:	e7e1      	b.n	8003120 <__aeabi_f2d+0x20>
 800315c:	2d00      	cmp	r5, #0
 800315e:	d009      	beq.n	8003174 <__aeabi_f2d+0x74>
 8003160:	0b13      	lsrs	r3, r2, #12
 8003162:	2280      	movs	r2, #128	@ 0x80
 8003164:	0312      	lsls	r2, r2, #12
 8003166:	431a      	orrs	r2, r3
 8003168:	076d      	lsls	r5, r5, #29
 800316a:	4b08      	ldr	r3, [pc, #32]	@ (800318c <__aeabi_f2d+0x8c>)
 800316c:	e7d8      	b.n	8003120 <__aeabi_f2d+0x20>
 800316e:	2300      	movs	r3, #0
 8003170:	2200      	movs	r2, #0
 8003172:	e7d5      	b.n	8003120 <__aeabi_f2d+0x20>
 8003174:	2200      	movs	r2, #0
 8003176:	4b05      	ldr	r3, [pc, #20]	@ (800318c <__aeabi_f2d+0x8c>)
 8003178:	e7d2      	b.n	8003120 <__aeabi_f2d+0x20>
 800317a:	0003      	movs	r3, r0
 800317c:	002a      	movs	r2, r5
 800317e:	3b0b      	subs	r3, #11
 8003180:	409a      	lsls	r2, r3
 8003182:	2500      	movs	r5, #0
 8003184:	e7e3      	b.n	800314e <__aeabi_f2d+0x4e>
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	00000389 	.word	0x00000389
 800318c:	000007ff 	.word	0x000007ff

08003190 <__aeabi_cfrcmple>:
 8003190:	4684      	mov	ip, r0
 8003192:	0008      	movs	r0, r1
 8003194:	4661      	mov	r1, ip
 8003196:	e7ff      	b.n	8003198 <__aeabi_cfcmpeq>

08003198 <__aeabi_cfcmpeq>:
 8003198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800319a:	f000 f8cd 	bl	8003338 <__lesf2>
 800319e:	2800      	cmp	r0, #0
 80031a0:	d401      	bmi.n	80031a6 <__aeabi_cfcmpeq+0xe>
 80031a2:	2100      	movs	r1, #0
 80031a4:	42c8      	cmn	r0, r1
 80031a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080031a8 <__aeabi_fcmpeq>:
 80031a8:	b510      	push	{r4, lr}
 80031aa:	f000 f855 	bl	8003258 <__eqsf2>
 80031ae:	4240      	negs	r0, r0
 80031b0:	3001      	adds	r0, #1
 80031b2:	bd10      	pop	{r4, pc}

080031b4 <__aeabi_fcmplt>:
 80031b4:	b510      	push	{r4, lr}
 80031b6:	f000 f8bf 	bl	8003338 <__lesf2>
 80031ba:	2800      	cmp	r0, #0
 80031bc:	db01      	blt.n	80031c2 <__aeabi_fcmplt+0xe>
 80031be:	2000      	movs	r0, #0
 80031c0:	bd10      	pop	{r4, pc}
 80031c2:	2001      	movs	r0, #1
 80031c4:	bd10      	pop	{r4, pc}
 80031c6:	46c0      	nop			@ (mov r8, r8)

080031c8 <__aeabi_fcmple>:
 80031c8:	b510      	push	{r4, lr}
 80031ca:	f000 f8b5 	bl	8003338 <__lesf2>
 80031ce:	2800      	cmp	r0, #0
 80031d0:	dd01      	ble.n	80031d6 <__aeabi_fcmple+0xe>
 80031d2:	2000      	movs	r0, #0
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	2001      	movs	r0, #1
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	46c0      	nop			@ (mov r8, r8)

080031dc <__aeabi_fcmpgt>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	f000 f863 	bl	80032a8 <__gesf2>
 80031e2:	2800      	cmp	r0, #0
 80031e4:	dc01      	bgt.n	80031ea <__aeabi_fcmpgt+0xe>
 80031e6:	2000      	movs	r0, #0
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	2001      	movs	r0, #1
 80031ec:	bd10      	pop	{r4, pc}
 80031ee:	46c0      	nop			@ (mov r8, r8)

080031f0 <__aeabi_fcmpge>:
 80031f0:	b510      	push	{r4, lr}
 80031f2:	f000 f859 	bl	80032a8 <__gesf2>
 80031f6:	2800      	cmp	r0, #0
 80031f8:	da01      	bge.n	80031fe <__aeabi_fcmpge+0xe>
 80031fa:	2000      	movs	r0, #0
 80031fc:	bd10      	pop	{r4, pc}
 80031fe:	2001      	movs	r0, #1
 8003200:	bd10      	pop	{r4, pc}
 8003202:	46c0      	nop			@ (mov r8, r8)

08003204 <__clzsi2>:
 8003204:	211c      	movs	r1, #28
 8003206:	2301      	movs	r3, #1
 8003208:	041b      	lsls	r3, r3, #16
 800320a:	4298      	cmp	r0, r3
 800320c:	d301      	bcc.n	8003212 <__clzsi2+0xe>
 800320e:	0c00      	lsrs	r0, r0, #16
 8003210:	3910      	subs	r1, #16
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	4298      	cmp	r0, r3
 8003216:	d301      	bcc.n	800321c <__clzsi2+0x18>
 8003218:	0a00      	lsrs	r0, r0, #8
 800321a:	3908      	subs	r1, #8
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	4298      	cmp	r0, r3
 8003220:	d301      	bcc.n	8003226 <__clzsi2+0x22>
 8003222:	0900      	lsrs	r0, r0, #4
 8003224:	3904      	subs	r1, #4
 8003226:	a202      	add	r2, pc, #8	@ (adr r2, 8003230 <__clzsi2+0x2c>)
 8003228:	5c10      	ldrb	r0, [r2, r0]
 800322a:	1840      	adds	r0, r0, r1
 800322c:	4770      	bx	lr
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	02020304 	.word	0x02020304
 8003234:	01010101 	.word	0x01010101
	...

08003240 <__clzdi2>:
 8003240:	b510      	push	{r4, lr}
 8003242:	2900      	cmp	r1, #0
 8003244:	d103      	bne.n	800324e <__clzdi2+0xe>
 8003246:	f7ff ffdd 	bl	8003204 <__clzsi2>
 800324a:	3020      	adds	r0, #32
 800324c:	e002      	b.n	8003254 <__clzdi2+0x14>
 800324e:	0008      	movs	r0, r1
 8003250:	f7ff ffd8 	bl	8003204 <__clzsi2>
 8003254:	bd10      	pop	{r4, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)

08003258 <__eqsf2>:
 8003258:	b570      	push	{r4, r5, r6, lr}
 800325a:	0042      	lsls	r2, r0, #1
 800325c:	024e      	lsls	r6, r1, #9
 800325e:	004c      	lsls	r4, r1, #1
 8003260:	0245      	lsls	r5, r0, #9
 8003262:	0a6d      	lsrs	r5, r5, #9
 8003264:	0e12      	lsrs	r2, r2, #24
 8003266:	0fc3      	lsrs	r3, r0, #31
 8003268:	0a76      	lsrs	r6, r6, #9
 800326a:	0e24      	lsrs	r4, r4, #24
 800326c:	0fc9      	lsrs	r1, r1, #31
 800326e:	2aff      	cmp	r2, #255	@ 0xff
 8003270:	d010      	beq.n	8003294 <__eqsf2+0x3c>
 8003272:	2cff      	cmp	r4, #255	@ 0xff
 8003274:	d00c      	beq.n	8003290 <__eqsf2+0x38>
 8003276:	2001      	movs	r0, #1
 8003278:	42a2      	cmp	r2, r4
 800327a:	d10a      	bne.n	8003292 <__eqsf2+0x3a>
 800327c:	42b5      	cmp	r5, r6
 800327e:	d108      	bne.n	8003292 <__eqsf2+0x3a>
 8003280:	428b      	cmp	r3, r1
 8003282:	d00f      	beq.n	80032a4 <__eqsf2+0x4c>
 8003284:	2a00      	cmp	r2, #0
 8003286:	d104      	bne.n	8003292 <__eqsf2+0x3a>
 8003288:	0028      	movs	r0, r5
 800328a:	1e43      	subs	r3, r0, #1
 800328c:	4198      	sbcs	r0, r3
 800328e:	e000      	b.n	8003292 <__eqsf2+0x3a>
 8003290:	2001      	movs	r0, #1
 8003292:	bd70      	pop	{r4, r5, r6, pc}
 8003294:	2001      	movs	r0, #1
 8003296:	2cff      	cmp	r4, #255	@ 0xff
 8003298:	d1fb      	bne.n	8003292 <__eqsf2+0x3a>
 800329a:	4335      	orrs	r5, r6
 800329c:	d1f9      	bne.n	8003292 <__eqsf2+0x3a>
 800329e:	404b      	eors	r3, r1
 80032a0:	0018      	movs	r0, r3
 80032a2:	e7f6      	b.n	8003292 <__eqsf2+0x3a>
 80032a4:	2000      	movs	r0, #0
 80032a6:	e7f4      	b.n	8003292 <__eqsf2+0x3a>

080032a8 <__gesf2>:
 80032a8:	b530      	push	{r4, r5, lr}
 80032aa:	0042      	lsls	r2, r0, #1
 80032ac:	0244      	lsls	r4, r0, #9
 80032ae:	024d      	lsls	r5, r1, #9
 80032b0:	0fc3      	lsrs	r3, r0, #31
 80032b2:	0048      	lsls	r0, r1, #1
 80032b4:	0a64      	lsrs	r4, r4, #9
 80032b6:	0e12      	lsrs	r2, r2, #24
 80032b8:	0a6d      	lsrs	r5, r5, #9
 80032ba:	0e00      	lsrs	r0, r0, #24
 80032bc:	0fc9      	lsrs	r1, r1, #31
 80032be:	2aff      	cmp	r2, #255	@ 0xff
 80032c0:	d018      	beq.n	80032f4 <__gesf2+0x4c>
 80032c2:	28ff      	cmp	r0, #255	@ 0xff
 80032c4:	d00a      	beq.n	80032dc <__gesf2+0x34>
 80032c6:	2a00      	cmp	r2, #0
 80032c8:	d11e      	bne.n	8003308 <__gesf2+0x60>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d10a      	bne.n	80032e4 <__gesf2+0x3c>
 80032ce:	2d00      	cmp	r5, #0
 80032d0:	d029      	beq.n	8003326 <__gesf2+0x7e>
 80032d2:	2c00      	cmp	r4, #0
 80032d4:	d12d      	bne.n	8003332 <__gesf2+0x8a>
 80032d6:	0048      	lsls	r0, r1, #1
 80032d8:	3801      	subs	r0, #1
 80032da:	bd30      	pop	{r4, r5, pc}
 80032dc:	2d00      	cmp	r5, #0
 80032de:	d125      	bne.n	800332c <__gesf2+0x84>
 80032e0:	2a00      	cmp	r2, #0
 80032e2:	d101      	bne.n	80032e8 <__gesf2+0x40>
 80032e4:	2c00      	cmp	r4, #0
 80032e6:	d0f6      	beq.n	80032d6 <__gesf2+0x2e>
 80032e8:	428b      	cmp	r3, r1
 80032ea:	d019      	beq.n	8003320 <__gesf2+0x78>
 80032ec:	2001      	movs	r0, #1
 80032ee:	425b      	negs	r3, r3
 80032f0:	4318      	orrs	r0, r3
 80032f2:	e7f2      	b.n	80032da <__gesf2+0x32>
 80032f4:	2c00      	cmp	r4, #0
 80032f6:	d119      	bne.n	800332c <__gesf2+0x84>
 80032f8:	28ff      	cmp	r0, #255	@ 0xff
 80032fa:	d1f7      	bne.n	80032ec <__gesf2+0x44>
 80032fc:	2d00      	cmp	r5, #0
 80032fe:	d115      	bne.n	800332c <__gesf2+0x84>
 8003300:	2000      	movs	r0, #0
 8003302:	428b      	cmp	r3, r1
 8003304:	d1f2      	bne.n	80032ec <__gesf2+0x44>
 8003306:	e7e8      	b.n	80032da <__gesf2+0x32>
 8003308:	2800      	cmp	r0, #0
 800330a:	d0ef      	beq.n	80032ec <__gesf2+0x44>
 800330c:	428b      	cmp	r3, r1
 800330e:	d1ed      	bne.n	80032ec <__gesf2+0x44>
 8003310:	4282      	cmp	r2, r0
 8003312:	dceb      	bgt.n	80032ec <__gesf2+0x44>
 8003314:	db04      	blt.n	8003320 <__gesf2+0x78>
 8003316:	42ac      	cmp	r4, r5
 8003318:	d8e8      	bhi.n	80032ec <__gesf2+0x44>
 800331a:	2000      	movs	r0, #0
 800331c:	42ac      	cmp	r4, r5
 800331e:	d2dc      	bcs.n	80032da <__gesf2+0x32>
 8003320:	0058      	lsls	r0, r3, #1
 8003322:	3801      	subs	r0, #1
 8003324:	e7d9      	b.n	80032da <__gesf2+0x32>
 8003326:	2c00      	cmp	r4, #0
 8003328:	d0d7      	beq.n	80032da <__gesf2+0x32>
 800332a:	e7df      	b.n	80032ec <__gesf2+0x44>
 800332c:	2002      	movs	r0, #2
 800332e:	4240      	negs	r0, r0
 8003330:	e7d3      	b.n	80032da <__gesf2+0x32>
 8003332:	428b      	cmp	r3, r1
 8003334:	d1da      	bne.n	80032ec <__gesf2+0x44>
 8003336:	e7ee      	b.n	8003316 <__gesf2+0x6e>

08003338 <__lesf2>:
 8003338:	b530      	push	{r4, r5, lr}
 800333a:	0042      	lsls	r2, r0, #1
 800333c:	0244      	lsls	r4, r0, #9
 800333e:	024d      	lsls	r5, r1, #9
 8003340:	0fc3      	lsrs	r3, r0, #31
 8003342:	0048      	lsls	r0, r1, #1
 8003344:	0a64      	lsrs	r4, r4, #9
 8003346:	0e12      	lsrs	r2, r2, #24
 8003348:	0a6d      	lsrs	r5, r5, #9
 800334a:	0e00      	lsrs	r0, r0, #24
 800334c:	0fc9      	lsrs	r1, r1, #31
 800334e:	2aff      	cmp	r2, #255	@ 0xff
 8003350:	d017      	beq.n	8003382 <__lesf2+0x4a>
 8003352:	28ff      	cmp	r0, #255	@ 0xff
 8003354:	d00a      	beq.n	800336c <__lesf2+0x34>
 8003356:	2a00      	cmp	r2, #0
 8003358:	d11b      	bne.n	8003392 <__lesf2+0x5a>
 800335a:	2800      	cmp	r0, #0
 800335c:	d10a      	bne.n	8003374 <__lesf2+0x3c>
 800335e:	2d00      	cmp	r5, #0
 8003360:	d01d      	beq.n	800339e <__lesf2+0x66>
 8003362:	2c00      	cmp	r4, #0
 8003364:	d12d      	bne.n	80033c2 <__lesf2+0x8a>
 8003366:	0048      	lsls	r0, r1, #1
 8003368:	3801      	subs	r0, #1
 800336a:	e011      	b.n	8003390 <__lesf2+0x58>
 800336c:	2d00      	cmp	r5, #0
 800336e:	d10e      	bne.n	800338e <__lesf2+0x56>
 8003370:	2a00      	cmp	r2, #0
 8003372:	d101      	bne.n	8003378 <__lesf2+0x40>
 8003374:	2c00      	cmp	r4, #0
 8003376:	d0f6      	beq.n	8003366 <__lesf2+0x2e>
 8003378:	428b      	cmp	r3, r1
 800337a:	d10c      	bne.n	8003396 <__lesf2+0x5e>
 800337c:	0058      	lsls	r0, r3, #1
 800337e:	3801      	subs	r0, #1
 8003380:	e006      	b.n	8003390 <__lesf2+0x58>
 8003382:	2c00      	cmp	r4, #0
 8003384:	d103      	bne.n	800338e <__lesf2+0x56>
 8003386:	28ff      	cmp	r0, #255	@ 0xff
 8003388:	d105      	bne.n	8003396 <__lesf2+0x5e>
 800338a:	2d00      	cmp	r5, #0
 800338c:	d015      	beq.n	80033ba <__lesf2+0x82>
 800338e:	2002      	movs	r0, #2
 8003390:	bd30      	pop	{r4, r5, pc}
 8003392:	2800      	cmp	r0, #0
 8003394:	d106      	bne.n	80033a4 <__lesf2+0x6c>
 8003396:	2001      	movs	r0, #1
 8003398:	425b      	negs	r3, r3
 800339a:	4318      	orrs	r0, r3
 800339c:	e7f8      	b.n	8003390 <__lesf2+0x58>
 800339e:	2c00      	cmp	r4, #0
 80033a0:	d0f6      	beq.n	8003390 <__lesf2+0x58>
 80033a2:	e7f8      	b.n	8003396 <__lesf2+0x5e>
 80033a4:	428b      	cmp	r3, r1
 80033a6:	d1f6      	bne.n	8003396 <__lesf2+0x5e>
 80033a8:	4282      	cmp	r2, r0
 80033aa:	dcf4      	bgt.n	8003396 <__lesf2+0x5e>
 80033ac:	dbe6      	blt.n	800337c <__lesf2+0x44>
 80033ae:	42ac      	cmp	r4, r5
 80033b0:	d8f1      	bhi.n	8003396 <__lesf2+0x5e>
 80033b2:	2000      	movs	r0, #0
 80033b4:	42ac      	cmp	r4, r5
 80033b6:	d2eb      	bcs.n	8003390 <__lesf2+0x58>
 80033b8:	e7e0      	b.n	800337c <__lesf2+0x44>
 80033ba:	2000      	movs	r0, #0
 80033bc:	428b      	cmp	r3, r1
 80033be:	d1ea      	bne.n	8003396 <__lesf2+0x5e>
 80033c0:	e7e6      	b.n	8003390 <__lesf2+0x58>
 80033c2:	428b      	cmp	r3, r1
 80033c4:	d1e7      	bne.n	8003396 <__lesf2+0x5e>
 80033c6:	e7f2      	b.n	80033ae <__lesf2+0x76>

080033c8 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 80033d0:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <DS3231_Init+0x30>)
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f000 f8bf 	bl	800355a <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 80033dc:	2000      	movs	r0, #0
 80033de:	f000 f879 	bl	80034d4 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 80033e2:	f000 f8e1 	bl	80035a8 <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 80033e6:	f000 f89e 	bl	8003526 <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80033ea:	2001      	movs	r0, #1
 80033ec:	f000 f84c 	bl	8003488 <DS3231_SetInterruptMode>
}
 80033f0:	46c0      	nop			@ (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b002      	add	sp, #8
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	200001fc 	.word	0x200001fc

080033fc <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af02      	add	r7, sp, #8
 8003402:	0002      	movs	r2, r0
 8003404:	1dfb      	adds	r3, r7, #7
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	1dbb      	adds	r3, r7, #6
 800340a:	1c0a      	adds	r2, r1, #0
 800340c:	701a      	strb	r2, [r3, #0]
	uint8_t bytes[2] = { regAddr, val };
 800340e:	210c      	movs	r1, #12
 8003410:	187b      	adds	r3, r7, r1
 8003412:	1dfa      	adds	r2, r7, #7
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	187b      	adds	r3, r7, r1
 800341a:	1dba      	adds	r2, r7, #6
 800341c:	7812      	ldrb	r2, [r2, #0]
 800341e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8003420:	4b06      	ldr	r3, [pc, #24]	@ (800343c <DS3231_SetRegByte+0x40>)
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	187a      	adds	r2, r7, r1
 8003426:	2301      	movs	r3, #1
 8003428:	425b      	negs	r3, r3
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2302      	movs	r3, #2
 800342e:	21d0      	movs	r1, #208	@ 0xd0
 8003430:	f001 ff1c 	bl	800526c <HAL_I2C_Master_Transmit>
}
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bd80      	pop	{r7, pc}
 800343c:	200001fc 	.word	0x200001fc

08003440 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b087      	sub	sp, #28
 8003444:	af02      	add	r7, sp, #8
 8003446:	0002      	movs	r2, r0
 8003448:	1dfb      	adds	r3, r7, #7
 800344a:	701a      	strb	r2, [r3, #0]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800344c:	4b0d      	ldr	r3, [pc, #52]	@ (8003484 <DS3231_GetRegByte+0x44>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	1dfa      	adds	r2, r7, #7
 8003452:	2301      	movs	r3, #1
 8003454:	425b      	negs	r3, r3
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2301      	movs	r3, #1
 800345a:	21d0      	movs	r1, #208	@ 0xd0
 800345c:	f001 ff06 	bl	800526c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8003460:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <DS3231_GetRegByte+0x44>)
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	240f      	movs	r4, #15
 8003466:	193a      	adds	r2, r7, r4
 8003468:	2301      	movs	r3, #1
 800346a:	425b      	negs	r3, r3
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2301      	movs	r3, #1
 8003470:	21d0      	movs	r1, #208	@ 0xd0
 8003472:	f002 f825 	bl	80054c0 <HAL_I2C_Master_Receive>
	return val;
 8003476:	193b      	adds	r3, r7, r4
 8003478:	781b      	ldrb	r3, [r3, #0]
}
 800347a:	0018      	movs	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	b005      	add	sp, #20
 8003480:	bd90      	pop	{r4, r7, pc}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	200001fc 	.word	0x200001fc

08003488 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8003488:	b5b0      	push	{r4, r5, r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	0002      	movs	r2, r0
 8003490:	1dfb      	adds	r3, r7, #7
 8003492:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8003494:	250f      	movs	r5, #15
 8003496:	197c      	adds	r4, r7, r5
 8003498:	200e      	movs	r0, #14
 800349a:	f7ff ffd1 	bl	8003440 <DS3231_GetRegByte>
 800349e:	0003      	movs	r3, r0
 80034a0:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80034a2:	197b      	adds	r3, r7, r5
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b25b      	sxtb	r3, r3
 80034a8:	2204      	movs	r2, #4
 80034aa:	4393      	bics	r3, r2
 80034ac:	b25a      	sxtb	r2, r3
 80034ae:	1dfb      	adds	r3, r7, #7
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	2104      	movs	r1, #4
 80034ba:	400b      	ands	r3, r1
 80034bc:	b25b      	sxtb	r3, r3
 80034be:	4313      	orrs	r3, r2
 80034c0:	b25b      	sxtb	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	0019      	movs	r1, r3
 80034c6:	200e      	movs	r0, #14
 80034c8:	f7ff ff98 	bl	80033fc <DS3231_SetRegByte>
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b004      	add	sp, #16
 80034d2:	bdb0      	pop	{r4, r5, r7, pc}

080034d4 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 80034d4:	b5b0      	push	{r4, r5, r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	0002      	movs	r2, r0
 80034dc:	1dfb      	adds	r3, r7, #7
 80034de:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80034e0:	250f      	movs	r5, #15
 80034e2:	197c      	adds	r4, r7, r5
 80034e4:	200e      	movs	r0, #14
 80034e6:	f7ff ffab 	bl	8003440 <DS3231_GetRegByte>
 80034ea:	0003      	movs	r3, r0
 80034ec:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 80034ee:	197b      	adds	r3, r7, r5
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b25b      	sxtb	r3, r3
 80034f4:	2202      	movs	r2, #2
 80034f6:	4393      	bics	r3, r2
 80034f8:	b25a      	sxtb	r2, r3
 80034fa:	1dfb      	adds	r3, r7, #7
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	b25b      	sxtb	r3, r3
 8003500:	18db      	adds	r3, r3, r3
 8003502:	b25b      	sxtb	r3, r3
 8003504:	2102      	movs	r1, #2
 8003506:	400b      	ands	r3, r1
 8003508:	b25b      	sxtb	r3, r3
 800350a:	4313      	orrs	r3, r2
 800350c:	b25b      	sxtb	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	0019      	movs	r1, r3
 8003512:	200e      	movs	r0, #14
 8003514:	f7ff ff72 	bl	80033fc <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8003518:	2001      	movs	r0, #1
 800351a:	f7ff ffb5 	bl	8003488 <DS3231_SetInterruptMode>
}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	46bd      	mov	sp, r7
 8003522:	b004      	add	sp, #16
 8003524:	bdb0      	pop	{r4, r5, r7, pc}

08003526 <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 800352c:	200f      	movs	r0, #15
 800352e:	f7ff ff87 	bl	8003440 <DS3231_GetRegByte>
 8003532:	0003      	movs	r3, r0
 8003534:	0019      	movs	r1, r3
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	2202      	movs	r2, #2
 800353a:	4391      	bics	r1, r2
 800353c:	000a      	movs	r2, r1
 800353e:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8003540:	1dfb      	adds	r3, r7, #7
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2202      	movs	r2, #2
 8003546:	4393      	bics	r3, r2
 8003548:	b2db      	uxtb	r3, r3
 800354a:	0019      	movs	r1, r3
 800354c:	200f      	movs	r0, #15
 800354e:	f7ff ff55 	bl	80033fc <DS3231_SetRegByte>
}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}

0800355a <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800355a:	b5b0      	push	{r4, r5, r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	0002      	movs	r2, r0
 8003562:	1dfb      	adds	r3, r7, #7
 8003564:	701a      	strb	r2, [r3, #0]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8003566:	250f      	movs	r5, #15
 8003568:	197c      	adds	r4, r7, r5
 800356a:	200e      	movs	r0, #14
 800356c:	f7ff ff68 	bl	8003440 <DS3231_GetRegByte>
 8003570:	0003      	movs	r3, r0
 8003572:	7023      	strb	r3, [r4, #0]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8003574:	197b      	adds	r3, r7, r5
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	b25b      	sxtb	r3, r3
 800357a:	2201      	movs	r2, #1
 800357c:	4393      	bics	r3, r2
 800357e:	b25a      	sxtb	r2, r3
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b25b      	sxtb	r3, r3
 8003586:	2101      	movs	r1, #1
 8003588:	400b      	ands	r3, r1
 800358a:	b25b      	sxtb	r3, r3
 800358c:	4313      	orrs	r3, r2
 800358e:	b25b      	sxtb	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	0019      	movs	r1, r3
 8003594:	200e      	movs	r0, #14
 8003596:	f7ff ff31 	bl	80033fc <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 800359a:	2001      	movs	r0, #1
 800359c:	f7ff ff74 	bl	8003488 <DS3231_SetInterruptMode>
}
 80035a0:	46c0      	nop			@ (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b004      	add	sp, #16
 80035a6:	bdb0      	pop	{r4, r5, r7, pc}

080035a8 <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 80035ae:	200f      	movs	r0, #15
 80035b0:	f7ff ff46 	bl	8003440 <DS3231_GetRegByte>
 80035b4:	0003      	movs	r3, r0
 80035b6:	0019      	movs	r1, r3
 80035b8:	1dfb      	adds	r3, r7, #7
 80035ba:	2201      	movs	r2, #1
 80035bc:	4391      	bics	r1, r2
 80035be:	000a      	movs	r2, r1
 80035c0:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 80035c2:	1dfb      	adds	r3, r7, #7
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2201      	movs	r2, #1
 80035c8:	4393      	bics	r3, r2
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	0019      	movs	r1, r3
 80035ce:	200f      	movs	r0, #15
 80035d0:	f7ff ff14 	bl	80033fc <DS3231_SetRegByte>
}
 80035d4:	46c0      	nop			@ (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 80035e0:	2002      	movs	r0, #2
 80035e2:	f7ff ff2d 	bl	8003440 <DS3231_GetRegByte>
 80035e6:	0003      	movs	r3, r0
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 f93a 	bl	8003862 <DS3231_DecodeBCD>
 80035ee:	0003      	movs	r3, r0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 80035f6:	b580      	push	{r7, lr}
 80035f8:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 80035fa:	2001      	movs	r0, #1
 80035fc:	f7ff ff20 	bl	8003440 <DS3231_GetRegByte>
 8003600:	0003      	movs	r3, r0
 8003602:	0018      	movs	r0, r3
 8003604:	f000 f92d 	bl	8003862 <DS3231_DecodeBCD>
 8003608:	0003      	movs	r3, r0
}
 800360a:	0018      	movs	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 8003614:	2000      	movs	r0, #0
 8003616:	f7ff ff13 	bl	8003440 <DS3231_GetRegByte>
 800361a:	0003      	movs	r3, r0
 800361c:	0018      	movs	r0, r3
 800361e:	f000 f920 	bl	8003862 <DS3231_DecodeBCD>
 8003622:	0003      	movs	r3, r0
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	0002      	movs	r2, r0
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 f92b 	bl	8003896 <DS3231_EncodeBCD>
 8003640:	0003      	movs	r3, r0
 8003642:	0019      	movs	r1, r3
 8003644:	2003      	movs	r0, #3
 8003646:	f7ff fed9 	bl	80033fc <DS3231_SetRegByte>
}
 800364a:	46c0      	nop			@ (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	b002      	add	sp, #8
 8003650:	bd80      	pop	{r7, pc}

08003652 <DS3231_SetDate>:

/**
 * @brief Set the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS3231_SetDate(uint8_t date) {
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	0002      	movs	r2, r0
 800365a:	1dfb      	adds	r3, r7, #7
 800365c:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_DATE, DS3231_EncodeBCD(date));
 800365e:	1dfb      	adds	r3, r7, #7
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	0018      	movs	r0, r3
 8003664:	f000 f917 	bl	8003896 <DS3231_EncodeBCD>
 8003668:	0003      	movs	r3, r0
 800366a:	0019      	movs	r1, r3
 800366c:	2004      	movs	r0, #4
 800366e:	f7ff fec5 	bl	80033fc <DS3231_SetRegByte>
}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	46bd      	mov	sp, r7
 8003676:	b002      	add	sp, #8
 8003678:	bd80      	pop	{r7, pc}

0800367a <DS3231_SetMonth>:

/**
 * @brief Set the current month.
 * @param month Month, 1 to 12.
 */
void DS3231_SetMonth(uint8_t month) {
 800367a:	b590      	push	{r4, r7, lr}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	0002      	movs	r2, r0
 8003682:	1dfb      	adds	r3, r7, #7
 8003684:	701a      	strb	r2, [r3, #0]
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8003686:	2005      	movs	r0, #5
 8003688:	f7ff feda 	bl	8003440 <DS3231_GetRegByte>
 800368c:	0003      	movs	r3, r0
 800368e:	0019      	movs	r1, r3
 8003690:	240f      	movs	r4, #15
 8003692:	193b      	adds	r3, r7, r4
 8003694:	227f      	movs	r2, #127	@ 0x7f
 8003696:	4391      	bics	r1, r2
 8003698:	000a      	movs	r2, r1
 800369a:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 800369c:	1dfb      	adds	r3, r7, #7
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f000 f8f8 	bl	8003896 <DS3231_EncodeBCD>
 80036a6:	0003      	movs	r3, r0
 80036a8:	001a      	movs	r2, r3
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	0019      	movs	r1, r3
 80036b4:	2005      	movs	r0, #5
 80036b6:	f7ff fea1 	bl	80033fc <DS3231_SetRegByte>
}
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	46bd      	mov	sp, r7
 80036be:	b005      	add	sp, #20
 80036c0:	bd90      	pop	{r4, r7, pc}

080036c2 <DS3231_SetYear>:

/**
 * @brief Set the current year.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetYear(uint16_t year) {
 80036c2:	b590      	push	{r4, r7, lr}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	0002      	movs	r2, r0
 80036ca:	1dbb      	adds	r3, r7, #6
 80036cc:	801a      	strh	r2, [r3, #0]
	uint8_t century = (year / 100) % 20;
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	2164      	movs	r1, #100	@ 0x64
 80036d4:	0018      	movs	r0, r3
 80036d6:	f7fc fd31 	bl	800013c <__udivsi3>
 80036da:	0003      	movs	r3, r0
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2114      	movs	r1, #20
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7fc fdb1 	bl	8000248 <__aeabi_uidivmod>
 80036e6:	000b      	movs	r3, r1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	240f      	movs	r4, #15
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	701a      	strb	r2, [r3, #0]
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 80036f0:	2005      	movs	r0, #5
 80036f2:	f7ff fea5 	bl	8003440 <DS3231_GetRegByte>
 80036f6:	0003      	movs	r3, r0
 80036f8:	b25b      	sxtb	r3, r3
 80036fa:	227f      	movs	r2, #127	@ 0x7f
 80036fc:	4013      	ands	r3, r2
 80036fe:	b25a      	sxtb	r2, r3
 8003700:	193b      	adds	r3, r7, r4
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	b25b      	sxtb	r3, r3
 8003706:	01db      	lsls	r3, r3, #7
 8003708:	b25b      	sxtb	r3, r3
 800370a:	4313      	orrs	r3, r2
 800370c:	b25a      	sxtb	r2, r3
 800370e:	210e      	movs	r1, #14
 8003710:	187b      	adds	r3, r7, r1
 8003712:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_MONTH, monthReg);
 8003714:	187b      	adds	r3, r7, r1
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	0019      	movs	r1, r3
 800371a:	2005      	movs	r0, #5
 800371c:	f7ff fe6e 	bl	80033fc <DS3231_SetRegByte>
	DS3231_SetRegByte(DS3231_REG_YEAR, DS3231_EncodeBCD(year % 100));
 8003720:	1dbb      	adds	r3, r7, #6
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	2164      	movs	r1, #100	@ 0x64
 8003726:	0018      	movs	r0, r3
 8003728:	f7fc fd8e 	bl	8000248 <__aeabi_uidivmod>
 800372c:	000b      	movs	r3, r1
 800372e:	b29b      	uxth	r3, r3
 8003730:	b2db      	uxtb	r3, r3
 8003732:	0018      	movs	r0, r3
 8003734:	f000 f8af 	bl	8003896 <DS3231_EncodeBCD>
 8003738:	0003      	movs	r3, r0
 800373a:	0019      	movs	r1, r3
 800373c:	2006      	movs	r0, #6
 800373e:	f7ff fe5d 	bl	80033fc <DS3231_SetRegByte>
}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b005      	add	sp, #20
 8003748:	bd90      	pop	{r4, r7, pc}

0800374a <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	0002      	movs	r2, r0
 8003752:	1dfb      	adds	r3, r7, #7
 8003754:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	223f      	movs	r2, #63	@ 0x3f
 800375c:	4013      	ands	r3, r2
 800375e:	b2db      	uxtb	r3, r3
 8003760:	0018      	movs	r0, r3
 8003762:	f000 f898 	bl	8003896 <DS3231_EncodeBCD>
 8003766:	0003      	movs	r3, r0
 8003768:	0019      	movs	r1, r3
 800376a:	2002      	movs	r0, #2
 800376c:	f7ff fe46 	bl	80033fc <DS3231_SetRegByte>
}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}

08003778 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	0002      	movs	r2, r0
 8003780:	1dfb      	adds	r3, r7, #7
 8003782:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8003784:	1dfb      	adds	r3, r7, #7
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	0018      	movs	r0, r3
 800378a:	f000 f884 	bl	8003896 <DS3231_EncodeBCD>
 800378e:	0003      	movs	r3, r0
 8003790:	0019      	movs	r1, r3
 8003792:	2001      	movs	r0, #1
 8003794:	f7ff fe32 	bl	80033fc <DS3231_SetRegByte>
}
 8003798:	46c0      	nop			@ (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b002      	add	sp, #8
 800379e:	bd80      	pop	{r7, pc}

080037a0 <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	0002      	movs	r2, r0
 80037a8:	1dfb      	adds	r3, r7, #7
 80037aa:	701a      	strb	r2, [r3, #0]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 80037ac:	1dfb      	adds	r3, r7, #7
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f000 f870 	bl	8003896 <DS3231_EncodeBCD>
 80037b6:	0003      	movs	r3, r0
 80037b8:	0019      	movs	r1, r3
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7ff fe1e 	bl	80033fc <DS3231_SetRegByte>
}
 80037c0:	46c0      	nop			@ (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	0004      	movs	r4, r0
 80037d0:	0008      	movs	r0, r1
 80037d2:	0011      	movs	r1, r2
 80037d4:	1dfb      	adds	r3, r7, #7
 80037d6:	1c22      	adds	r2, r4, #0
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	1dbb      	adds	r3, r7, #6
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	1d7b      	adds	r3, r7, #5
 80037e2:	1c0a      	adds	r2, r1, #0
 80037e4:	701a      	strb	r2, [r3, #0]
	DS3231_SetHour(hour_24mode);
 80037e6:	1dfb      	adds	r3, r7, #7
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f7ff ffad 	bl	800374a <DS3231_SetHour>
	DS3231_SetMinute(minute);
 80037f0:	1dbb      	adds	r3, r7, #6
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7ff ffbf 	bl	8003778 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 80037fa:	1d7b      	adds	r3, r7, #5
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	0018      	movs	r0, r3
 8003800:	f7ff ffce 	bl	80037a0 <DS3231_SetSecond>
}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b003      	add	sp, #12
 800380a:	bd90      	pop	{r4, r7, pc}

0800380c <DS3231_SetFullDate>:
 * @param date Date, 0 to 31.
 * @param month Month, 1 to 12.
 * @param dow Days since last Sunday, 1 to 7.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetFullDate(uint8_t date, uint8_t month, uint8_t dow, uint16_t year){
 800380c:	b5b0      	push	{r4, r5, r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	0005      	movs	r5, r0
 8003814:	000c      	movs	r4, r1
 8003816:	0010      	movs	r0, r2
 8003818:	0019      	movs	r1, r3
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	1c2a      	adds	r2, r5, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	1dbb      	adds	r3, r7, #6
 8003822:	1c22      	adds	r2, r4, #0
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	1d7b      	adds	r3, r7, #5
 8003828:	1c02      	adds	r2, r0, #0
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	1cbb      	adds	r3, r7, #2
 800382e:	1c0a      	adds	r2, r1, #0
 8003830:	801a      	strh	r2, [r3, #0]
	DS3231_SetDate(date);
 8003832:	1dfb      	adds	r3, r7, #7
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	0018      	movs	r0, r3
 8003838:	f7ff ff0b 	bl	8003652 <DS3231_SetDate>
	DS3231_SetMonth(month);
 800383c:	1dbb      	adds	r3, r7, #6
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff ff1a 	bl	800367a <DS3231_SetMonth>
	DS3231_SetDayOfWeek(dow);
 8003846:	1d7b      	adds	r3, r7, #5
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	0018      	movs	r0, r3
 800384c:	f7ff feed 	bl	800362a <DS3231_SetDayOfWeek>
	DS3231_SetYear(year);
 8003850:	1cbb      	adds	r3, r7, #2
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	0018      	movs	r0, r3
 8003856:	f7ff ff34 	bl	80036c2 <DS3231_SetYear>
}
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b002      	add	sp, #8
 8003860:	bdb0      	pop	{r4, r5, r7, pc}

08003862 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	0002      	movs	r2, r0
 800386a:	1dfb      	adds	r3, r7, #7
 800386c:	701a      	strb	r2, [r3, #0]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800386e:	1dfb      	adds	r3, r7, #7
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	b2db      	uxtb	r3, r3
 8003876:	1c1a      	adds	r2, r3, #0
 8003878:	0092      	lsls	r2, r2, #2
 800387a:	18d3      	adds	r3, r2, r3
 800387c:	18db      	adds	r3, r3, r3
 800387e:	b2da      	uxtb	r2, r3
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	210f      	movs	r1, #15
 8003886:	400b      	ands	r3, r1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	18d3      	adds	r3, r2, r3
 800388c:	b2db      	uxtb	r3, r3
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}

08003896 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8003896:	b590      	push	{r4, r7, lr}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	0002      	movs	r2, r0
 800389e:	1dfb      	adds	r3, r7, #7
 80038a0:	701a      	strb	r2, [r3, #0]
	return (dec % 10 + ((dec / 10) << 4));
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	210a      	movs	r1, #10
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7fc fccd 	bl	8000248 <__aeabi_uidivmod>
 80038ae:	000b      	movs	r3, r1
 80038b0:	b2dc      	uxtb	r4, r3
 80038b2:	1dfb      	adds	r3, r7, #7
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	210a      	movs	r1, #10
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fc fc3f 	bl	800013c <__udivsi3>
 80038be:	0003      	movs	r3, r0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	18e3      	adds	r3, r4, r3
 80038c8:	b2db      	uxtb	r3, r3
}
 80038ca:	0018      	movs	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b003      	add	sp, #12
 80038d0:	bd90      	pop	{r4, r7, pc}
	...

080038d4 <lcd16x2_enablePulse>:
*/
/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80038d8:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <lcd16x2_enablePulse+0x38>)
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <lcd16x2_enablePulse+0x3c>)
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	2201      	movs	r2, #1
 80038e2:	0019      	movs	r1, r3
 80038e4:	f001 fbfe 	bl	80050e4 <HAL_GPIO_WritePin>
  HAL_Delay(T_CONST);
 80038e8:	2014      	movs	r0, #20
 80038ea:	f001 f9bf 	bl	8004c6c <HAL_Delay>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80038ee:	4b07      	ldr	r3, [pc, #28]	@ (800390c <lcd16x2_enablePulse+0x38>)
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <lcd16x2_enablePulse+0x3c>)
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	0019      	movs	r1, r3
 80038fa:	f001 fbf3 	bl	80050e4 <HAL_GPIO_WritePin>
  HAL_Delay(60);
 80038fe:	203c      	movs	r0, #60	@ 0x3c
 8003900:	f001 f9b4 	bl	8004c6c <HAL_Delay>
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	20000200 	.word	0x20000200
 8003910:	20000206 	.word	0x20000206

08003914 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	0002      	movs	r2, r0
 800391c:	1dfb      	adds	r3, r7, #7
 800391e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <lcd16x2_rs+0x28>)
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <lcd16x2_rs+0x2c>)
 8003926:	8819      	ldrh	r1, [r3, #0]
 8003928:	1dfb      	adds	r3, r7, #7
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	001a      	movs	r2, r3
 800392e:	f001 fbd9 	bl	80050e4 <HAL_GPIO_WritePin>
}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000200 	.word	0x20000200
 8003940:	20000204 	.word	0x20000204

08003944 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	0002      	movs	r2, r0
 800394c:	1dfb      	adds	r3, r7, #7
 800394e:	701a      	strb	r2, [r3, #0]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8003950:	240f      	movs	r4, #15
 8003952:	193b      	adds	r3, r7, r4
 8003954:	1dfa      	adds	r2, r7, #7
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	210f      	movs	r1, #15
 800395a:	400a      	ands	r2, r1
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	250e      	movs	r5, #14
 8003960:	197b      	adds	r3, r7, r5
 8003962:	1dfa      	adds	r2, r7, #7
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	0912      	lsrs	r2, r2, #4
 8003968:	701a      	strb	r2, [r3, #0]
  if(is8BitsMode)
 800396a:	4b68      	ldr	r3, [pc, #416]	@ (8003b0c <lcd16x2_write+0x1c8>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d062      	beq.n	8003a38 <lcd16x2_write+0xf4>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8003972:	4b67      	ldr	r3, [pc, #412]	@ (8003b10 <lcd16x2_write+0x1cc>)
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	4b67      	ldr	r3, [pc, #412]	@ (8003b14 <lcd16x2_write+0x1d0>)
 8003978:	8819      	ldrh	r1, [r3, #0]
 800397a:	193b      	adds	r3, r7, r4
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2201      	movs	r2, #1
 8003980:	4013      	ands	r3, r2
 8003982:	b2db      	uxtb	r3, r3
 8003984:	001a      	movs	r2, r3
 8003986:	f001 fbad 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800398a:	4b61      	ldr	r3, [pc, #388]	@ (8003b10 <lcd16x2_write+0x1cc>)
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	4b62      	ldr	r3, [pc, #392]	@ (8003b18 <lcd16x2_write+0x1d4>)
 8003990:	8819      	ldrh	r1, [r3, #0]
 8003992:	193b      	adds	r3, r7, r4
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2202      	movs	r2, #2
 8003998:	4013      	ands	r3, r2
 800399a:	b2db      	uxtb	r3, r3
 800399c:	001a      	movs	r2, r3
 800399e:	f001 fba1 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80039a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b10 <lcd16x2_write+0x1cc>)
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b1c <lcd16x2_write+0x1d8>)
 80039a8:	8819      	ldrh	r1, [r3, #0]
 80039aa:	193b      	adds	r3, r7, r4
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2204      	movs	r2, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	001a      	movs	r2, r3
 80039b6:	f001 fb95 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80039ba:	4b55      	ldr	r3, [pc, #340]	@ (8003b10 <lcd16x2_write+0x1cc>)
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	4b58      	ldr	r3, [pc, #352]	@ (8003b20 <lcd16x2_write+0x1dc>)
 80039c0:	8819      	ldrh	r1, [r3, #0]
 80039c2:	193b      	adds	r3, r7, r4
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2208      	movs	r2, #8
 80039c8:	4013      	ands	r3, r2
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	001a      	movs	r2, r3
 80039ce:	f001 fb89 	bl	80050e4 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80039d2:	4b54      	ldr	r3, [pc, #336]	@ (8003b24 <lcd16x2_write+0x1e0>)
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	4b54      	ldr	r3, [pc, #336]	@ (8003b28 <lcd16x2_write+0x1e4>)
 80039d8:	8819      	ldrh	r1, [r3, #0]
 80039da:	197b      	adds	r3, r7, r5
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2201      	movs	r2, #1
 80039e0:	4013      	ands	r3, r2
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	001a      	movs	r2, r3
 80039e6:	f001 fb7d 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80039ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003b24 <lcd16x2_write+0x1e0>)
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	4b4f      	ldr	r3, [pc, #316]	@ (8003b2c <lcd16x2_write+0x1e8>)
 80039f0:	8819      	ldrh	r1, [r3, #0]
 80039f2:	197b      	adds	r3, r7, r5
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2202      	movs	r2, #2
 80039f8:	4013      	ands	r3, r2
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	001a      	movs	r2, r3
 80039fe:	f001 fb71 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8003a02:	4b48      	ldr	r3, [pc, #288]	@ (8003b24 <lcd16x2_write+0x1e0>)
 8003a04:	6818      	ldr	r0, [r3, #0]
 8003a06:	4b4a      	ldr	r3, [pc, #296]	@ (8003b30 <lcd16x2_write+0x1ec>)
 8003a08:	8819      	ldrh	r1, [r3, #0]
 8003a0a:	197b      	adds	r3, r7, r5
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	4013      	ands	r3, r2
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	001a      	movs	r2, r3
 8003a16:	f001 fb65 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8003a1a:	4b42      	ldr	r3, [pc, #264]	@ (8003b24 <lcd16x2_write+0x1e0>)
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	4b45      	ldr	r3, [pc, #276]	@ (8003b34 <lcd16x2_write+0x1f0>)
 8003a20:	8819      	ldrh	r1, [r3, #0]
 8003a22:	197b      	adds	r3, r7, r5
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2208      	movs	r2, #8
 8003a28:	4013      	ands	r3, r2
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	001a      	movs	r2, r3
 8003a2e:	f001 fb59 	bl	80050e4 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8003a32:	f7ff ff4f 	bl	80038d4 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8003a36:	e065      	b.n	8003b04 <lcd16x2_write+0x1c0>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8003a38:	4b3a      	ldr	r3, [pc, #232]	@ (8003b24 <lcd16x2_write+0x1e0>)
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b28 <lcd16x2_write+0x1e4>)
 8003a3e:	8819      	ldrh	r1, [r3, #0]
 8003a40:	240e      	movs	r4, #14
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2201      	movs	r2, #1
 8003a48:	4013      	ands	r3, r2
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	f001 fb49 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8003a52:	4b34      	ldr	r3, [pc, #208]	@ (8003b24 <lcd16x2_write+0x1e0>)
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	4b35      	ldr	r3, [pc, #212]	@ (8003b2c <lcd16x2_write+0x1e8>)
 8003a58:	8819      	ldrh	r1, [r3, #0]
 8003a5a:	193b      	adds	r3, r7, r4
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	4013      	ands	r3, r2
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	001a      	movs	r2, r3
 8003a66:	f001 fb3d 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8003a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b24 <lcd16x2_write+0x1e0>)
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	4b30      	ldr	r3, [pc, #192]	@ (8003b30 <lcd16x2_write+0x1ec>)
 8003a70:	8819      	ldrh	r1, [r3, #0]
 8003a72:	193b      	adds	r3, r7, r4
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2204      	movs	r2, #4
 8003a78:	4013      	ands	r3, r2
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	001a      	movs	r2, r3
 8003a7e:	f001 fb31 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8003a82:	4b28      	ldr	r3, [pc, #160]	@ (8003b24 <lcd16x2_write+0x1e0>)
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <lcd16x2_write+0x1f0>)
 8003a88:	8819      	ldrh	r1, [r3, #0]
 8003a8a:	193b      	adds	r3, r7, r4
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2208      	movs	r2, #8
 8003a90:	4013      	ands	r3, r2
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	001a      	movs	r2, r3
 8003a96:	f001 fb25 	bl	80050e4 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8003a9a:	f7ff ff1b 	bl	80038d4 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8003a9e:	4b21      	ldr	r3, [pc, #132]	@ (8003b24 <lcd16x2_write+0x1e0>)
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	4b21      	ldr	r3, [pc, #132]	@ (8003b28 <lcd16x2_write+0x1e4>)
 8003aa4:	8819      	ldrh	r1, [r3, #0]
 8003aa6:	240f      	movs	r4, #15
 8003aa8:	193b      	adds	r3, r7, r4
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2201      	movs	r2, #1
 8003aae:	4013      	ands	r3, r2
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	f001 fb16 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <lcd16x2_write+0x1e0>)
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	4b1b      	ldr	r3, [pc, #108]	@ (8003b2c <lcd16x2_write+0x1e8>)
 8003abe:	8819      	ldrh	r1, [r3, #0]
 8003ac0:	193b      	adds	r3, r7, r4
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	001a      	movs	r2, r3
 8003acc:	f001 fb0a 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8003ad0:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <lcd16x2_write+0x1e0>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	4b16      	ldr	r3, [pc, #88]	@ (8003b30 <lcd16x2_write+0x1ec>)
 8003ad6:	8819      	ldrh	r1, [r3, #0]
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2204      	movs	r2, #4
 8003ade:	4013      	ands	r3, r2
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	001a      	movs	r2, r3
 8003ae4:	f001 fafe 	bl	80050e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <lcd16x2_write+0x1e0>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <lcd16x2_write+0x1f0>)
 8003aee:	8819      	ldrh	r1, [r3, #0]
 8003af0:	193b      	adds	r3, r7, r4
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2208      	movs	r2, #8
 8003af6:	4013      	ands	r3, r2
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	001a      	movs	r2, r3
 8003afc:	f001 faf2 	bl	80050e4 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8003b00:	f7ff fee8 	bl	80038d4 <lcd16x2_enablePulse>
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b0c:	20000000 	.word	0x20000000
 8003b10:	20000208 	.word	0x20000208
 8003b14:	2000020c 	.word	0x2000020c
 8003b18:	2000020e 	.word	0x2000020e
 8003b1c:	20000210 	.word	0x20000210
 8003b20:	20000212 	.word	0x20000212
 8003b24:	20000214 	.word	0x20000214
 8003b28:	20000218 	.word	0x20000218
 8003b2c:	2000021a 	.word	0x2000021a
 8003b30:	2000021c 	.word	0x2000021c
 8003b34:	2000021e 	.word	0x2000021e

08003b38 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	0002      	movs	r2, r0
 8003b40:	1dfb      	adds	r3, r7, #7
 8003b42:	701a      	strb	r2, [r3, #0]
  lcd16x2_rs(false);
 8003b44:	2000      	movs	r0, #0
 8003b46:	f7ff fee5 	bl	8003914 <lcd16x2_rs>
  lcd16x2_write(cmd);
 8003b4a:	1dfb      	adds	r3, r7, #7
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7ff fef8 	bl	8003944 <lcd16x2_write>
}
 8003b54:	46c0      	nop			@ (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	0002      	movs	r2, r0
 8003b64:	1dfb      	adds	r3, r7, #7
 8003b66:	701a      	strb	r2, [r3, #0]
  lcd16x2_rs(true);
 8003b68:	2001      	movs	r0, #1
 8003b6a:	f7ff fed3 	bl	8003914 <lcd16x2_rs>
  lcd16x2_write(data);
 8003b6e:	1dfb      	adds	r3, r7, #7
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	0018      	movs	r0, r3
 8003b74:	f7ff fee6 	bl	8003944 <lcd16x2_write>
}
 8003b78:	46c0      	nop			@ (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b002      	add	sp, #8
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	0002      	movs	r2, r0
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
  nib &= 0xF;
 8003b8c:	1dfb      	adds	r3, r7, #7
 8003b8e:	1dfa      	adds	r2, r7, #7
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	210f      	movs	r1, #15
 8003b94:	400a      	ands	r2, r1
 8003b96:	701a      	strb	r2, [r3, #0]
  lcd16x2_rs(false);
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f7ff febb 	bl	8003914 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c0c <lcd16x2_write4+0x8c>)
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c10 <lcd16x2_write4+0x90>)
 8003ba4:	8819      	ldrh	r1, [r3, #0]
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	4013      	ands	r3, r2
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	f001 fa97 	bl	80050e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8003bb6:	4b15      	ldr	r3, [pc, #84]	@ (8003c0c <lcd16x2_write4+0x8c>)
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	4b16      	ldr	r3, [pc, #88]	@ (8003c14 <lcd16x2_write4+0x94>)
 8003bbc:	8819      	ldrh	r1, [r3, #0]
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	001a      	movs	r2, r3
 8003bca:	f001 fa8b 	bl	80050e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8003bce:	4b0f      	ldr	r3, [pc, #60]	@ (8003c0c <lcd16x2_write4+0x8c>)
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	4b11      	ldr	r3, [pc, #68]	@ (8003c18 <lcd16x2_write4+0x98>)
 8003bd4:	8819      	ldrh	r1, [r3, #0]
 8003bd6:	1dfb      	adds	r3, r7, #7
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	4013      	ands	r3, r2
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	001a      	movs	r2, r3
 8003be2:	f001 fa7f 	bl	80050e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8003be6:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <lcd16x2_write4+0x8c>)
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	4b0c      	ldr	r3, [pc, #48]	@ (8003c1c <lcd16x2_write4+0x9c>)
 8003bec:	8819      	ldrh	r1, [r3, #0]
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	001a      	movs	r2, r3
 8003bfa:	f001 fa73 	bl	80050e4 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8003bfe:	f7ff fe69 	bl	80038d4 <lcd16x2_enablePulse>
}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	20000214 	.word	0x20000214
 8003c10:	20000218 	.word	0x20000218
 8003c14:	2000021a 	.word	0x2000021a
 8003c18:	2000021c 	.word	0x2000021c
 8003c1c:	2000021e 	.word	0x2000021e

08003c20 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	0008      	movs	r0, r1
 8003c2a:	0011      	movs	r1, r2
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	240a      	movs	r4, #10
 8003c30:	193b      	adds	r3, r7, r4
 8003c32:	1c02      	adds	r2, r0, #0
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	2008      	movs	r0, #8
 8003c38:	183b      	adds	r3, r7, r0
 8003c3a:	1c0a      	adds	r2, r1, #0
 8003c3c:	801a      	strh	r2, [r3, #0]
 // DWT_Delay_Init();
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8003c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf0 <lcd16x2_init_4bits+0xd0>)
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]
  PIN_RS = rs_pin;
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <lcd16x2_init_4bits+0xd4>)
 8003c46:	193a      	adds	r2, r7, r4
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	801a      	strh	r2, [r3, #0]
  PIN_E = e_pin;
 8003c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf8 <lcd16x2_init_4bits+0xd8>)
 8003c4e:	183a      	adds	r2, r7, r0
 8003c50:	8812      	ldrh	r2, [r2, #0]
 8003c52:	801a      	strh	r2, [r3, #0]
  PORT_MSB = port_4_7;
 8003c54:	4b29      	ldr	r3, [pc, #164]	@ (8003cfc <lcd16x2_init_4bits+0xdc>)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	601a      	str	r2, [r3, #0]
  D4_PIN = d4_pin;
 8003c5a:	4a29      	ldr	r2, [pc, #164]	@ (8003d00 <lcd16x2_init_4bits+0xe0>)
 8003c5c:	2318      	movs	r3, #24
 8003c5e:	2108      	movs	r1, #8
 8003c60:	185b      	adds	r3, r3, r1
 8003c62:	19db      	adds	r3, r3, r7
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8003c68:	4b26      	ldr	r3, [pc, #152]	@ (8003d04 <lcd16x2_init_4bits+0xe4>)
 8003c6a:	221c      	movs	r2, #28
 8003c6c:	1852      	adds	r2, r2, r1
 8003c6e:	19d2      	adds	r2, r2, r7
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	801a      	strh	r2, [r3, #0]
  D6_PIN = d6_pin;
 8003c74:	4b24      	ldr	r3, [pc, #144]	@ (8003d08 <lcd16x2_init_4bits+0xe8>)
 8003c76:	2220      	movs	r2, #32
 8003c78:	1852      	adds	r2, r2, r1
 8003c7a:	19d2      	adds	r2, r2, r7
 8003c7c:	8812      	ldrh	r2, [r2, #0]
 8003c7e:	801a      	strh	r2, [r3, #0]
  D7_PIN = d7_pin;
 8003c80:	4b22      	ldr	r3, [pc, #136]	@ (8003d0c <lcd16x2_init_4bits+0xec>)
 8003c82:	2224      	movs	r2, #36	@ 0x24
 8003c84:	1852      	adds	r2, r2, r1
 8003c86:	19d2      	adds	r2, r2, r7
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	801a      	strh	r2, [r3, #0]
  is8BitsMode = false;
 8003c8c:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <lcd16x2_init_4bits+0xf0>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8003c92:	4b20      	ldr	r3, [pc, #128]	@ (8003d14 <lcd16x2_init_4bits+0xf4>)
 8003c94:	2228      	movs	r2, #40	@ 0x28
 8003c96:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8003c98:	2014      	movs	r0, #20
 8003c9a:	f000 ffe7 	bl	8004c6c <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8003c9e:	2003      	movs	r0, #3
 8003ca0:	f7ff ff6e 	bl	8003b80 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8003ca4:	2005      	movs	r0, #5
 8003ca6:	f000 ffe1 	bl	8004c6c <HAL_Delay>
  lcd16x2_write4(0x3);
 8003caa:	2003      	movs	r0, #3
 8003cac:	f7ff ff68 	bl	8003b80 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f000 ffdb 	bl	8004c6c <HAL_Delay>
  lcd16x2_write4(0x3);
 8003cb6:	2003      	movs	r0, #3
 8003cb8:	f7ff ff62 	bl	8003b80 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8003cbc:	2001      	movs	r0, #1
 8003cbe:	f000 ffd5 	bl	8004c6c <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8003cc2:	2002      	movs	r0, #2
 8003cc4:	f7ff ff5c 	bl	8003b80 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f000 ffcf 	bl	8004c6c <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8003cce:	2028      	movs	r0, #40	@ 0x28
 8003cd0:	f7ff ff32 	bl	8003b38 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8003cd4:	200f      	movs	r0, #15
 8003cd6:	f7ff ff2f 	bl	8003b38 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8003cda:	2001      	movs	r0, #1
 8003cdc:	f7ff ff2c 	bl	8003b38 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	f000 ffc3 	bl	8004c6c <HAL_Delay>
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b005      	add	sp, #20
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	20000200 	.word	0x20000200
 8003cf4:	20000204 	.word	0x20000204
 8003cf8:	20000206 	.word	0x20000206
 8003cfc:	20000214 	.word	0x20000214
 8003d00:	20000218 	.word	0x20000218
 8003d04:	2000021a 	.word	0x2000021a
 8003d08:	2000021c 	.word	0x2000021c
 8003d0c:	2000021e 	.word	0x2000021e
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000002 	.word	0x20000002

08003d18 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	0002      	movs	r2, r0
 8003d20:	1dfb      	adds	r3, r7, #7
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	1dbb      	adds	r3, r7, #6
 8003d26:	1c0a      	adds	r2, r1, #0
 8003d28:	701a      	strb	r2, [r3, #0]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8003d2a:	200f      	movs	r0, #15
 8003d2c:	183b      	adds	r3, r7, r0
 8003d2e:	1dba      	adds	r2, r7, #6
 8003d30:	7812      	ldrb	r2, [r2, #0]
 8003d32:	210f      	movs	r1, #15
 8003d34:	400a      	ands	r2, r1
 8003d36:	701a      	strb	r2, [r3, #0]
  if(row==0)
 8003d38:	1dfb      	adds	r3, r7, #7
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10c      	bne.n	8003d5a <lcd16x2_setCursor+0x42>
  {
    maskData |= (0x80);
 8003d40:	183b      	adds	r3, r7, r0
 8003d42:	183a      	adds	r2, r7, r0
 8003d44:	7812      	ldrb	r2, [r2, #0]
 8003d46:	2180      	movs	r1, #128	@ 0x80
 8003d48:	4249      	negs	r1, r1
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(maskData);
 8003d4e:	183b      	adds	r3, r7, r0
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7ff fef0 	bl	8003b38 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8003d58:	e00c      	b.n	8003d74 <lcd16x2_setCursor+0x5c>
    maskData |= (0xc0);
 8003d5a:	200f      	movs	r0, #15
 8003d5c:	183b      	adds	r3, r7, r0
 8003d5e:	183a      	adds	r2, r7, r0
 8003d60:	7812      	ldrb	r2, [r2, #0]
 8003d62:	2140      	movs	r1, #64	@ 0x40
 8003d64:	4249      	negs	r1, r1
 8003d66:	430a      	orrs	r2, r1
 8003d68:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(maskData);
 8003d6a:	183b      	adds	r3, r7, r0
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7ff fee2 	bl	8003b38 <lcd16x2_writeCommand>
}
 8003d74:	46c0      	nop			@ (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b004      	add	sp, #16
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <lcd16x2_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8003d80:	2100      	movs	r1, #0
 8003d82:	2001      	movs	r0, #1
 8003d84:	f7ff ffc8 	bl	8003d18 <lcd16x2_setCursor>
}
 8003d88:	46c0      	nop			@ (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	0002      	movs	r2, r0
 8003d98:	1dfb      	adds	r3, r7, #7
 8003d9a:	701a      	strb	r2, [r3, #0]
  if(state)
 8003d9c:	1dfb      	adds	r3, r7, #7
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00c      	beq.n	8003dbe <lcd16x2_cursorShow+0x2e>
  {
    DisplayControl |= (0x03);
 8003da4:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <lcd16x2_cursorShow+0x50>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2203      	movs	r2, #3
 8003daa:	4313      	orrs	r3, r2
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	4b0c      	ldr	r3, [pc, #48]	@ (8003de0 <lcd16x2_cursorShow+0x50>)
 8003db0:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8003db2:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <lcd16x2_cursorShow+0x50>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f7ff febe 	bl	8003b38 <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 8003dbc:	e00b      	b.n	8003dd6 <lcd16x2_cursorShow+0x46>
    DisplayControl &= ~(0x03);
 8003dbe:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <lcd16x2_cursorShow+0x50>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	4393      	bics	r3, r2
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <lcd16x2_cursorShow+0x50>)
 8003dca:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8003dcc:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <lcd16x2_cursorShow+0x50>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7ff feb1 	bl	8003b38 <lcd16x2_writeCommand>
}
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	20000001 	.word	0x20000001

08003de4 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8003de8:	2001      	movs	r0, #1
 8003dea:	f7ff fea5 	bl	8003b38 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8003dee:	2003      	movs	r0, #3
 8003df0:	f000 ff3c 	bl	8004c6c <HAL_Delay>
}
 8003df4:	46c0      	nop			@ (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8003dfa:	b40f      	push	{r0, r1, r2, r3}
 8003dfc:	b5b0      	push	{r4, r5, r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8003e02:	2334      	movs	r3, #52	@ 0x34
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e0c:	2308      	movs	r3, #8
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	0018      	movs	r0, r3
 8003e12:	f004 fe09 	bl	8008a28 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8003e16:	231f      	movs	r3, #31
 8003e18:	18fb      	adds	r3, r7, r3
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e00d      	b.n	8003e3c <lcd16x2_printf+0x42>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8003e20:	241f      	movs	r4, #31
 8003e22:	193b      	adds	r3, r7, r4
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2208      	movs	r2, #8
 8003e28:	18ba      	adds	r2, r7, r2
 8003e2a:	5cd3      	ldrb	r3, [r2, r3]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7ff fe95 	bl	8003b5c <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8003e32:	193b      	adds	r3, r7, r4
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	193b      	adds	r3, r7, r4
 8003e38:	3201      	adds	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	251f      	movs	r5, #31
 8003e3e:	197b      	adds	r3, r7, r5
 8003e40:	781c      	ldrb	r4, [r3, #0]
 8003e42:	2308      	movs	r3, #8
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7fc f95c 	bl	8000104 <strlen>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	429c      	cmp	r4, r3
 8003e50:	d203      	bcs.n	8003e5a <lcd16x2_printf+0x60>
 8003e52:	197b      	adds	r3, r7, r5
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b0f      	cmp	r3, #15
 8003e58:	d9e2      	bls.n	8003e20 <lcd16x2_printf+0x26>
  }
}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b008      	add	sp, #32
 8003e60:	bcb0      	pop	{r4, r5, r7}
 8003e62:	bc08      	pop	{r3}
 8003e64:	b004      	add	sp, #16
 8003e66:	4718      	bx	r3

08003e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6a:	b08b      	sub	sp, #44	@ 0x2c
 8003e6c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e6e:	f000 fe77 	bl	8004b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e72:	f000 fa03 	bl	800427c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e76:	f000 fb1d 	bl	80044b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003e7a:	f000 fae7 	bl	800444c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8003e7e:	f000 fa45 	bl	800430c <MX_I2C2_Init>
  MX_TIM3_Init();
 8003e82:	f000 fa83 	bl	800438c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  lcd16x2_init_4bits(RS_GPIO_Port,RS_Pin,EN_Pin,
 8003e86:	49da      	ldr	r1, [pc, #872]	@ (80041f0 <main+0x388>)
 8003e88:	2380      	movs	r3, #128	@ 0x80
 8003e8a:	005a      	lsls	r2, r3, #1
 8003e8c:	48d8      	ldr	r0, [pc, #864]	@ (80041f0 <main+0x388>)
 8003e8e:	2380      	movs	r3, #128	@ 0x80
 8003e90:	9303      	str	r3, [sp, #12]
 8003e92:	2340      	movs	r3, #64	@ 0x40
 8003e94:	9302      	str	r3, [sp, #8]
 8003e96:	2320      	movs	r3, #32
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	2310      	movs	r3, #16
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	000b      	movs	r3, r1
 8003ea0:	2108      	movs	r1, #8
 8003ea2:	f7ff febd 	bl	8003c20 <lcd16x2_init_4bits>
    		D4_GPIO_Port,D4_Pin,D5_Pin,D6_Pin,D7_Pin);
  lcd16x2_cursorShow(0);
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f7ff ff72 	bl	8003d90 <lcd16x2_cursorShow>





  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003eac:	4bd1      	ldr	r3, [pc, #836]	@ (80041f4 <main+0x38c>)
 8003eae:	2104      	movs	r1, #4
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f002 fce1 	bl	8006878 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100);			//This value:199 means 100% duty cycle. 199 value is set in the ARR.You must match the compare value to the ARR value to get 100percent duty cycle
 8003eb6:	4bcf      	ldr	r3, [pc, #828]	@ (80041f4 <main+0x38c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2264      	movs	r2, #100	@ 0x64
 8003ebc:	639a      	str	r2, [r3, #56]	@ 0x38


  /* DS3231 RTC SENSOR  */
    DS3231_Init(&hi2c2);
 8003ebe:	4bce      	ldr	r3, [pc, #824]	@ (80041f8 <main+0x390>)
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff fa81 	bl	80033c8 <DS3231_Init>
  DS3231_SetFullTime(19, 49, 00);
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2131      	movs	r1, #49	@ 0x31
 8003eca:	2013      	movs	r0, #19
 8003ecc:	f7ff fc7c 	bl	80037c8 <DS3231_SetFullTime>
  DS3231_SetFullDate(01, 8, 1, 2025);
 8003ed0:	4bca      	ldr	r3, [pc, #808]	@ (80041fc <main+0x394>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	2108      	movs	r1, #8
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f7ff fc98 	bl	800380c <DS3231_SetFullDate>


  /* AHT20 TEMP & HUM  */
  HAL_Delay(40);
 8003edc:	2028      	movs	r0, #40	@ 0x28
 8003ede:	f000 fec5 	bl	8004c6c <HAL_Delay>
  buff_stat[0] = status1;
 8003ee2:	4bc7      	ldr	r3, [pc, #796]	@ (8004200 <main+0x398>)
 8003ee4:	2271      	movs	r2, #113	@ 0x71
 8003ee6:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c2, addr, buff_stat,1, HAL_MAX_DELAY);
 8003ee8:	4ac5      	ldr	r2, [pc, #788]	@ (8004200 <main+0x398>)
 8003eea:	48c3      	ldr	r0, [pc, #780]	@ (80041f8 <main+0x390>)
 8003eec:	2301      	movs	r3, #1
 8003eee:	425b      	negs	r3, r3
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	2170      	movs	r1, #112	@ 0x70
 8003ef6:	f001 f9b9 	bl	800526c <HAL_I2C_Master_Transmit>
  HAL_Delay(5);
 8003efa:	2005      	movs	r0, #5
 8003efc:	f000 feb6 	bl	8004c6c <HAL_Delay>
  HAL_I2C_Master_Receive(&hi2c2, addr, &buff_stat[0],1, HAL_MAX_DELAY);
 8003f00:	4abf      	ldr	r2, [pc, #764]	@ (8004200 <main+0x398>)
 8003f02:	48bd      	ldr	r0, [pc, #756]	@ (80041f8 <main+0x390>)
 8003f04:	2301      	movs	r3, #1
 8003f06:	425b      	negs	r3, r3
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	2170      	movs	r1, #112	@ 0x70
 8003f0e:	f001 fad7 	bl	80054c0 <HAL_I2C_Master_Receive>
  HAL_Delay(5);
 8003f12:	2005      	movs	r0, #5
 8003f14:	f000 feaa 	bl	8004c6c <HAL_Delay>

  if((buff_stat[0] & (1<<3)) == 0x00){ 		//bit 3 contains 0 instead of 1 then we need to initialize it/Calibrate it
 8003f18:	4bb9      	ldr	r3, [pc, #740]	@ (8004200 <main+0x398>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	2308      	movs	r3, #8
 8003f20:	4013      	ands	r3, r2
 8003f22:	d128      	bne.n	8003f76 <main+0x10e>

	  	  HAL_I2C_Master_Transmit(&hi2c2, addr, aht_init,3, HAL_MAX_DELAY);
 8003f24:	4ab7      	ldr	r2, [pc, #732]	@ (8004204 <main+0x39c>)
 8003f26:	48b4      	ldr	r0, [pc, #720]	@ (80041f8 <main+0x390>)
 8003f28:	2301      	movs	r3, #1
 8003f2a:	425b      	negs	r3, r3
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	2303      	movs	r3, #3
 8003f30:	2170      	movs	r1, #112	@ 0x70
 8003f32:	f001 f99b 	bl	800526c <HAL_I2C_Master_Transmit>
	  	  HAL_Delay(12);
 8003f36:	200c      	movs	r0, #12
 8003f38:	f000 fe98 	bl	8004c6c <HAL_Delay>
	  	  HAL_I2C_Master_Transmit(&hi2c2, addr, trig_measurement,3, HAL_MAX_DELAY);
 8003f3c:	4ab2      	ldr	r2, [pc, #712]	@ (8004208 <main+0x3a0>)
 8003f3e:	48ae      	ldr	r0, [pc, #696]	@ (80041f8 <main+0x390>)
 8003f40:	2301      	movs	r3, #1
 8003f42:	425b      	negs	r3, r3
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	2303      	movs	r3, #3
 8003f48:	2170      	movs	r1, #112	@ 0x70
 8003f4a:	f001 f98f 	bl	800526c <HAL_I2C_Master_Transmit>
	  	  HAL_Delay(80);
 8003f4e:	2050      	movs	r0, #80	@ 0x50
 8003f50:	f000 fe8c 	bl	8004c6c <HAL_Delay>

	  	 // sprintf(buffer,"%x\r\n",temp_crc_read[0]);
	      sprintf(buffer,"It is Not Calibrated, need to init N trig");
 8003f54:	4aad      	ldr	r2, [pc, #692]	@ (800420c <main+0x3a4>)
 8003f56:	4bae      	ldr	r3, [pc, #696]	@ (8004210 <main+0x3a8>)
 8003f58:	0011      	movs	r1, r2
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f004 fce0 	bl	8008920 <siprintf>
	 	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(buffer), 100);
 8003f60:	49ab      	ldr	r1, [pc, #684]	@ (8004210 <main+0x3a8>)
 8003f62:	48ac      	ldr	r0, [pc, #688]	@ (8004214 <main+0x3ac>)
 8003f64:	2364      	movs	r3, #100	@ 0x64
 8003f66:	222d      	movs	r2, #45	@ 0x2d
 8003f68:	f003 fa66 	bl	8007438 <HAL_UART_Transmit>
	 	  HAL_Delay(1000);
 8003f6c:	23fa      	movs	r3, #250	@ 0xfa
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	0018      	movs	r0, r3
 8003f72:	f000 fe7b 	bl	8004c6c <HAL_Delay>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // ---- Getting RTC Values from the RTC Module ----
	  hr = DS3231_GetHour();
 8003f76:	f7ff fb31 	bl	80035dc <DS3231_GetHour>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	001a      	movs	r2, r3
 8003f7e:	4ba6      	ldr	r3, [pc, #664]	@ (8004218 <main+0x3b0>)
 8003f80:	701a      	strb	r2, [r3, #0]
	  min = DS3231_GetMinute();
 8003f82:	f7ff fb38 	bl	80035f6 <DS3231_GetMinute>
 8003f86:	0003      	movs	r3, r0
 8003f88:	001a      	movs	r2, r3
 8003f8a:	4ba4      	ldr	r3, [pc, #656]	@ (800421c <main+0x3b4>)
 8003f8c:	701a      	strb	r2, [r3, #0]
	  sec = DS3231_GetSecond();
 8003f8e:	f7ff fb3f 	bl	8003610 <DS3231_GetSecond>
 8003f92:	0003      	movs	r3, r0
 8003f94:	001a      	movs	r2, r3
 8003f96:	4ba2      	ldr	r3, [pc, #648]	@ (8004220 <main+0x3b8>)
 8003f98:	701a      	strb	r2, [r3, #0]

	  // ---- Ambient Light PWM Control ----
	  uint16_t current_minutes = hr * 60 + min;
 8003f9a:	4b9f      	ldr	r3, [pc, #636]	@ (8004218 <main+0x3b0>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	233c      	movs	r3, #60	@ 0x3c
 8003fa2:	4353      	muls	r3, r2
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	4b9d      	ldr	r3, [pc, #628]	@ (800421c <main+0x3b4>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	0019      	movs	r1, r3
 8003fac:	2014      	movs	r0, #20
 8003fae:	183b      	adds	r3, r7, r0
 8003fb0:	1852      	adds	r2, r2, r1
 8003fb2:	801a      	strh	r2, [r3, #0]
	  uint16_t fade_in_start  = AMBIENT_LIGHT_FADE_IN_START_HOUR * 60 + AMBIENT_LIGHT_FADE_IN_START_MIN;
 8003fb4:	2112      	movs	r1, #18
 8003fb6:	187b      	adds	r3, r7, r1
 8003fb8:	4a9a      	ldr	r2, [pc, #616]	@ (8004224 <main+0x3bc>)
 8003fba:	801a      	strh	r2, [r3, #0]
	  uint16_t fade_in_end    = AMBIENT_LIGHT_FADE_IN_END_HOUR * 60 + AMBIENT_LIGHT_FADE_IN_END_MIN;
 8003fbc:	2410      	movs	r4, #16
 8003fbe:	193b      	adds	r3, r7, r4
 8003fc0:	4a99      	ldr	r2, [pc, #612]	@ (8004228 <main+0x3c0>)
 8003fc2:	801a      	strh	r2, [r3, #0]
	  uint16_t fade_out_start = AMBIENT_LIGHT_FADE_OUT_START_HOUR * 60 + AMBIENT_LIGHT_FADE_OUT_START_MIN;
 8003fc4:	230e      	movs	r3, #14
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	4a98      	ldr	r2, [pc, #608]	@ (800422c <main+0x3c4>)
 8003fca:	801a      	strh	r2, [r3, #0]
	  uint16_t fade_out_end   = AMBIENT_LIGHT_FADE_OUT_END_HOUR * 60 + AMBIENT_LIGHT_FADE_OUT_END_MIN;
 8003fcc:	230c      	movs	r3, #12
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	4a97      	ldr	r2, [pc, #604]	@ (8004230 <main+0x3c8>)
 8003fd2:	801a      	strh	r2, [r3, #0]

	  uint16_t brightness = 0;
 8003fd4:	2316      	movs	r3, #22
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	2200      	movs	r2, #0
 8003fda:	801a      	strh	r2, [r3, #0]

	  if (current_minutes >= fade_in_start && current_minutes < fade_in_end) {
 8003fdc:	183a      	adds	r2, r7, r0
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	8812      	ldrh	r2, [r2, #0]
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d32c      	bcc.n	8004042 <main+0x1da>
 8003fe8:	183a      	adds	r2, r7, r0
 8003fea:	0026      	movs	r6, r4
 8003fec:	193b      	adds	r3, r7, r4
 8003fee:	8812      	ldrh	r2, [r2, #0]
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d225      	bcs.n	8004042 <main+0x1da>
	      float ratio = (float)(current_minutes - fade_in_start) / (fade_in_end - fade_in_start);
 8003ff6:	183b      	adds	r3, r7, r0
 8003ff8:	881a      	ldrh	r2, [r3, #0]
 8003ffa:	000d      	movs	r5, r1
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	0018      	movs	r0, r3
 8004004:	f7fd f846 	bl	8001094 <__aeabi_i2f>
 8004008:	1c04      	adds	r4, r0, #0
 800400a:	19bb      	adds	r3, r7, r6
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	197b      	adds	r3, r7, r5
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	0018      	movs	r0, r3
 8004016:	f7fd f83d 	bl	8001094 <__aeabi_i2f>
 800401a:	1c03      	adds	r3, r0, #0
 800401c:	1c19      	adds	r1, r3, #0
 800401e:	1c20      	adds	r0, r4, #0
 8004020:	f7fc fb44 	bl	80006ac <__aeabi_fdiv>
 8004024:	1c03      	adds	r3, r0, #0
 8004026:	60bb      	str	r3, [r7, #8]
	      brightness = (uint16_t)(ratio * PWM_MAX_DUTY_CYCLE);
 8004028:	4982      	ldr	r1, [pc, #520]	@ (8004234 <main+0x3cc>)
 800402a:	68b8      	ldr	r0, [r7, #8]
 800402c:	f7fc fc54 	bl	80008d8 <__aeabi_fmul>
 8004030:	1c03      	adds	r3, r0, #0
 8004032:	2216      	movs	r2, #22
 8004034:	18bc      	adds	r4, r7, r2
 8004036:	1c18      	adds	r0, r3, #0
 8004038:	f7fc fa54 	bl	80004e4 <__aeabi_f2uiz>
 800403c:	0003      	movs	r3, r0
 800403e:	8023      	strh	r3, [r4, #0]
	  if (current_minutes >= fade_in_start && current_minutes < fade_in_end) {
 8004040:	e04b      	b.n	80040da <main+0x272>
	  }
	  else if (current_minutes >= fade_in_end && current_minutes < fade_out_start) {
 8004042:	2114      	movs	r1, #20
 8004044:	187a      	adds	r2, r7, r1
 8004046:	2310      	movs	r3, #16
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	8812      	ldrh	r2, [r2, #0]
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d30b      	bcc.n	800406a <main+0x202>
 8004052:	187a      	adds	r2, r7, r1
 8004054:	230e      	movs	r3, #14
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d204      	bcs.n	800406a <main+0x202>
	      brightness = PWM_MAX_DUTY_CYCLE;
 8004060:	2316      	movs	r3, #22
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2264      	movs	r2, #100	@ 0x64
 8004066:	801a      	strh	r2, [r3, #0]
 8004068:	e037      	b.n	80040da <main+0x272>
	  }
	  else if (current_minutes >= fade_out_start && current_minutes < fade_out_end) {
 800406a:	2114      	movs	r1, #20
 800406c:	187a      	adds	r2, r7, r1
 800406e:	260e      	movs	r6, #14
 8004070:	19bb      	adds	r3, r7, r6
 8004072:	8812      	ldrh	r2, [r2, #0]
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d32b      	bcc.n	80040d2 <main+0x26a>
 800407a:	187a      	adds	r2, r7, r1
 800407c:	250c      	movs	r5, #12
 800407e:	197b      	adds	r3, r7, r5
 8004080:	8812      	ldrh	r2, [r2, #0]
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d224      	bcs.n	80040d2 <main+0x26a>
	      float ratio = (float)(fade_out_end - current_minutes) / (fade_out_end - fade_out_start);
 8004088:	197b      	adds	r3, r7, r5
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	187b      	adds	r3, r7, r1
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	0018      	movs	r0, r3
 8004094:	f7fc fffe 	bl	8001094 <__aeabi_i2f>
 8004098:	1c04      	adds	r4, r0, #0
 800409a:	197b      	adds	r3, r7, r5
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	19bb      	adds	r3, r7, r6
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7fc fff5 	bl	8001094 <__aeabi_i2f>
 80040aa:	1c03      	adds	r3, r0, #0
 80040ac:	1c19      	adds	r1, r3, #0
 80040ae:	1c20      	adds	r0, r4, #0
 80040b0:	f7fc fafc 	bl	80006ac <__aeabi_fdiv>
 80040b4:	1c03      	adds	r3, r0, #0
 80040b6:	607b      	str	r3, [r7, #4]
	      brightness = (uint16_t)(ratio * PWM_MAX_DUTY_CYCLE);
 80040b8:	495e      	ldr	r1, [pc, #376]	@ (8004234 <main+0x3cc>)
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc fc0c 	bl	80008d8 <__aeabi_fmul>
 80040c0:	1c03      	adds	r3, r0, #0
 80040c2:	2216      	movs	r2, #22
 80040c4:	18bc      	adds	r4, r7, r2
 80040c6:	1c18      	adds	r0, r3, #0
 80040c8:	f7fc fa0c 	bl	80004e4 <__aeabi_f2uiz>
 80040cc:	0003      	movs	r3, r0
 80040ce:	8023      	strh	r3, [r4, #0]
	  else if (current_minutes >= fade_out_start && current_minutes < fade_out_end) {
 80040d0:	e003      	b.n	80040da <main+0x272>
	  }
	  else {
	      brightness = 0;
 80040d2:	2316      	movs	r3, #22
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	2200      	movs	r2, #0
 80040d8:	801a      	strh	r2, [r3, #0]
	  }

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, brightness);
 80040da:	4b46      	ldr	r3, [pc, #280]	@ (80041f4 <main+0x38c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2216      	movs	r2, #22
 80040e0:	18ba      	adds	r2, r7, r2
 80040e2:	8812      	ldrh	r2, [r2, #0]
 80040e4:	639a      	str	r2, [r3, #56]	@ 0x38



	  // ---- Getting Temp and Humidity Data from the Sensor Module
	  HAL_I2C_Master_Transmit(&hi2c2, addr, trig_measurement,3, HAL_MAX_DELAY);
 80040e6:	4a48      	ldr	r2, [pc, #288]	@ (8004208 <main+0x3a0>)
 80040e8:	4843      	ldr	r0, [pc, #268]	@ (80041f8 <main+0x390>)
 80040ea:	2301      	movs	r3, #1
 80040ec:	425b      	negs	r3, r3
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	2303      	movs	r3, #3
 80040f2:	2170      	movs	r1, #112	@ 0x70
 80040f4:	f001 f8ba 	bl	800526c <HAL_I2C_Master_Transmit>
	  HAL_Delay(80);
 80040f8:	2050      	movs	r0, #80	@ 0x50
 80040fa:	f000 fdb7 	bl	8004c6c <HAL_Delay>
	  HAL_I2C_Master_Receive(&hi2c2, addr,data,sizeof(data), HAL_MAX_DELAY);
 80040fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004238 <main+0x3d0>)
 8004100:	483d      	ldr	r0, [pc, #244]	@ (80041f8 <main+0x390>)
 8004102:	2301      	movs	r3, #1
 8004104:	425b      	negs	r3, r3
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2306      	movs	r3, #6
 800410a:	2170      	movs	r1, #112	@ 0x70
 800410c:	f001 f9d8 	bl	80054c0 <HAL_I2C_Master_Receive>
      Humidity_();
 8004110:	f000 fa74 	bl	80045fc <Humidity_>
      Temperature_();
 8004114:	f000 fab8 	bl	8004688 <Temperature_>

      sprintf(temp_str, "%.1f", Temp);
 8004118:	4b48      	ldr	r3, [pc, #288]	@ (800423c <main+0x3d4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	1c18      	adds	r0, r3, #0
 800411e:	f7fe ffef 	bl	8003100 <__aeabi_f2d>
 8004122:	0002      	movs	r2, r0
 8004124:	000b      	movs	r3, r1
 8004126:	4946      	ldr	r1, [pc, #280]	@ (8004240 <main+0x3d8>)
 8004128:	4846      	ldr	r0, [pc, #280]	@ (8004244 <main+0x3dc>)
 800412a:	f004 fbf9 	bl	8008920 <siprintf>
      sprintf(humi_str, "%u", Humidity);
 800412e:	4b46      	ldr	r3, [pc, #280]	@ (8004248 <main+0x3e0>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	001a      	movs	r2, r3
 8004134:	4945      	ldr	r1, [pc, #276]	@ (800424c <main+0x3e4>)
 8004136:	4b46      	ldr	r3, [pc, #280]	@ (8004250 <main+0x3e8>)
 8004138:	0018      	movs	r0, r3
 800413a:	f004 fbf1 	bl	8008920 <siprintf>
      sprintf(clock,"%02u:%02u:%02u", hr, min,sec);
 800413e:	4b36      	ldr	r3, [pc, #216]	@ (8004218 <main+0x3b0>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	001a      	movs	r2, r3
 8004144:	4b35      	ldr	r3, [pc, #212]	@ (800421c <main+0x3b4>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	001c      	movs	r4, r3
 800414a:	4b35      	ldr	r3, [pc, #212]	@ (8004220 <main+0x3b8>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	4941      	ldr	r1, [pc, #260]	@ (8004254 <main+0x3ec>)
 8004150:	4841      	ldr	r0, [pc, #260]	@ (8004258 <main+0x3f0>)
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	0023      	movs	r3, r4
 8004156:	f004 fbe3 	bl	8008920 <siprintf>


	  if (hr >= UV_ON_HOUR && hr < UV_OFF_HOUR) {
 800415a:	4b2f      	ldr	r3, [pc, #188]	@ (8004218 <main+0x3b0>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b07      	cmp	r3, #7
 8004160:	d90b      	bls.n	800417a <main+0x312>
 8004162:	4b2d      	ldr	r3, [pc, #180]	@ (8004218 <main+0x3b0>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b14      	cmp	r3, #20
 8004168:	d807      	bhi.n	800417a <main+0x312>
	      HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);  // Turn ON UV Lamp
 800416a:	23a0      	movs	r3, #160	@ 0xa0
 800416c:	05db      	lsls	r3, r3, #23
 800416e:	2200      	movs	r2, #0
 8004170:	2101      	movs	r1, #1
 8004172:	0018      	movs	r0, r3
 8004174:	f000 ffb6 	bl	80050e4 <HAL_GPIO_WritePin>
 8004178:	e006      	b.n	8004188 <main+0x320>
	  } else {
	      HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET); // Turn OFF UV Lamp
 800417a:	23a0      	movs	r3, #160	@ 0xa0
 800417c:	05db      	lsls	r3, r3, #23
 800417e:	2201      	movs	r2, #1
 8004180:	2101      	movs	r1, #1
 8004182:	0018      	movs	r0, r3
 8004184:	f000 ffae 	bl	80050e4 <HAL_GPIO_WritePin>



	  // Screen 1: Temp & Humidity (10s static)
	      // -------------------
	      lcd16x2_clear();
 8004188:	f7ff fe2c 	bl	8003de4 <lcd16x2_clear>
	      lcd16x2_printf("T:%s%cC", temp_str, 223);
 800418c:	492d      	ldr	r1, [pc, #180]	@ (8004244 <main+0x3dc>)
 800418e:	4b33      	ldr	r3, [pc, #204]	@ (800425c <main+0x3f4>)
 8004190:	22df      	movs	r2, #223	@ 0xdf
 8004192:	0018      	movs	r0, r3
 8004194:	f7ff fe31 	bl	8003dfa <lcd16x2_printf>
	      lcd16x2_2ndLine();
 8004198:	f7ff fdf0 	bl	8003d7c <lcd16x2_2ndLine>
	      lcd16x2_printf("H:%s%c", humi_str, 37);
 800419c:	492c      	ldr	r1, [pc, #176]	@ (8004250 <main+0x3e8>)
 800419e:	4b30      	ldr	r3, [pc, #192]	@ (8004260 <main+0x3f8>)
 80041a0:	2225      	movs	r2, #37	@ 0x25
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7ff fe29 	bl	8003dfa <lcd16x2_printf>
	      HAL_Delay(10000);  // wait for 10 seconds
 80041a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004264 <main+0x3fc>)
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 fd5e 	bl	8004c6c <HAL_Delay>

	      // -------------------
	      // Screen 2: Time & UV status (3s static)
	      // -------------------
	      lcd16x2_clear();
 80041b0:	f7ff fe18 	bl	8003de4 <lcd16x2_clear>
	      lcd16x2_printf("%s", clock);
 80041b4:	4a28      	ldr	r2, [pc, #160]	@ (8004258 <main+0x3f0>)
 80041b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004268 <main+0x400>)
 80041b8:	0011      	movs	r1, r2
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7ff fe1d 	bl	8003dfa <lcd16x2_printf>
	      lcd16x2_2ndLine();
 80041c0:	f7ff fddc 	bl	8003d7c <lcd16x2_2ndLine>
	      lcd16x2_printf("UV:%s", (hr >= UV_ON_HOUR && hr < UV_OFF_HOUR) ? "ON " : "OFF");
 80041c4:	4b14      	ldr	r3, [pc, #80]	@ (8004218 <main+0x3b0>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b07      	cmp	r3, #7
 80041ca:	d905      	bls.n	80041d8 <main+0x370>
 80041cc:	4b12      	ldr	r3, [pc, #72]	@ (8004218 <main+0x3b0>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b14      	cmp	r3, #20
 80041d2:	d801      	bhi.n	80041d8 <main+0x370>
 80041d4:	4b25      	ldr	r3, [pc, #148]	@ (800426c <main+0x404>)
 80041d6:	e000      	b.n	80041da <main+0x372>
 80041d8:	4b25      	ldr	r3, [pc, #148]	@ (8004270 <main+0x408>)
 80041da:	4a26      	ldr	r2, [pc, #152]	@ (8004274 <main+0x40c>)
 80041dc:	0019      	movs	r1, r3
 80041de:	0010      	movs	r0, r2
 80041e0:	f7ff fe0b 	bl	8003dfa <lcd16x2_printf>
	      HAL_Delay(3000);   // wait for 3 seconds
 80041e4:	4b24      	ldr	r3, [pc, #144]	@ (8004278 <main+0x410>)
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 fd40 	bl	8004c6c <HAL_Delay>
  {
 80041ec:	e6c3      	b.n	8003f76 <main+0x10e>
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	50000400 	.word	0x50000400
 80041f4:	200002f4 	.word	0x200002f4
 80041f8:	200002a0 	.word	0x200002a0
 80041fc:	000007e9 	.word	0x000007e9
 8004200:	20000264 	.word	0x20000264
 8004204:	20000004 	.word	0x20000004
 8004208:	20000008 	.word	0x20000008
 800420c:	0800ad18 	.word	0x0800ad18
 8004210:	20000234 	.word	0x20000234
 8004214:	20000340 	.word	0x20000340
 8004218:	20000220 	.word	0x20000220
 800421c:	20000221 	.word	0x20000221
 8004220:	20000222 	.word	0x20000222
 8004224:	0000023a 	.word	0x0000023a
 8004228:	00000249 	.word	0x00000249
 800422c:	000004e2 	.word	0x000004e2
 8004230:	000004e7 	.word	0x000004e7
 8004234:	42c80000 	.word	0x42c80000
 8004238:	20000268 	.word	0x20000268
 800423c:	20000298 	.word	0x20000298
 8004240:	0800ad44 	.word	0x0800ad44
 8004244:	20000270 	.word	0x20000270
 8004248:	2000029c 	.word	0x2000029c
 800424c:	0800ad4c 	.word	0x0800ad4c
 8004250:	20000280 	.word	0x20000280
 8004254:	0800ad50 	.word	0x0800ad50
 8004258:	20000224 	.word	0x20000224
 800425c:	0800ad60 	.word	0x0800ad60
 8004260:	0800ad68 	.word	0x0800ad68
 8004264:	00002710 	.word	0x00002710
 8004268:	0800ad70 	.word	0x0800ad70
 800426c:	0800ad74 	.word	0x0800ad74
 8004270:	0800ad78 	.word	0x0800ad78
 8004274:	0800ad7c 	.word	0x0800ad7c
 8004278:	00000bb8 	.word	0x00000bb8

0800427c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b093      	sub	sp, #76	@ 0x4c
 8004280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004282:	2410      	movs	r4, #16
 8004284:	193b      	adds	r3, r7, r4
 8004286:	0018      	movs	r0, r3
 8004288:	2338      	movs	r3, #56	@ 0x38
 800428a:	001a      	movs	r2, r3
 800428c:	2100      	movs	r1, #0
 800428e:	f004 fbd7 	bl	8008a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004292:	003b      	movs	r3, r7
 8004294:	0018      	movs	r0, r3
 8004296:	2310      	movs	r3, #16
 8004298:	001a      	movs	r2, r3
 800429a:	2100      	movs	r1, #0
 800429c:	f004 fbd0 	bl	8008a40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	0018      	movs	r0, r3
 80042a6:	f001 fd7f 	bl	8005da8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80042aa:	193b      	adds	r3, r7, r4
 80042ac:	2202      	movs	r2, #2
 80042ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042b0:	193b      	adds	r3, r7, r4
 80042b2:	2280      	movs	r2, #128	@ 0x80
 80042b4:	0052      	lsls	r2, r2, #1
 80042b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80042b8:	193b      	adds	r3, r7, r4
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80042be:	193b      	adds	r3, r7, r4
 80042c0:	2240      	movs	r2, #64	@ 0x40
 80042c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80042c4:	193b      	adds	r3, r7, r4
 80042c6:	2200      	movs	r2, #0
 80042c8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042ca:	193b      	adds	r3, r7, r4
 80042cc:	0018      	movs	r0, r3
 80042ce:	f001 fdb7 	bl	8005e40 <HAL_RCC_OscConfig>
 80042d2:	1e03      	subs	r3, r0, #0
 80042d4:	d001      	beq.n	80042da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80042d6:	f000 fa21 	bl	800471c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042da:	003b      	movs	r3, r7
 80042dc:	2207      	movs	r2, #7
 80042de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80042e0:	003b      	movs	r3, r7
 80042e2:	2200      	movs	r2, #0
 80042e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042e6:	003b      	movs	r3, r7
 80042e8:	2200      	movs	r2, #0
 80042ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042ec:	003b      	movs	r3, r7
 80042ee:	2200      	movs	r2, #0
 80042f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80042f2:	003b      	movs	r3, r7
 80042f4:	2100      	movs	r1, #0
 80042f6:	0018      	movs	r0, r3
 80042f8:	f002 f8bc 	bl	8006474 <HAL_RCC_ClockConfig>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d001      	beq.n	8004304 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004300:	f000 fa0c 	bl	800471c <Error_Handler>
  }
}
 8004304:	46c0      	nop			@ (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b013      	add	sp, #76	@ 0x4c
 800430a:	bd90      	pop	{r4, r7, pc}

0800430c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004310:	4b1b      	ldr	r3, [pc, #108]	@ (8004380 <MX_I2C2_Init+0x74>)
 8004312:	4a1c      	ldr	r2, [pc, #112]	@ (8004384 <MX_I2C2_Init+0x78>)
 8004314:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8004316:	4b1a      	ldr	r3, [pc, #104]	@ (8004380 <MX_I2C2_Init+0x74>)
 8004318:	4a1b      	ldr	r2, [pc, #108]	@ (8004388 <MX_I2C2_Init+0x7c>)
 800431a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800431c:	4b18      	ldr	r3, [pc, #96]	@ (8004380 <MX_I2C2_Init+0x74>)
 800431e:	2200      	movs	r2, #0
 8004320:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004322:	4b17      	ldr	r3, [pc, #92]	@ (8004380 <MX_I2C2_Init+0x74>)
 8004324:	2201      	movs	r2, #1
 8004326:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004328:	4b15      	ldr	r3, [pc, #84]	@ (8004380 <MX_I2C2_Init+0x74>)
 800432a:	2200      	movs	r2, #0
 800432c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800432e:	4b14      	ldr	r3, [pc, #80]	@ (8004380 <MX_I2C2_Init+0x74>)
 8004330:	2200      	movs	r2, #0
 8004332:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004334:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <MX_I2C2_Init+0x74>)
 8004336:	2200      	movs	r2, #0
 8004338:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800433a:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <MX_I2C2_Init+0x74>)
 800433c:	2200      	movs	r2, #0
 800433e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004340:	4b0f      	ldr	r3, [pc, #60]	@ (8004380 <MX_I2C2_Init+0x74>)
 8004342:	2200      	movs	r2, #0
 8004344:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004346:	4b0e      	ldr	r3, [pc, #56]	@ (8004380 <MX_I2C2_Init+0x74>)
 8004348:	0018      	movs	r0, r3
 800434a:	f000 fee9 	bl	8005120 <HAL_I2C_Init>
 800434e:	1e03      	subs	r3, r0, #0
 8004350:	d001      	beq.n	8004356 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004352:	f000 f9e3 	bl	800471c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004356:	4b0a      	ldr	r3, [pc, #40]	@ (8004380 <MX_I2C2_Init+0x74>)
 8004358:	2100      	movs	r1, #0
 800435a:	0018      	movs	r0, r3
 800435c:	f001 fc8c 	bl	8005c78 <HAL_I2CEx_ConfigAnalogFilter>
 8004360:	1e03      	subs	r3, r0, #0
 8004362:	d001      	beq.n	8004368 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004364:	f000 f9da 	bl	800471c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <MX_I2C2_Init+0x74>)
 800436a:	2100      	movs	r1, #0
 800436c:	0018      	movs	r0, r3
 800436e:	f001 fccf 	bl	8005d10 <HAL_I2CEx_ConfigDigitalFilter>
 8004372:	1e03      	subs	r3, r0, #0
 8004374:	d001      	beq.n	800437a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004376:	f000 f9d1 	bl	800471c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	200002a0 	.word	0x200002a0
 8004384:	40005800 	.word	0x40005800
 8004388:	00303d5b 	.word	0x00303d5b

0800438c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	@ 0x28
 8004390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004392:	231c      	movs	r3, #28
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	0018      	movs	r0, r3
 8004398:	230c      	movs	r3, #12
 800439a:	001a      	movs	r2, r3
 800439c:	2100      	movs	r1, #0
 800439e:	f004 fb4f 	bl	8008a40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043a2:	003b      	movs	r3, r7
 80043a4:	0018      	movs	r0, r3
 80043a6:	231c      	movs	r3, #28
 80043a8:	001a      	movs	r2, r3
 80043aa:	2100      	movs	r1, #0
 80043ac:	f004 fb48 	bl	8008a40 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043b0:	4b24      	ldr	r3, [pc, #144]	@ (8004444 <MX_TIM3_Init+0xb8>)
 80043b2:	4a25      	ldr	r2, [pc, #148]	@ (8004448 <MX_TIM3_Init+0xbc>)
 80043b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80043b6:	4b23      	ldr	r3, [pc, #140]	@ (8004444 <MX_TIM3_Init+0xb8>)
 80043b8:	220f      	movs	r2, #15
 80043ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043bc:	4b21      	ldr	r3, [pc, #132]	@ (8004444 <MX_TIM3_Init+0xb8>)
 80043be:	2200      	movs	r2, #0
 80043c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80043c2:	4b20      	ldr	r3, [pc, #128]	@ (8004444 <MX_TIM3_Init+0xb8>)
 80043c4:	22c7      	movs	r2, #199	@ 0xc7
 80043c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004444 <MX_TIM3_Init+0xb8>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004444 <MX_TIM3_Init+0xb8>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80043d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004444 <MX_TIM3_Init+0xb8>)
 80043d6:	0018      	movs	r0, r3
 80043d8:	f002 f9f6 	bl	80067c8 <HAL_TIM_PWM_Init>
 80043dc:	1e03      	subs	r3, r0, #0
 80043de:	d001      	beq.n	80043e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80043e0:	f000 f99c 	bl	800471c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043e4:	211c      	movs	r1, #28
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043f2:	187a      	adds	r2, r7, r1
 80043f4:	4b13      	ldr	r3, [pc, #76]	@ (8004444 <MX_TIM3_Init+0xb8>)
 80043f6:	0011      	movs	r1, r2
 80043f8:	0018      	movs	r0, r3
 80043fa:	f002 ff5f 	bl	80072bc <HAL_TIMEx_MasterConfigSynchronization>
 80043fe:	1e03      	subs	r3, r0, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8004402:	f000 f98b 	bl	800471c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004406:	003b      	movs	r3, r7
 8004408:	2260      	movs	r2, #96	@ 0x60
 800440a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 100;
 800440c:	003b      	movs	r3, r7
 800440e:	2264      	movs	r2, #100	@ 0x64
 8004410:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004412:	003b      	movs	r3, r7
 8004414:	2200      	movs	r2, #0
 8004416:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004418:	003b      	movs	r3, r7
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800441e:	0039      	movs	r1, r7
 8004420:	4b08      	ldr	r3, [pc, #32]	@ (8004444 <MX_TIM3_Init+0xb8>)
 8004422:	2204      	movs	r2, #4
 8004424:	0018      	movs	r0, r3
 8004426:	f002 fb05 	bl	8006a34 <HAL_TIM_PWM_ConfigChannel>
 800442a:	1e03      	subs	r3, r0, #0
 800442c:	d001      	beq.n	8004432 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800442e:	f000 f975 	bl	800471c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004432:	4b04      	ldr	r3, [pc, #16]	@ (8004444 <MX_TIM3_Init+0xb8>)
 8004434:	0018      	movs	r0, r3
 8004436:	f000 fa05 	bl	8004844 <HAL_TIM_MspPostInit>

}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	46bd      	mov	sp, r7
 800443e:	b00a      	add	sp, #40	@ 0x28
 8004440:	bd80      	pop	{r7, pc}
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	200002f4 	.word	0x200002f4
 8004448:	40000400 	.word	0x40000400

0800444c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004450:	4b16      	ldr	r3, [pc, #88]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 8004452:	4a17      	ldr	r2, [pc, #92]	@ (80044b0 <MX_USART2_UART_Init+0x64>)
 8004454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004456:	4b15      	ldr	r3, [pc, #84]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 8004458:	22e1      	movs	r2, #225	@ 0xe1
 800445a:	0252      	lsls	r2, r2, #9
 800445c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 800445e:	4b13      	ldr	r3, [pc, #76]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 8004460:	2280      	movs	r2, #128	@ 0x80
 8004462:	0552      	lsls	r2, r2, #21
 8004464:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004466:	4b11      	ldr	r3, [pc, #68]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 8004468:	2200      	movs	r2, #0
 800446a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800446c:	4b0f      	ldr	r3, [pc, #60]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 800446e:	2200      	movs	r2, #0
 8004470:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004472:	4b0e      	ldr	r3, [pc, #56]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 8004474:	220c      	movs	r2, #12
 8004476:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004478:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 800447a:	2200      	movs	r2, #0
 800447c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800447e:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 8004480:	2200      	movs	r2, #0
 8004482:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004484:	4b09      	ldr	r3, [pc, #36]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 8004486:	2200      	movs	r2, #0
 8004488:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800448a:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 800448c:	2200      	movs	r2, #0
 800448e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004490:	4b06      	ldr	r3, [pc, #24]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 8004492:	2200      	movs	r2, #0
 8004494:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004496:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <MX_USART2_UART_Init+0x60>)
 8004498:	0018      	movs	r0, r3
 800449a:	f002 ff77 	bl	800738c <HAL_UART_Init>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d001      	beq.n	80044a6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80044a2:	f000 f93b 	bl	800471c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000340 	.word	0x20000340
 80044b0:	40004400 	.word	0x40004400

080044b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b08b      	sub	sp, #44	@ 0x2c
 80044b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ba:	2414      	movs	r4, #20
 80044bc:	193b      	adds	r3, r7, r4
 80044be:	0018      	movs	r0, r3
 80044c0:	2314      	movs	r3, #20
 80044c2:	001a      	movs	r2, r3
 80044c4:	2100      	movs	r1, #0
 80044c6:	f004 fabb 	bl	8008a40 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ca:	4b48      	ldr	r3, [pc, #288]	@ (80045ec <MX_GPIO_Init+0x138>)
 80044cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044ce:	4b47      	ldr	r3, [pc, #284]	@ (80045ec <MX_GPIO_Init+0x138>)
 80044d0:	2104      	movs	r1, #4
 80044d2:	430a      	orrs	r2, r1
 80044d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80044d6:	4b45      	ldr	r3, [pc, #276]	@ (80045ec <MX_GPIO_Init+0x138>)
 80044d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044da:	2204      	movs	r2, #4
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044e2:	4b42      	ldr	r3, [pc, #264]	@ (80045ec <MX_GPIO_Init+0x138>)
 80044e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044e6:	4b41      	ldr	r3, [pc, #260]	@ (80045ec <MX_GPIO_Init+0x138>)
 80044e8:	2120      	movs	r1, #32
 80044ea:	430a      	orrs	r2, r1
 80044ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80044ee:	4b3f      	ldr	r3, [pc, #252]	@ (80045ec <MX_GPIO_Init+0x138>)
 80044f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f2:	2220      	movs	r2, #32
 80044f4:	4013      	ands	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044fa:	4b3c      	ldr	r3, [pc, #240]	@ (80045ec <MX_GPIO_Init+0x138>)
 80044fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044fe:	4b3b      	ldr	r3, [pc, #236]	@ (80045ec <MX_GPIO_Init+0x138>)
 8004500:	2101      	movs	r1, #1
 8004502:	430a      	orrs	r2, r1
 8004504:	635a      	str	r2, [r3, #52]	@ 0x34
 8004506:	4b39      	ldr	r3, [pc, #228]	@ (80045ec <MX_GPIO_Init+0x138>)
 8004508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450a:	2201      	movs	r2, #1
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004512:	4b36      	ldr	r3, [pc, #216]	@ (80045ec <MX_GPIO_Init+0x138>)
 8004514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004516:	4b35      	ldr	r3, [pc, #212]	@ (80045ec <MX_GPIO_Init+0x138>)
 8004518:	2102      	movs	r1, #2
 800451a:	430a      	orrs	r2, r1
 800451c:	635a      	str	r2, [r3, #52]	@ 0x34
 800451e:	4b33      	ldr	r3, [pc, #204]	@ (80045ec <MX_GPIO_Init+0x138>)
 8004520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004522:	2202      	movs	r2, #2
 8004524:	4013      	ands	r3, r2
 8004526:	607b      	str	r3, [r7, #4]
 8004528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin|IN2_Pin, GPIO_PIN_SET);
 800452a:	23a0      	movs	r3, #160	@ 0xa0
 800452c:	05db      	lsls	r3, r3, #23
 800452e:	2201      	movs	r2, #1
 8004530:	2103      	movs	r1, #3
 8004532:	0018      	movs	r0, r3
 8004534:	f000 fdd6 	bl	80050e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004538:	4b2d      	ldr	r3, [pc, #180]	@ (80045f0 <MX_GPIO_Init+0x13c>)
 800453a:	2200      	movs	r2, #0
 800453c:	2140      	movs	r1, #64	@ 0x40
 800453e:	0018      	movs	r0, r3
 8004540:	f000 fdd0 	bl	80050e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|D4_Pin|D5_Pin|D6_Pin
 8004544:	23fc      	movs	r3, #252	@ 0xfc
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	482a      	ldr	r0, [pc, #168]	@ (80045f4 <MX_GPIO_Init+0x140>)
 800454a:	2200      	movs	r2, #0
 800454c:	0019      	movs	r1, r3
 800454e:	f000 fdc9 	bl	80050e4 <HAL_GPIO_WritePin>
                          |D7_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8004552:	193b      	adds	r3, r7, r4
 8004554:	2204      	movs	r2, #4
 8004556:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004558:	193b      	adds	r3, r7, r4
 800455a:	2288      	movs	r2, #136	@ 0x88
 800455c:	0352      	lsls	r2, r2, #13
 800455e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004560:	193b      	adds	r3, r7, r4
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8004566:	193b      	adds	r3, r7, r4
 8004568:	4a23      	ldr	r2, [pc, #140]	@ (80045f8 <MX_GPIO_Init+0x144>)
 800456a:	0019      	movs	r1, r3
 800456c:	0010      	movs	r0, r2
 800456e:	f000 fc55 	bl	8004e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8004572:	193b      	adds	r3, r7, r4
 8004574:	2203      	movs	r2, #3
 8004576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004578:	193b      	adds	r3, r7, r4
 800457a:	2201      	movs	r2, #1
 800457c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457e:	193b      	adds	r3, r7, r4
 8004580:	2200      	movs	r2, #0
 8004582:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004584:	193b      	adds	r3, r7, r4
 8004586:	2200      	movs	r2, #0
 8004588:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458a:	193a      	adds	r2, r7, r4
 800458c:	23a0      	movs	r3, #160	@ 0xa0
 800458e:	05db      	lsls	r3, r3, #23
 8004590:	0011      	movs	r1, r2
 8004592:	0018      	movs	r0, r3
 8004594:	f000 fc42 	bl	8004e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8004598:	193b      	adds	r3, r7, r4
 800459a:	2240      	movs	r2, #64	@ 0x40
 800459c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800459e:	193b      	adds	r3, r7, r4
 80045a0:	2201      	movs	r2, #1
 80045a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a4:	193b      	adds	r3, r7, r4
 80045a6:	2200      	movs	r2, #0
 80045a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045aa:	193b      	adds	r3, r7, r4
 80045ac:	2200      	movs	r2, #0
 80045ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80045b0:	193b      	adds	r3, r7, r4
 80045b2:	4a0f      	ldr	r2, [pc, #60]	@ (80045f0 <MX_GPIO_Init+0x13c>)
 80045b4:	0019      	movs	r1, r3
 80045b6:	0010      	movs	r0, r2
 80045b8:	f000 fc30 	bl	8004e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin D4_Pin D5_Pin D6_Pin
                           D7_Pin EN_Pin */
  GPIO_InitStruct.Pin = RS_Pin|D4_Pin|D5_Pin|D6_Pin
 80045bc:	0021      	movs	r1, r4
 80045be:	187b      	adds	r3, r7, r1
 80045c0:	22fc      	movs	r2, #252	@ 0xfc
 80045c2:	0052      	lsls	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
                          |D7_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045c6:	187b      	adds	r3, r7, r1
 80045c8:	2201      	movs	r2, #1
 80045ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045cc:	187b      	adds	r3, r7, r1
 80045ce:	2200      	movs	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d2:	187b      	adds	r3, r7, r1
 80045d4:	2200      	movs	r2, #0
 80045d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d8:	187b      	adds	r3, r7, r1
 80045da:	4a06      	ldr	r2, [pc, #24]	@ (80045f4 <MX_GPIO_Init+0x140>)
 80045dc:	0019      	movs	r1, r3
 80045de:	0010      	movs	r0, r2
 80045e0:	f000 fc1c 	bl	8004e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80045e4:	46c0      	nop			@ (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b00b      	add	sp, #44	@ 0x2c
 80045ea:	bd90      	pop	{r4, r7, pc}
 80045ec:	40021000 	.word	0x40021000
 80045f0:	50000800 	.word	0x50000800
 80045f4:	50000400 	.word	0x50000400
 80045f8:	50001400 	.word	0x50001400

080045fc <Humidity_>:

/* USER CODE BEGIN 4 */

void Humidity_(void){
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0

	  h = data[1];
 8004600:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <Humidity_+0x7c>)
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	001a      	movs	r2, r3
 8004606:	4b1d      	ldr	r3, [pc, #116]	@ (800467c <Humidity_+0x80>)
 8004608:	601a      	str	r2, [r3, #0]
	  h<<=8;
 800460a:	4b1c      	ldr	r3, [pc, #112]	@ (800467c <Humidity_+0x80>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	021a      	lsls	r2, r3, #8
 8004610:	4b1a      	ldr	r3, [pc, #104]	@ (800467c <Humidity_+0x80>)
 8004612:	601a      	str	r2, [r3, #0]
	  h|=data[2];
 8004614:	4b18      	ldr	r3, [pc, #96]	@ (8004678 <Humidity_+0x7c>)
 8004616:	789b      	ldrb	r3, [r3, #2]
 8004618:	001a      	movs	r2, r3
 800461a:	4b18      	ldr	r3, [pc, #96]	@ (800467c <Humidity_+0x80>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	431a      	orrs	r2, r3
 8004620:	4b16      	ldr	r3, [pc, #88]	@ (800467c <Humidity_+0x80>)
 8004622:	601a      	str	r2, [r3, #0]
	  h<<=4;
 8004624:	4b15      	ldr	r3, [pc, #84]	@ (800467c <Humidity_+0x80>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	011a      	lsls	r2, r3, #4
 800462a:	4b14      	ldr	r3, [pc, #80]	@ (800467c <Humidity_+0x80>)
 800462c:	601a      	str	r2, [r3, #0]
	  h|=data[3]>>4;
 800462e:	4b12      	ldr	r3, [pc, #72]	@ (8004678 <Humidity_+0x7c>)
 8004630:	78db      	ldrb	r3, [r3, #3]
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	b2db      	uxtb	r3, r3
 8004636:	001a      	movs	r2, r3
 8004638:	4b10      	ldr	r3, [pc, #64]	@ (800467c <Humidity_+0x80>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	431a      	orrs	r2, r3
 800463e:	4b0f      	ldr	r3, [pc, #60]	@ (800467c <Humidity_+0x80>)
 8004640:	601a      	str	r2, [r3, #0]
	  Humidity = ((float)h*100) / 0x100000;
 8004642:	4b0e      	ldr	r3, [pc, #56]	@ (800467c <Humidity_+0x80>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	0018      	movs	r0, r3
 8004648:	f7fc fd74 	bl	8001134 <__aeabi_ui2f>
 800464c:	1c03      	adds	r3, r0, #0
 800464e:	490c      	ldr	r1, [pc, #48]	@ (8004680 <Humidity_+0x84>)
 8004650:	1c18      	adds	r0, r3, #0
 8004652:	f7fc f941 	bl	80008d8 <__aeabi_fmul>
 8004656:	1c03      	adds	r3, r0, #0
 8004658:	2193      	movs	r1, #147	@ 0x93
 800465a:	05c9      	lsls	r1, r1, #23
 800465c:	1c18      	adds	r0, r3, #0
 800465e:	f7fc f825 	bl	80006ac <__aeabi_fdiv>
 8004662:	1c03      	adds	r3, r0, #0
 8004664:	1c18      	adds	r0, r3, #0
 8004666:	f7fb ff3d 	bl	80004e4 <__aeabi_f2uiz>
 800466a:	0003      	movs	r3, r0
 800466c:	b2da      	uxtb	r2, r3
 800466e:	4b05      	ldr	r3, [pc, #20]	@ (8004684 <Humidity_+0x88>)
 8004670:	701a      	strb	r2, [r3, #0]
}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	20000268 	.word	0x20000268
 800467c:	20000294 	.word	0x20000294
 8004680:	42c80000 	.word	0x42c80000
 8004684:	2000029c 	.word	0x2000029c

08004688 <Temperature_>:

void Temperature_(void){
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0

	 t = data[3] & 0x0F;
 800468c:	4b1e      	ldr	r3, [pc, #120]	@ (8004708 <Temperature_+0x80>)
 800468e:	78db      	ldrb	r3, [r3, #3]
 8004690:	001a      	movs	r2, r3
 8004692:	230f      	movs	r3, #15
 8004694:	401a      	ands	r2, r3
 8004696:	4b1d      	ldr	r3, [pc, #116]	@ (800470c <Temperature_+0x84>)
 8004698:	601a      	str	r2, [r3, #0]
     t <<=8;
 800469a:	4b1c      	ldr	r3, [pc, #112]	@ (800470c <Temperature_+0x84>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	021a      	lsls	r2, r3, #8
 80046a0:	4b1a      	ldr	r3, [pc, #104]	@ (800470c <Temperature_+0x84>)
 80046a2:	601a      	str	r2, [r3, #0]
     t|=data[4];
 80046a4:	4b18      	ldr	r3, [pc, #96]	@ (8004708 <Temperature_+0x80>)
 80046a6:	791b      	ldrb	r3, [r3, #4]
 80046a8:	001a      	movs	r2, r3
 80046aa:	4b18      	ldr	r3, [pc, #96]	@ (800470c <Temperature_+0x84>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	4b16      	ldr	r3, [pc, #88]	@ (800470c <Temperature_+0x84>)
 80046b2:	601a      	str	r2, [r3, #0]
	 t<<=8;
 80046b4:	4b15      	ldr	r3, [pc, #84]	@ (800470c <Temperature_+0x84>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	021a      	lsls	r2, r3, #8
 80046ba:	4b14      	ldr	r3, [pc, #80]	@ (800470c <Temperature_+0x84>)
 80046bc:	601a      	str	r2, [r3, #0]
	 t|=data[5];
 80046be:	4b12      	ldr	r3, [pc, #72]	@ (8004708 <Temperature_+0x80>)
 80046c0:	795b      	ldrb	r3, [r3, #5]
 80046c2:	001a      	movs	r2, r3
 80046c4:	4b11      	ldr	r3, [pc, #68]	@ (800470c <Temperature_+0x84>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	4b10      	ldr	r3, [pc, #64]	@ (800470c <Temperature_+0x84>)
 80046cc:	601a      	str	r2, [r3, #0]
	 Temp = ((float)t*200/0x100000)-50;
 80046ce:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <Temperature_+0x84>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	0018      	movs	r0, r3
 80046d4:	f7fc fd2e 	bl	8001134 <__aeabi_ui2f>
 80046d8:	1c03      	adds	r3, r0, #0
 80046da:	490d      	ldr	r1, [pc, #52]	@ (8004710 <Temperature_+0x88>)
 80046dc:	1c18      	adds	r0, r3, #0
 80046de:	f7fc f8fb 	bl	80008d8 <__aeabi_fmul>
 80046e2:	1c03      	adds	r3, r0, #0
 80046e4:	2193      	movs	r1, #147	@ 0x93
 80046e6:	05c9      	lsls	r1, r1, #23
 80046e8:	1c18      	adds	r0, r3, #0
 80046ea:	f7fb ffdf 	bl	80006ac <__aeabi_fdiv>
 80046ee:	1c03      	adds	r3, r0, #0
 80046f0:	4908      	ldr	r1, [pc, #32]	@ (8004714 <Temperature_+0x8c>)
 80046f2:	1c18      	adds	r0, r3, #0
 80046f4:	f7fc fa4a 	bl	8000b8c <__aeabi_fsub>
 80046f8:	1c03      	adds	r3, r0, #0
 80046fa:	1c1a      	adds	r2, r3, #0
 80046fc:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <Temperature_+0x90>)
 80046fe:	601a      	str	r2, [r3, #0]

}
 8004700:	46c0      	nop			@ (mov r8, r8)
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			@ (mov r8, r8)
 8004708:	20000268 	.word	0x20000268
 800470c:	20000290 	.word	0x20000290
 8004710:	43480000 	.word	0x43480000
 8004714:	42480000 	.word	0x42480000
 8004718:	20000298 	.word	0x20000298

0800471c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004720:	b672      	cpsid	i
}
 8004722:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004724:	46c0      	nop			@ (mov r8, r8)
 8004726:	e7fd      	b.n	8004724 <Error_Handler+0x8>

08004728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472e:	4b0f      	ldr	r3, [pc, #60]	@ (800476c <HAL_MspInit+0x44>)
 8004730:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004732:	4b0e      	ldr	r3, [pc, #56]	@ (800476c <HAL_MspInit+0x44>)
 8004734:	2101      	movs	r1, #1
 8004736:	430a      	orrs	r2, r1
 8004738:	641a      	str	r2, [r3, #64]	@ 0x40
 800473a:	4b0c      	ldr	r3, [pc, #48]	@ (800476c <HAL_MspInit+0x44>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	2201      	movs	r2, #1
 8004740:	4013      	ands	r3, r2
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004746:	4b09      	ldr	r3, [pc, #36]	@ (800476c <HAL_MspInit+0x44>)
 8004748:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800474a:	4b08      	ldr	r3, [pc, #32]	@ (800476c <HAL_MspInit+0x44>)
 800474c:	2180      	movs	r1, #128	@ 0x80
 800474e:	0549      	lsls	r1, r1, #21
 8004750:	430a      	orrs	r2, r1
 8004752:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004754:	4b05      	ldr	r3, [pc, #20]	@ (800476c <HAL_MspInit+0x44>)
 8004756:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004758:	2380      	movs	r3, #128	@ 0x80
 800475a:	055b      	lsls	r3, r3, #21
 800475c:	4013      	ands	r3, r2
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	46bd      	mov	sp, r7
 8004766:	b002      	add	sp, #8
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			@ (mov r8, r8)
 800476c:	40021000 	.word	0x40021000

08004770 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b08b      	sub	sp, #44	@ 0x2c
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004778:	2414      	movs	r4, #20
 800477a:	193b      	adds	r3, r7, r4
 800477c:	0018      	movs	r0, r3
 800477e:	2314      	movs	r3, #20
 8004780:	001a      	movs	r2, r3
 8004782:	2100      	movs	r1, #0
 8004784:	f004 f95c 	bl	8008a40 <memset>
  if(hi2c->Instance==I2C2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1c      	ldr	r2, [pc, #112]	@ (8004800 <HAL_I2C_MspInit+0x90>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d131      	bne.n	80047f6 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004792:	4b1c      	ldr	r3, [pc, #112]	@ (8004804 <HAL_I2C_MspInit+0x94>)
 8004794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004796:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <HAL_I2C_MspInit+0x94>)
 8004798:	2101      	movs	r1, #1
 800479a:	430a      	orrs	r2, r1
 800479c:	635a      	str	r2, [r3, #52]	@ 0x34
 800479e:	4b19      	ldr	r3, [pc, #100]	@ (8004804 <HAL_I2C_MspInit+0x94>)
 80047a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a2:	2201      	movs	r2, #1
 80047a4:	4013      	ands	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80047aa:	193b      	adds	r3, r7, r4
 80047ac:	22c0      	movs	r2, #192	@ 0xc0
 80047ae:	0152      	lsls	r2, r2, #5
 80047b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047b2:	0021      	movs	r1, r4
 80047b4:	187b      	adds	r3, r7, r1
 80047b6:	2212      	movs	r2, #18
 80047b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ba:	187b      	adds	r3, r7, r1
 80047bc:	2200      	movs	r2, #0
 80047be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c0:	187b      	adds	r3, r7, r1
 80047c2:	2200      	movs	r2, #0
 80047c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80047c6:	187b      	adds	r3, r7, r1
 80047c8:	2206      	movs	r2, #6
 80047ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047cc:	187a      	adds	r2, r7, r1
 80047ce:	23a0      	movs	r3, #160	@ 0xa0
 80047d0:	05db      	lsls	r3, r3, #23
 80047d2:	0011      	movs	r1, r2
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 fb21 	bl	8004e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80047da:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <HAL_I2C_MspInit+0x94>)
 80047dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047de:	4b09      	ldr	r3, [pc, #36]	@ (8004804 <HAL_I2C_MspInit+0x94>)
 80047e0:	2180      	movs	r1, #128	@ 0x80
 80047e2:	03c9      	lsls	r1, r1, #15
 80047e4:	430a      	orrs	r2, r1
 80047e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047e8:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <HAL_I2C_MspInit+0x94>)
 80047ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047ec:	2380      	movs	r3, #128	@ 0x80
 80047ee:	03db      	lsls	r3, r3, #15
 80047f0:	4013      	ands	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b00b      	add	sp, #44	@ 0x2c
 80047fc:	bd90      	pop	{r4, r7, pc}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	40005800 	.word	0x40005800
 8004804:	40021000 	.word	0x40021000

08004808 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a09      	ldr	r2, [pc, #36]	@ (800483c <HAL_TIM_PWM_MspInit+0x34>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10b      	bne.n	8004832 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800481a:	4b09      	ldr	r3, [pc, #36]	@ (8004840 <HAL_TIM_PWM_MspInit+0x38>)
 800481c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800481e:	4b08      	ldr	r3, [pc, #32]	@ (8004840 <HAL_TIM_PWM_MspInit+0x38>)
 8004820:	2102      	movs	r1, #2
 8004822:	430a      	orrs	r2, r1
 8004824:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004826:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <HAL_TIM_PWM_MspInit+0x38>)
 8004828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482a:	2202      	movs	r2, #2
 800482c:	4013      	ands	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	b004      	add	sp, #16
 8004838:	bd80      	pop	{r7, pc}
 800483a:	46c0      	nop			@ (mov r8, r8)
 800483c:	40000400 	.word	0x40000400
 8004840:	40021000 	.word	0x40021000

08004844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b089      	sub	sp, #36	@ 0x24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	240c      	movs	r4, #12
 800484e:	193b      	adds	r3, r7, r4
 8004850:	0018      	movs	r0, r3
 8004852:	2314      	movs	r3, #20
 8004854:	001a      	movs	r2, r3
 8004856:	2100      	movs	r1, #0
 8004858:	f004 f8f2 	bl	8008a40 <memset>
  if(htim->Instance==TIM3)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a14      	ldr	r2, [pc, #80]	@ (80048b4 <HAL_TIM_MspPostInit+0x70>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d122      	bne.n	80048ac <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004866:	4b14      	ldr	r3, [pc, #80]	@ (80048b8 <HAL_TIM_MspPostInit+0x74>)
 8004868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486a:	4b13      	ldr	r3, [pc, #76]	@ (80048b8 <HAL_TIM_MspPostInit+0x74>)
 800486c:	2101      	movs	r1, #1
 800486e:	430a      	orrs	r2, r1
 8004870:	635a      	str	r2, [r3, #52]	@ 0x34
 8004872:	4b11      	ldr	r3, [pc, #68]	@ (80048b8 <HAL_TIM_MspPostInit+0x74>)
 8004874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004876:	2201      	movs	r2, #1
 8004878:	4013      	ands	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800487e:	0021      	movs	r1, r4
 8004880:	187b      	adds	r3, r7, r1
 8004882:	2280      	movs	r2, #128	@ 0x80
 8004884:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004886:	187b      	adds	r3, r7, r1
 8004888:	2202      	movs	r2, #2
 800488a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	187b      	adds	r3, r7, r1
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004892:	187b      	adds	r3, r7, r1
 8004894:	2200      	movs	r2, #0
 8004896:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004898:	187b      	adds	r3, r7, r1
 800489a:	2201      	movs	r2, #1
 800489c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489e:	187a      	adds	r2, r7, r1
 80048a0:	23a0      	movs	r3, #160	@ 0xa0
 80048a2:	05db      	lsls	r3, r3, #23
 80048a4:	0011      	movs	r1, r2
 80048a6:	0018      	movs	r0, r3
 80048a8:	f000 fab8 	bl	8004e1c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80048ac:	46c0      	nop			@ (mov r8, r8)
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b009      	add	sp, #36	@ 0x24
 80048b2:	bd90      	pop	{r4, r7, pc}
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40021000 	.word	0x40021000

080048bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b08b      	sub	sp, #44	@ 0x2c
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c4:	2414      	movs	r4, #20
 80048c6:	193b      	adds	r3, r7, r4
 80048c8:	0018      	movs	r0, r3
 80048ca:	2314      	movs	r3, #20
 80048cc:	001a      	movs	r2, r3
 80048ce:	2100      	movs	r1, #0
 80048d0:	f004 f8b6 	bl	8008a40 <memset>
  if(huart->Instance==USART2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <HAL_UART_MspInit+0x8c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d130      	bne.n	8004940 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048de:	4b1b      	ldr	r3, [pc, #108]	@ (800494c <HAL_UART_MspInit+0x90>)
 80048e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048e2:	4b1a      	ldr	r3, [pc, #104]	@ (800494c <HAL_UART_MspInit+0x90>)
 80048e4:	2180      	movs	r1, #128	@ 0x80
 80048e6:	0289      	lsls	r1, r1, #10
 80048e8:	430a      	orrs	r2, r1
 80048ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80048ec:	4b17      	ldr	r3, [pc, #92]	@ (800494c <HAL_UART_MspInit+0x90>)
 80048ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048f0:	2380      	movs	r3, #128	@ 0x80
 80048f2:	029b      	lsls	r3, r3, #10
 80048f4:	4013      	ands	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fa:	4b14      	ldr	r3, [pc, #80]	@ (800494c <HAL_UART_MspInit+0x90>)
 80048fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048fe:	4b13      	ldr	r3, [pc, #76]	@ (800494c <HAL_UART_MspInit+0x90>)
 8004900:	2101      	movs	r1, #1
 8004902:	430a      	orrs	r2, r1
 8004904:	635a      	str	r2, [r3, #52]	@ 0x34
 8004906:	4b11      	ldr	r3, [pc, #68]	@ (800494c <HAL_UART_MspInit+0x90>)
 8004908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490a:	2201      	movs	r2, #1
 800490c:	4013      	ands	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8004912:	0021      	movs	r1, r4
 8004914:	187b      	adds	r3, r7, r1
 8004916:	220c      	movs	r2, #12
 8004918:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491a:	187b      	adds	r3, r7, r1
 800491c:	2202      	movs	r2, #2
 800491e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004920:	187b      	adds	r3, r7, r1
 8004922:	2201      	movs	r2, #1
 8004924:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004926:	187b      	adds	r3, r7, r1
 8004928:	2200      	movs	r2, #0
 800492a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800492c:	187b      	adds	r3, r7, r1
 800492e:	2201      	movs	r2, #1
 8004930:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004932:	187a      	adds	r2, r7, r1
 8004934:	23a0      	movs	r3, #160	@ 0xa0
 8004936:	05db      	lsls	r3, r3, #23
 8004938:	0011      	movs	r1, r2
 800493a:	0018      	movs	r0, r3
 800493c:	f000 fa6e 	bl	8004e1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004940:	46c0      	nop			@ (mov r8, r8)
 8004942:	46bd      	mov	sp, r7
 8004944:	b00b      	add	sp, #44	@ 0x2c
 8004946:	bd90      	pop	{r4, r7, pc}
 8004948:	40004400 	.word	0x40004400
 800494c:	40021000 	.word	0x40021000

08004950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004954:	46c0      	nop			@ (mov r8, r8)
 8004956:	e7fd      	b.n	8004954 <NMI_Handler+0x4>

08004958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800495c:	46c0      	nop			@ (mov r8, r8)
 800495e:	e7fd      	b.n	800495c <HardFault_Handler+0x4>

08004960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004964:	46c0      	nop			@ (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800496e:	46c0      	nop			@ (mov r8, r8)
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004978:	f000 f95c 	bl	8004c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800497c:	46c0      	nop			@ (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	af00      	add	r7, sp, #0
  return 1;
 8004986:	2301      	movs	r3, #1
}
 8004988:	0018      	movs	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <_kill>:

int _kill(int pid, int sig)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004998:	f004 f8ac 	bl	8008af4 <__errno>
 800499c:	0003      	movs	r3, r0
 800499e:	2216      	movs	r2, #22
 80049a0:	601a      	str	r2, [r3, #0]
  return -1;
 80049a2:	2301      	movs	r3, #1
 80049a4:	425b      	negs	r3, r3
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b002      	add	sp, #8
 80049ac:	bd80      	pop	{r7, pc}

080049ae <_exit>:

void _exit (int status)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049b6:	2301      	movs	r3, #1
 80049b8:	425a      	negs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0011      	movs	r1, r2
 80049be:	0018      	movs	r0, r3
 80049c0:	f7ff ffe5 	bl	800498e <_kill>
  while (1) {}    /* Make sure we hang here */
 80049c4:	46c0      	nop			@ (mov r8, r8)
 80049c6:	e7fd      	b.n	80049c4 <_exit+0x16>

080049c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e00a      	b.n	80049f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80049da:	e000      	b.n	80049de <_read+0x16>
 80049dc:	bf00      	nop
 80049de:	0001      	movs	r1, r0
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	1c5a      	adds	r2, r3, #1
 80049e4:	60ba      	str	r2, [r7, #8]
 80049e6:	b2ca      	uxtb	r2, r1
 80049e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	3301      	adds	r3, #1
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	dbf0      	blt.n	80049da <_read+0x12>
  }

  return len;
 80049f8:	687b      	ldr	r3, [r7, #4]
}
 80049fa:	0018      	movs	r0, r3
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b006      	add	sp, #24
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e009      	b.n	8004a28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	60ba      	str	r2, [r7, #8]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	e000      	b.n	8004a22 <_write+0x20>
 8004a20:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	3301      	adds	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	dbf1      	blt.n	8004a14 <_write+0x12>
  }
  return len;
 8004a30:	687b      	ldr	r3, [r7, #4]
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b006      	add	sp, #24
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <_close>:

int _close(int file)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004a42:	2301      	movs	r3, #1
 8004a44:	425b      	negs	r3, r3
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b002      	add	sp, #8
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2280      	movs	r2, #128	@ 0x80
 8004a5c:	0192      	lsls	r2, r2, #6
 8004a5e:	605a      	str	r2, [r3, #4]
  return 0;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	0018      	movs	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b002      	add	sp, #8
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <_isatty>:

int _isatty(int file)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004a72:	2301      	movs	r3, #1
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b004      	add	sp, #16
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a9c:	4a14      	ldr	r2, [pc, #80]	@ (8004af0 <_sbrk+0x5c>)
 8004a9e:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <_sbrk+0x60>)
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004aa8:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <_sbrk+0x64>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d102      	bne.n	8004ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ab0:	4b11      	ldr	r3, [pc, #68]	@ (8004af8 <_sbrk+0x64>)
 8004ab2:	4a12      	ldr	r2, [pc, #72]	@ (8004afc <_sbrk+0x68>)
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ab6:	4b10      	ldr	r3, [pc, #64]	@ (8004af8 <_sbrk+0x64>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	18d3      	adds	r3, r2, r3
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d207      	bcs.n	8004ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ac4:	f004 f816 	bl	8008af4 <__errno>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	220c      	movs	r2, #12
 8004acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	425b      	negs	r3, r3
 8004ad2:	e009      	b.n	8004ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ad4:	4b08      	ldr	r3, [pc, #32]	@ (8004af8 <_sbrk+0x64>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ada:	4b07      	ldr	r3, [pc, #28]	@ (8004af8 <_sbrk+0x64>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	18d2      	adds	r2, r2, r3
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <_sbrk+0x64>)
 8004ae4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	0018      	movs	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	b006      	add	sp, #24
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20002000 	.word	0x20002000
 8004af4:	00000400 	.word	0x00000400
 8004af8:	200003d4 	.word	0x200003d4
 8004afc:	20000528 	.word	0x20000528

08004b00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b04:	46c0      	nop			@ (mov r8, r8)
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b0c:	480d      	ldr	r0, [pc, #52]	@ (8004b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004b0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004b10:	f7ff fff6 	bl	8004b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b14:	480c      	ldr	r0, [pc, #48]	@ (8004b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b16:	490d      	ldr	r1, [pc, #52]	@ (8004b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b18:	4a0d      	ldr	r2, [pc, #52]	@ (8004b50 <LoopForever+0xe>)
  movs r3, #0
 8004b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b1c:	e002      	b.n	8004b24 <LoopCopyDataInit>

08004b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b22:	3304      	adds	r3, #4

08004b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b28:	d3f9      	bcc.n	8004b1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8004b58 <LoopForever+0x16>)
  movs r3, #0
 8004b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b30:	e001      	b.n	8004b36 <LoopFillZerobss>

08004b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b34:	3204      	adds	r2, #4

08004b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b38:	d3fb      	bcc.n	8004b32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004b3a:	f003 ffe1 	bl	8008b00 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004b3e:	f7ff f993 	bl	8003e68 <main>

08004b42 <LoopForever>:

LoopForever:
  b LoopForever
 8004b42:	e7fe      	b.n	8004b42 <LoopForever>
  ldr   r0, =_estack
 8004b44:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b4c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004b50:	0800b294 	.word	0x0800b294
  ldr r2, =_sbss
 8004b54:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004b58:	20000528 	.word	0x20000528

08004b5c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b5c:	e7fe      	b.n	8004b5c <ADC1_IRQHandler>
	...

08004b60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b66:	1dfb      	adds	r3, r7, #7
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <HAL_Init+0x3c>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <HAL_Init+0x3c>)
 8004b72:	2180      	movs	r1, #128	@ 0x80
 8004b74:	0049      	lsls	r1, r1, #1
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	f000 f810 	bl	8004ba0 <HAL_InitTick>
 8004b80:	1e03      	subs	r3, r0, #0
 8004b82:	d003      	beq.n	8004b8c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004b84:	1dfb      	adds	r3, r7, #7
 8004b86:	2201      	movs	r2, #1
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e001      	b.n	8004b90 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004b8c:	f7ff fdcc 	bl	8004728 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b90:	1dfb      	adds	r3, r7, #7
 8004b92:	781b      	ldrb	r3, [r3, #0]
}
 8004b94:	0018      	movs	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40022000 	.word	0x40022000

08004ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ba0:	b590      	push	{r4, r7, lr}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ba8:	230f      	movs	r3, #15
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c28 <HAL_InitTick+0x88>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d02b      	beq.n	8004c10 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8004c2c <HAL_InitTick+0x8c>)
 8004bba:	681c      	ldr	r4, [r3, #0]
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c28 <HAL_InitTick+0x88>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	0019      	movs	r1, r3
 8004bc2:	23fa      	movs	r3, #250	@ 0xfa
 8004bc4:	0098      	lsls	r0, r3, #2
 8004bc6:	f7fb fab9 	bl	800013c <__udivsi3>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	0019      	movs	r1, r3
 8004bce:	0020      	movs	r0, r4
 8004bd0:	f7fb fab4 	bl	800013c <__udivsi3>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f913 	bl	8004e02 <HAL_SYSTICK_Config>
 8004bdc:	1e03      	subs	r3, r0, #0
 8004bde:	d112      	bne.n	8004c06 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d80a      	bhi.n	8004bfc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	2301      	movs	r3, #1
 8004bea:	425b      	negs	r3, r3
 8004bec:	2200      	movs	r2, #0
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f000 f8f2 	bl	8004dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c30 <HAL_InitTick+0x90>)
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e00d      	b.n	8004c18 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004bfc:	230f      	movs	r3, #15
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2201      	movs	r2, #1
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e008      	b.n	8004c18 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c06:	230f      	movs	r3, #15
 8004c08:	18fb      	adds	r3, r7, r3
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e003      	b.n	8004c18 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c10:	230f      	movs	r3, #15
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	2201      	movs	r2, #1
 8004c16:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004c18:	230f      	movs	r3, #15
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	781b      	ldrb	r3, [r3, #0]
}
 8004c1e:	0018      	movs	r0, r3
 8004c20:	46bd      	mov	sp, r7
 8004c22:	b005      	add	sp, #20
 8004c24:	bd90      	pop	{r4, r7, pc}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	20000014 	.word	0x20000014
 8004c2c:	2000000c 	.word	0x2000000c
 8004c30:	20000010 	.word	0x20000010

08004c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004c38:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_IncTick+0x1c>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	001a      	movs	r2, r3
 8004c3e:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <HAL_IncTick+0x20>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	18d2      	adds	r2, r2, r3
 8004c44:	4b03      	ldr	r3, [pc, #12]	@ (8004c54 <HAL_IncTick+0x20>)
 8004c46:	601a      	str	r2, [r3, #0]
}
 8004c48:	46c0      	nop			@ (mov r8, r8)
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	46c0      	nop			@ (mov r8, r8)
 8004c50:	20000014 	.word	0x20000014
 8004c54:	200003d8 	.word	0x200003d8

08004c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c5c:	4b02      	ldr	r3, [pc, #8]	@ (8004c68 <HAL_GetTick+0x10>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	0018      	movs	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	200003d8 	.word	0x200003d8

08004c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c74:	f7ff fff0 	bl	8004c58 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3301      	adds	r3, #1
 8004c84:	d005      	beq.n	8004c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c86:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <HAL_Delay+0x44>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	001a      	movs	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	189b      	adds	r3, r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	f7ff ffe0 	bl	8004c58 <HAL_GetTick>
 8004c98:	0002      	movs	r2, r0
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d8f7      	bhi.n	8004c94 <HAL_Delay+0x28>
  {
  }
}
 8004ca4:	46c0      	nop			@ (mov r8, r8)
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b004      	add	sp, #16
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			@ (mov r8, r8)
 8004cb0:	20000014 	.word	0x20000014

08004cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	0002      	movs	r2, r0
 8004cbc:	6039      	str	r1, [r7, #0]
 8004cbe:	1dfb      	adds	r3, r7, #7
 8004cc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004cc2:	1dfb      	adds	r3, r7, #7
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cc8:	d828      	bhi.n	8004d1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cca:	4a2f      	ldr	r2, [pc, #188]	@ (8004d88 <__NVIC_SetPriority+0xd4>)
 8004ccc:	1dfb      	adds	r3, r7, #7
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	33c0      	adds	r3, #192	@ 0xc0
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	589b      	ldr	r3, [r3, r2]
 8004cda:	1dfa      	adds	r2, r7, #7
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	0011      	movs	r1, r2
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	00d2      	lsls	r2, r2, #3
 8004ce6:	21ff      	movs	r1, #255	@ 0xff
 8004ce8:	4091      	lsls	r1, r2
 8004cea:	000a      	movs	r2, r1
 8004cec:	43d2      	mvns	r2, r2
 8004cee:	401a      	ands	r2, r3
 8004cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	019b      	lsls	r3, r3, #6
 8004cf6:	22ff      	movs	r2, #255	@ 0xff
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	1dfb      	adds	r3, r7, #7
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	2303      	movs	r3, #3
 8004d02:	4003      	ands	r3, r0
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d08:	481f      	ldr	r0, [pc, #124]	@ (8004d88 <__NVIC_SetPriority+0xd4>)
 8004d0a:	1dfb      	adds	r3, r7, #7
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	b25b      	sxtb	r3, r3
 8004d10:	089b      	lsrs	r3, r3, #2
 8004d12:	430a      	orrs	r2, r1
 8004d14:	33c0      	adds	r3, #192	@ 0xc0
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004d1a:	e031      	b.n	8004d80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004d8c <__NVIC_SetPriority+0xd8>)
 8004d1e:	1dfb      	adds	r3, r7, #7
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	0019      	movs	r1, r3
 8004d24:	230f      	movs	r3, #15
 8004d26:	400b      	ands	r3, r1
 8004d28:	3b08      	subs	r3, #8
 8004d2a:	089b      	lsrs	r3, r3, #2
 8004d2c:	3306      	adds	r3, #6
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	18d3      	adds	r3, r2, r3
 8004d32:	3304      	adds	r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	1dfa      	adds	r2, r7, #7
 8004d38:	7812      	ldrb	r2, [r2, #0]
 8004d3a:	0011      	movs	r1, r2
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	400a      	ands	r2, r1
 8004d40:	00d2      	lsls	r2, r2, #3
 8004d42:	21ff      	movs	r1, #255	@ 0xff
 8004d44:	4091      	lsls	r1, r2
 8004d46:	000a      	movs	r2, r1
 8004d48:	43d2      	mvns	r2, r2
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	019b      	lsls	r3, r3, #6
 8004d52:	22ff      	movs	r2, #255	@ 0xff
 8004d54:	401a      	ands	r2, r3
 8004d56:	1dfb      	adds	r3, r7, #7
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	4003      	ands	r3, r0
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d64:	4809      	ldr	r0, [pc, #36]	@ (8004d8c <__NVIC_SetPriority+0xd8>)
 8004d66:	1dfb      	adds	r3, r7, #7
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	001c      	movs	r4, r3
 8004d6c:	230f      	movs	r3, #15
 8004d6e:	4023      	ands	r3, r4
 8004d70:	3b08      	subs	r3, #8
 8004d72:	089b      	lsrs	r3, r3, #2
 8004d74:	430a      	orrs	r2, r1
 8004d76:	3306      	adds	r3, #6
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	18c3      	adds	r3, r0, r3
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	601a      	str	r2, [r3, #0]
}
 8004d80:	46c0      	nop			@ (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b003      	add	sp, #12
 8004d86:	bd90      	pop	{r4, r7, pc}
 8004d88:	e000e100 	.word	0xe000e100
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	1e5a      	subs	r2, r3, #1
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	045b      	lsls	r3, r3, #17
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d301      	bcc.n	8004da8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004da4:	2301      	movs	r3, #1
 8004da6:	e010      	b.n	8004dca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004da8:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <SysTick_Config+0x44>)
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	3a01      	subs	r2, #1
 8004dae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004db0:	2301      	movs	r3, #1
 8004db2:	425b      	negs	r3, r3
 8004db4:	2103      	movs	r1, #3
 8004db6:	0018      	movs	r0, r3
 8004db8:	f7ff ff7c 	bl	8004cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dbc:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <SysTick_Config+0x44>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dc2:	4b04      	ldr	r3, [pc, #16]	@ (8004dd4 <SysTick_Config+0x44>)
 8004dc4:	2207      	movs	r2, #7
 8004dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b002      	add	sp, #8
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	e000e010 	.word	0xe000e010

08004dd8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	210f      	movs	r1, #15
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	1c02      	adds	r2, r0, #0
 8004de8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	187b      	adds	r3, r7, r1
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b25b      	sxtb	r3, r3
 8004df2:	0011      	movs	r1, r2
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff ff5d 	bl	8004cb4 <__NVIC_SetPriority>
}
 8004dfa:	46c0      	nop			@ (mov r8, r8)
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b004      	add	sp, #16
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff ffbf 	bl	8004d90 <SysTick_Config>
 8004e12:	0003      	movs	r3, r0
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b002      	add	sp, #8
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e2a:	e147      	b.n	80050bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2101      	movs	r1, #1
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4091      	lsls	r1, r2
 8004e36:	000a      	movs	r2, r1
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d100      	bne.n	8004e44 <HAL_GPIO_Init+0x28>
 8004e42:	e138      	b.n	80050b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2203      	movs	r2, #3
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d005      	beq.n	8004e5c <HAL_GPIO_Init+0x40>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2203      	movs	r2, #3
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d130      	bne.n	8004ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	2203      	movs	r2, #3
 8004e68:	409a      	lsls	r2, r3
 8004e6a:	0013      	movs	r3, r2
 8004e6c:	43da      	mvns	r2, r3
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4013      	ands	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	0013      	movs	r3, r2
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e92:	2201      	movs	r2, #1
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	409a      	lsls	r2, r3
 8004e98:	0013      	movs	r3, r2
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	401a      	ands	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	0013      	movs	r3, r2
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d017      	beq.n	8004efa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	0013      	movs	r3, r2
 8004eda:	43da      	mvns	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	409a      	lsls	r2, r3
 8004eec:	0013      	movs	r3, r2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2203      	movs	r2, #3
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d123      	bne.n	8004f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	08da      	lsrs	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3208      	adds	r2, #8
 8004f0e:	0092      	lsls	r2, r2, #2
 8004f10:	58d3      	ldr	r3, [r2, r3]
 8004f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2207      	movs	r2, #7
 8004f18:	4013      	ands	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	220f      	movs	r2, #15
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	0013      	movs	r3, r2
 8004f22:	43da      	mvns	r2, r3
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2107      	movs	r1, #7
 8004f32:	400b      	ands	r3, r1
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	409a      	lsls	r2, r3
 8004f38:	0013      	movs	r3, r2
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	08da      	lsrs	r2, r3, #3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3208      	adds	r2, #8
 8004f48:	0092      	lsls	r2, r2, #2
 8004f4a:	6939      	ldr	r1, [r7, #16]
 8004f4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	2203      	movs	r2, #3
 8004f5a:	409a      	lsls	r2, r3
 8004f5c:	0013      	movs	r3, r2
 8004f5e:	43da      	mvns	r2, r3
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4013      	ands	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	401a      	ands	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	409a      	lsls	r2, r3
 8004f74:	0013      	movs	r3, r2
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	23c0      	movs	r3, #192	@ 0xc0
 8004f88:	029b      	lsls	r3, r3, #10
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d100      	bne.n	8004f90 <HAL_GPIO_Init+0x174>
 8004f8e:	e092      	b.n	80050b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004f90:	4a50      	ldr	r2, [pc, #320]	@ (80050d4 <HAL_GPIO_Init+0x2b8>)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	089b      	lsrs	r3, r3, #2
 8004f96:	3318      	adds	r3, #24
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	589b      	ldr	r3, [r3, r2]
 8004f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	220f      	movs	r2, #15
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	0013      	movs	r3, r2
 8004fac:	43da      	mvns	r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	23a0      	movs	r3, #160	@ 0xa0
 8004fb8:	05db      	lsls	r3, r3, #23
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d013      	beq.n	8004fe6 <HAL_GPIO_Init+0x1ca>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a45      	ldr	r2, [pc, #276]	@ (80050d8 <HAL_GPIO_Init+0x2bc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00d      	beq.n	8004fe2 <HAL_GPIO_Init+0x1c6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a44      	ldr	r2, [pc, #272]	@ (80050dc <HAL_GPIO_Init+0x2c0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <HAL_GPIO_Init+0x1c2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a43      	ldr	r2, [pc, #268]	@ (80050e0 <HAL_GPIO_Init+0x2c4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_GPIO_Init+0x1be>
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e006      	b.n	8004fe8 <HAL_GPIO_Init+0x1cc>
 8004fda:	2305      	movs	r3, #5
 8004fdc:	e004      	b.n	8004fe8 <HAL_GPIO_Init+0x1cc>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e002      	b.n	8004fe8 <HAL_GPIO_Init+0x1cc>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_GPIO_Init+0x1cc>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	2103      	movs	r1, #3
 8004fec:	400a      	ands	r2, r1
 8004fee:	00d2      	lsls	r2, r2, #3
 8004ff0:	4093      	lsls	r3, r2
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004ff8:	4936      	ldr	r1, [pc, #216]	@ (80050d4 <HAL_GPIO_Init+0x2b8>)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	3318      	adds	r3, #24
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005006:	4b33      	ldr	r3, [pc, #204]	@ (80050d4 <HAL_GPIO_Init+0x2b8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	43da      	mvns	r2, r3
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	2380      	movs	r3, #128	@ 0x80
 800501c:	035b      	lsls	r3, r3, #13
 800501e:	4013      	ands	r3, r2
 8005020:	d003      	beq.n	800502a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800502a:	4b2a      	ldr	r3, [pc, #168]	@ (80050d4 <HAL_GPIO_Init+0x2b8>)
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005030:	4b28      	ldr	r3, [pc, #160]	@ (80050d4 <HAL_GPIO_Init+0x2b8>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	43da      	mvns	r2, r3
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4013      	ands	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	2380      	movs	r3, #128	@ 0x80
 8005046:	039b      	lsls	r3, r3, #14
 8005048:	4013      	ands	r3, r2
 800504a:	d003      	beq.n	8005054 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005054:	4b1f      	ldr	r3, [pc, #124]	@ (80050d4 <HAL_GPIO_Init+0x2b8>)
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800505a:	4a1e      	ldr	r2, [pc, #120]	@ (80050d4 <HAL_GPIO_Init+0x2b8>)
 800505c:	2384      	movs	r3, #132	@ 0x84
 800505e:	58d3      	ldr	r3, [r2, r3]
 8005060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	43da      	mvns	r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4013      	ands	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	2380      	movs	r3, #128	@ 0x80
 8005072:	029b      	lsls	r3, r3, #10
 8005074:	4013      	ands	r3, r2
 8005076:	d003      	beq.n	8005080 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005080:	4914      	ldr	r1, [pc, #80]	@ (80050d4 <HAL_GPIO_Init+0x2b8>)
 8005082:	2284      	movs	r2, #132	@ 0x84
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005088:	4a12      	ldr	r2, [pc, #72]	@ (80050d4 <HAL_GPIO_Init+0x2b8>)
 800508a:	2380      	movs	r3, #128	@ 0x80
 800508c:	58d3      	ldr	r3, [r2, r3]
 800508e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	43da      	mvns	r2, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4013      	ands	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	2380      	movs	r3, #128	@ 0x80
 80050a0:	025b      	lsls	r3, r3, #9
 80050a2:	4013      	ands	r3, r2
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050ae:	4909      	ldr	r1, [pc, #36]	@ (80050d4 <HAL_GPIO_Init+0x2b8>)
 80050b0:	2280      	movs	r2, #128	@ 0x80
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	3301      	adds	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	40da      	lsrs	r2, r3
 80050c4:	1e13      	subs	r3, r2, #0
 80050c6:	d000      	beq.n	80050ca <HAL_GPIO_Init+0x2ae>
 80050c8:	e6b0      	b.n	8004e2c <HAL_GPIO_Init+0x10>
  }
}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	46c0      	nop			@ (mov r8, r8)
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b006      	add	sp, #24
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40021800 	.word	0x40021800
 80050d8:	50000400 	.word	0x50000400
 80050dc:	50000800 	.word	0x50000800
 80050e0:	50000c00 	.word	0x50000c00

080050e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	0008      	movs	r0, r1
 80050ee:	0011      	movs	r1, r2
 80050f0:	1cbb      	adds	r3, r7, #2
 80050f2:	1c02      	adds	r2, r0, #0
 80050f4:	801a      	strh	r2, [r3, #0]
 80050f6:	1c7b      	adds	r3, r7, #1
 80050f8:	1c0a      	adds	r2, r1, #0
 80050fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050fc:	1c7b      	adds	r3, r7, #1
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005104:	1cbb      	adds	r3, r7, #2
 8005106:	881a      	ldrh	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800510c:	e003      	b.n	8005116 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800510e:	1cbb      	adds	r3, r7, #2
 8005110:	881a      	ldrh	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	46bd      	mov	sp, r7
 800511a:	b002      	add	sp, #8
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e08f      	b.n	8005252 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2241      	movs	r2, #65	@ 0x41
 8005136:	5c9b      	ldrb	r3, [r3, r2]
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d107      	bne.n	800514e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2240      	movs	r2, #64	@ 0x40
 8005142:	2100      	movs	r1, #0
 8005144:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	0018      	movs	r0, r3
 800514a:	f7ff fb11 	bl	8004770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2241      	movs	r2, #65	@ 0x41
 8005152:	2124      	movs	r1, #36	@ 0x24
 8005154:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2101      	movs	r1, #1
 8005162:	438a      	bics	r2, r1
 8005164:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	493b      	ldr	r1, [pc, #236]	@ (800525c <HAL_I2C_Init+0x13c>)
 8005170:	400a      	ands	r2, r1
 8005172:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4938      	ldr	r1, [pc, #224]	@ (8005260 <HAL_I2C_Init+0x140>)
 8005180:	400a      	ands	r2, r1
 8005182:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d108      	bne.n	800519e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2180      	movs	r1, #128	@ 0x80
 8005196:	0209      	lsls	r1, r1, #8
 8005198:	430a      	orrs	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	e007      	b.n	80051ae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2184      	movs	r1, #132	@ 0x84
 80051a8:	0209      	lsls	r1, r1, #8
 80051aa:	430a      	orrs	r2, r1
 80051ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d109      	bne.n	80051ca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2180      	movs	r1, #128	@ 0x80
 80051c2:	0109      	lsls	r1, r1, #4
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	e007      	b.n	80051da <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4923      	ldr	r1, [pc, #140]	@ (8005264 <HAL_I2C_Init+0x144>)
 80051d6:	400a      	ands	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4920      	ldr	r1, [pc, #128]	@ (8005268 <HAL_I2C_Init+0x148>)
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	491a      	ldr	r1, [pc, #104]	@ (8005260 <HAL_I2C_Init+0x140>)
 80051f6:	400a      	ands	r2, r1
 80051f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691a      	ldr	r2, [r3, #16]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	431a      	orrs	r2, r3
 8005204:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69d9      	ldr	r1, [r3, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1a      	ldr	r2, [r3, #32]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2101      	movs	r1, #1
 8005230:	430a      	orrs	r2, r1
 8005232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2241      	movs	r2, #65	@ 0x41
 800523e:	2120      	movs	r1, #32
 8005240:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2242      	movs	r2, #66	@ 0x42
 800524c:	2100      	movs	r1, #0
 800524e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	0018      	movs	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	b002      	add	sp, #8
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	f0ffffff 	.word	0xf0ffffff
 8005260:	ffff7fff 	.word	0xffff7fff
 8005264:	fffff7ff 	.word	0xfffff7ff
 8005268:	02008000 	.word	0x02008000

0800526c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b089      	sub	sp, #36	@ 0x24
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	0008      	movs	r0, r1
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	0019      	movs	r1, r3
 800527a:	230a      	movs	r3, #10
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	1c02      	adds	r2, r0, #0
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	2308      	movs	r3, #8
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	1c0a      	adds	r2, r1, #0
 8005288:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2241      	movs	r2, #65	@ 0x41
 800528e:	5c9b      	ldrb	r3, [r3, r2]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b20      	cmp	r3, #32
 8005294:	d000      	beq.n	8005298 <HAL_I2C_Master_Transmit+0x2c>
 8005296:	e10a      	b.n	80054ae <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2240      	movs	r2, #64	@ 0x40
 800529c:	5c9b      	ldrb	r3, [r3, r2]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_I2C_Master_Transmit+0x3a>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e104      	b.n	80054b0 <HAL_I2C_Master_Transmit+0x244>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2240      	movs	r2, #64	@ 0x40
 80052aa:	2101      	movs	r1, #1
 80052ac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052ae:	f7ff fcd3 	bl	8004c58 <HAL_GetTick>
 80052b2:	0003      	movs	r3, r0
 80052b4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	0219      	lsls	r1, r3, #8
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	2319      	movs	r3, #25
 80052c2:	2201      	movs	r2, #1
 80052c4:	f000 fa26 	bl	8005714 <I2C_WaitOnFlagUntilTimeout>
 80052c8:	1e03      	subs	r3, r0, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0ef      	b.n	80054b0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2241      	movs	r2, #65	@ 0x41
 80052d4:	2121      	movs	r1, #33	@ 0x21
 80052d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2242      	movs	r2, #66	@ 0x42
 80052dc:	2110      	movs	r1, #16
 80052de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2208      	movs	r2, #8
 80052f0:	18ba      	adds	r2, r7, r2
 80052f2:	8812      	ldrh	r2, [r2, #0]
 80052f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2bff      	cmp	r3, #255	@ 0xff
 8005304:	d906      	bls.n	8005314 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	22ff      	movs	r2, #255	@ 0xff
 800530a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800530c:	2380      	movs	r3, #128	@ 0x80
 800530e:	045b      	lsls	r3, r3, #17
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	e007      	b.n	8005324 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800531e:	2380      	movs	r3, #128	@ 0x80
 8005320:	049b      	lsls	r3, r3, #18
 8005322:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	d027      	beq.n	800537c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	781a      	ldrb	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005360:	b2db      	uxtb	r3, r3
 8005362:	3301      	adds	r3, #1
 8005364:	b2da      	uxtb	r2, r3
 8005366:	697c      	ldr	r4, [r7, #20]
 8005368:	230a      	movs	r3, #10
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	8819      	ldrh	r1, [r3, #0]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	4b51      	ldr	r3, [pc, #324]	@ (80054b8 <HAL_I2C_Master_Transmit+0x24c>)
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	0023      	movs	r3, r4
 8005376:	f000 fc45 	bl	8005c04 <I2C_TransferConfig>
 800537a:	e06f      	b.n	800545c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005380:	b2da      	uxtb	r2, r3
 8005382:	697c      	ldr	r4, [r7, #20]
 8005384:	230a      	movs	r3, #10
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	8819      	ldrh	r1, [r3, #0]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	4b4a      	ldr	r3, [pc, #296]	@ (80054b8 <HAL_I2C_Master_Transmit+0x24c>)
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	0023      	movs	r3, r4
 8005392:	f000 fc37 	bl	8005c04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005396:	e061      	b.n	800545c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 fa10 	bl	80057c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80053a4:	1e03      	subs	r3, r0, #0
 80053a6:	d001      	beq.n	80053ac <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e081      	b.n	80054b0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	781a      	ldrb	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d03a      	beq.n	800545c <HAL_I2C_Master_Transmit+0x1f0>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d136      	bne.n	800545c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	0013      	movs	r3, r2
 80053f8:	2200      	movs	r2, #0
 80053fa:	2180      	movs	r1, #128	@ 0x80
 80053fc:	f000 f98a 	bl	8005714 <I2C_WaitOnFlagUntilTimeout>
 8005400:	1e03      	subs	r3, r0, #0
 8005402:	d001      	beq.n	8005408 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e053      	b.n	80054b0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2bff      	cmp	r3, #255	@ 0xff
 8005410:	d911      	bls.n	8005436 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	22ff      	movs	r2, #255	@ 0xff
 8005416:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541c:	b2da      	uxtb	r2, r3
 800541e:	2380      	movs	r3, #128	@ 0x80
 8005420:	045c      	lsls	r4, r3, #17
 8005422:	230a      	movs	r3, #10
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	8819      	ldrh	r1, [r3, #0]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	2300      	movs	r3, #0
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	0023      	movs	r3, r4
 8005430:	f000 fbe8 	bl	8005c04 <I2C_TransferConfig>
 8005434:	e012      	b.n	800545c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005444:	b2da      	uxtb	r2, r3
 8005446:	2380      	movs	r3, #128	@ 0x80
 8005448:	049c      	lsls	r4, r3, #18
 800544a:	230a      	movs	r3, #10
 800544c:	18fb      	adds	r3, r7, r3
 800544e:	8819      	ldrh	r1, [r3, #0]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	2300      	movs	r3, #0
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	0023      	movs	r3, r4
 8005458:	f000 fbd4 	bl	8005c04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005460:	b29b      	uxth	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d198      	bne.n	8005398 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	0018      	movs	r0, r3
 800546e:	f000 f9ef 	bl	8005850 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005472:	1e03      	subs	r3, r0, #0
 8005474:	d001      	beq.n	800547a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e01a      	b.n	80054b0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2220      	movs	r2, #32
 8005480:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	490b      	ldr	r1, [pc, #44]	@ (80054bc <HAL_I2C_Master_Transmit+0x250>)
 800548e:	400a      	ands	r2, r1
 8005490:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2241      	movs	r2, #65	@ 0x41
 8005496:	2120      	movs	r1, #32
 8005498:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2242      	movs	r2, #66	@ 0x42
 800549e:	2100      	movs	r1, #0
 80054a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2240      	movs	r2, #64	@ 0x40
 80054a6:	2100      	movs	r1, #0
 80054a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
  }
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b007      	add	sp, #28
 80054b6:	bd90      	pop	{r4, r7, pc}
 80054b8:	80002000 	.word	0x80002000
 80054bc:	fe00e800 	.word	0xfe00e800

080054c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b089      	sub	sp, #36	@ 0x24
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	0008      	movs	r0, r1
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	0019      	movs	r1, r3
 80054ce:	230a      	movs	r3, #10
 80054d0:	18fb      	adds	r3, r7, r3
 80054d2:	1c02      	adds	r2, r0, #0
 80054d4:	801a      	strh	r2, [r3, #0]
 80054d6:	2308      	movs	r3, #8
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	1c0a      	adds	r2, r1, #0
 80054dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2241      	movs	r2, #65	@ 0x41
 80054e2:	5c9b      	ldrb	r3, [r3, r2]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	d000      	beq.n	80054ec <HAL_I2C_Master_Receive+0x2c>
 80054ea:	e0e8      	b.n	80056be <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2240      	movs	r2, #64	@ 0x40
 80054f0:	5c9b      	ldrb	r3, [r3, r2]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_I2C_Master_Receive+0x3a>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e0e2      	b.n	80056c0 <HAL_I2C_Master_Receive+0x200>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2240      	movs	r2, #64	@ 0x40
 80054fe:	2101      	movs	r1, #1
 8005500:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005502:	f7ff fba9 	bl	8004c58 <HAL_GetTick>
 8005506:	0003      	movs	r3, r0
 8005508:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800550a:	2380      	movs	r3, #128	@ 0x80
 800550c:	0219      	lsls	r1, r3, #8
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	2319      	movs	r3, #25
 8005516:	2201      	movs	r2, #1
 8005518:	f000 f8fc 	bl	8005714 <I2C_WaitOnFlagUntilTimeout>
 800551c:	1e03      	subs	r3, r0, #0
 800551e:	d001      	beq.n	8005524 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0cd      	b.n	80056c0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2241      	movs	r2, #65	@ 0x41
 8005528:	2122      	movs	r1, #34	@ 0x22
 800552a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2242      	movs	r2, #66	@ 0x42
 8005530:	2110      	movs	r1, #16
 8005532:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2208      	movs	r2, #8
 8005544:	18ba      	adds	r2, r7, r2
 8005546:	8812      	ldrh	r2, [r2, #0]
 8005548:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	2bff      	cmp	r3, #255	@ 0xff
 8005558:	d911      	bls.n	800557e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	22ff      	movs	r2, #255	@ 0xff
 800555e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005564:	b2da      	uxtb	r2, r3
 8005566:	2380      	movs	r3, #128	@ 0x80
 8005568:	045c      	lsls	r4, r3, #17
 800556a:	230a      	movs	r3, #10
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	8819      	ldrh	r1, [r3, #0]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	4b55      	ldr	r3, [pc, #340]	@ (80056c8 <HAL_I2C_Master_Receive+0x208>)
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	0023      	movs	r3, r4
 8005578:	f000 fb44 	bl	8005c04 <I2C_TransferConfig>
 800557c:	e076      	b.n	800566c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558c:	b2da      	uxtb	r2, r3
 800558e:	2380      	movs	r3, #128	@ 0x80
 8005590:	049c      	lsls	r4, r3, #18
 8005592:	230a      	movs	r3, #10
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	8819      	ldrh	r1, [r3, #0]
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	4b4b      	ldr	r3, [pc, #300]	@ (80056c8 <HAL_I2C_Master_Receive+0x208>)
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	0023      	movs	r3, r4
 80055a0:	f000 fb30 	bl	8005c04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80055a4:	e062      	b.n	800566c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 f993 	bl	80058d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055b2:	1e03      	subs	r3, r0, #0
 80055b4:	d001      	beq.n	80055ba <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e082      	b.n	80056c0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d03a      	beq.n	800566c <HAL_I2C_Master_Receive+0x1ac>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d136      	bne.n	800566c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80055fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	0013      	movs	r3, r2
 8005608:	2200      	movs	r2, #0
 800560a:	2180      	movs	r1, #128	@ 0x80
 800560c:	f000 f882 	bl	8005714 <I2C_WaitOnFlagUntilTimeout>
 8005610:	1e03      	subs	r3, r0, #0
 8005612:	d001      	beq.n	8005618 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e053      	b.n	80056c0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	2bff      	cmp	r3, #255	@ 0xff
 8005620:	d911      	bls.n	8005646 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	22ff      	movs	r2, #255	@ 0xff
 8005626:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562c:	b2da      	uxtb	r2, r3
 800562e:	2380      	movs	r3, #128	@ 0x80
 8005630:	045c      	lsls	r4, r3, #17
 8005632:	230a      	movs	r3, #10
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	8819      	ldrh	r1, [r3, #0]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	2300      	movs	r3, #0
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	0023      	movs	r3, r4
 8005640:	f000 fae0 	bl	8005c04 <I2C_TransferConfig>
 8005644:	e012      	b.n	800566c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005654:	b2da      	uxtb	r2, r3
 8005656:	2380      	movs	r3, #128	@ 0x80
 8005658:	049c      	lsls	r4, r3, #18
 800565a:	230a      	movs	r3, #10
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	8819      	ldrh	r1, [r3, #0]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	2300      	movs	r3, #0
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	0023      	movs	r3, r4
 8005668:	f000 facc 	bl	8005c04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d197      	bne.n	80055a6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	0018      	movs	r0, r3
 800567e:	f000 f8e7 	bl	8005850 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005682:	1e03      	subs	r3, r0, #0
 8005684:	d001      	beq.n	800568a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e01a      	b.n	80056c0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2220      	movs	r2, #32
 8005690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	490b      	ldr	r1, [pc, #44]	@ (80056cc <HAL_I2C_Master_Receive+0x20c>)
 800569e:	400a      	ands	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2241      	movs	r2, #65	@ 0x41
 80056a6:	2120      	movs	r1, #32
 80056a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2242      	movs	r2, #66	@ 0x42
 80056ae:	2100      	movs	r1, #0
 80056b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2240      	movs	r2, #64	@ 0x40
 80056b6:	2100      	movs	r1, #0
 80056b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e000      	b.n	80056c0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80056be:	2302      	movs	r3, #2
  }
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b007      	add	sp, #28
 80056c6:	bd90      	pop	{r4, r7, pc}
 80056c8:	80002400 	.word	0x80002400
 80056cc:	fe00e800 	.word	0xfe00e800

080056d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	2202      	movs	r2, #2
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d103      	bne.n	80056ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d007      	beq.n	800570c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2101      	movs	r1, #1
 8005708:	430a      	orrs	r2, r1
 800570a:	619a      	str	r2, [r3, #24]
  }
}
 800570c:	46c0      	nop			@ (mov r8, r8)
 800570e:	46bd      	mov	sp, r7
 8005710:	b002      	add	sp, #8
 8005712:	bd80      	pop	{r7, pc}

08005714 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	1dfb      	adds	r3, r7, #7
 8005722:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005724:	e03a      	b.n	800579c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	6839      	ldr	r1, [r7, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	0018      	movs	r0, r3
 800572e:	f000 f971 	bl	8005a14 <I2C_IsErrorOccurred>
 8005732:	1e03      	subs	r3, r0, #0
 8005734:	d001      	beq.n	800573a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e040      	b.n	80057bc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	3301      	adds	r3, #1
 800573e:	d02d      	beq.n	800579c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005740:	f7ff fa8a 	bl	8004c58 <HAL_GetTick>
 8005744:	0002      	movs	r2, r0
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d302      	bcc.n	8005756 <I2C_WaitOnFlagUntilTimeout+0x42>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d122      	bne.n	800579c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	425a      	negs	r2, r3
 8005766:	4153      	adcs	r3, r2
 8005768:	b2db      	uxtb	r3, r3
 800576a:	001a      	movs	r2, r3
 800576c:	1dfb      	adds	r3, r7, #7
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d113      	bne.n	800579c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005778:	2220      	movs	r2, #32
 800577a:	431a      	orrs	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2241      	movs	r2, #65	@ 0x41
 8005784:	2120      	movs	r1, #32
 8005786:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2242      	movs	r2, #66	@ 0x42
 800578c:	2100      	movs	r1, #0
 800578e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2240      	movs	r2, #64	@ 0x40
 8005794:	2100      	movs	r1, #0
 8005796:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e00f      	b.n	80057bc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	4013      	ands	r3, r2
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	425a      	negs	r2, r3
 80057ac:	4153      	adcs	r3, r2
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	001a      	movs	r2, r3
 80057b2:	1dfb      	adds	r3, r7, #7
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d0b5      	beq.n	8005726 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b004      	add	sp, #16
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057d0:	e032      	b.n	8005838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	0018      	movs	r0, r3
 80057da:	f000 f91b 	bl	8005a14 <I2C_IsErrorOccurred>
 80057de:	1e03      	subs	r3, r0, #0
 80057e0:	d001      	beq.n	80057e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e030      	b.n	8005848 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3301      	adds	r3, #1
 80057ea:	d025      	beq.n	8005838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ec:	f7ff fa34 	bl	8004c58 <HAL_GetTick>
 80057f0:	0002      	movs	r2, r0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11a      	bne.n	8005838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2202      	movs	r2, #2
 800580a:	4013      	ands	r3, r2
 800580c:	2b02      	cmp	r3, #2
 800580e:	d013      	beq.n	8005838 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005814:	2220      	movs	r2, #32
 8005816:	431a      	orrs	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2241      	movs	r2, #65	@ 0x41
 8005820:	2120      	movs	r1, #32
 8005822:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2242      	movs	r2, #66	@ 0x42
 8005828:	2100      	movs	r1, #0
 800582a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2240      	movs	r2, #64	@ 0x40
 8005830:	2100      	movs	r1, #0
 8005832:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e007      	b.n	8005848 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	2202      	movs	r2, #2
 8005840:	4013      	ands	r3, r2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d1c5      	bne.n	80057d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	0018      	movs	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	b004      	add	sp, #16
 800584e:	bd80      	pop	{r7, pc}

08005850 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800585c:	e02f      	b.n	80058be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	0018      	movs	r0, r3
 8005866:	f000 f8d5 	bl	8005a14 <I2C_IsErrorOccurred>
 800586a:	1e03      	subs	r3, r0, #0
 800586c:	d001      	beq.n	8005872 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e02d      	b.n	80058ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005872:	f7ff f9f1 	bl	8004c58 <HAL_GetTick>
 8005876:	0002      	movs	r2, r0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	d302      	bcc.n	8005888 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d11a      	bne.n	80058be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2220      	movs	r2, #32
 8005890:	4013      	ands	r3, r2
 8005892:	2b20      	cmp	r3, #32
 8005894:	d013      	beq.n	80058be <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	2220      	movs	r2, #32
 800589c:	431a      	orrs	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2241      	movs	r2, #65	@ 0x41
 80058a6:	2120      	movs	r1, #32
 80058a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2242      	movs	r2, #66	@ 0x42
 80058ae:	2100      	movs	r1, #0
 80058b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2240      	movs	r2, #64	@ 0x40
 80058b6:	2100      	movs	r1, #0
 80058b8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e007      	b.n	80058ce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	2220      	movs	r2, #32
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d1c8      	bne.n	800585e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	0018      	movs	r0, r3
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b004      	add	sp, #16
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e4:	2317      	movs	r3, #23
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80058ec:	e07b      	b.n	80059e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	0018      	movs	r0, r3
 80058f6:	f000 f88d 	bl	8005a14 <I2C_IsErrorOccurred>
 80058fa:	1e03      	subs	r3, r0, #0
 80058fc:	d003      	beq.n	8005906 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80058fe:	2317      	movs	r3, #23
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	2220      	movs	r2, #32
 800590e:	4013      	ands	r3, r2
 8005910:	2b20      	cmp	r3, #32
 8005912:	d140      	bne.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8005914:	2117      	movs	r1, #23
 8005916:	187b      	adds	r3, r7, r1
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d13b      	bne.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	2204      	movs	r2, #4
 8005926:	4013      	ands	r3, r2
 8005928:	2b04      	cmp	r3, #4
 800592a:	d106      	bne.n	800593a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005934:	187b      	adds	r3, r7, r1
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2210      	movs	r2, #16
 8005942:	4013      	ands	r3, r2
 8005944:	2b10      	cmp	r3, #16
 8005946:	d123      	bne.n	8005990 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2210      	movs	r2, #16
 800594e:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2204      	movs	r2, #4
 8005954:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2220      	movs	r2, #32
 800595c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4929      	ldr	r1, [pc, #164]	@ (8005a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800596a:	400a      	ands	r2, r1
 800596c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2241      	movs	r2, #65	@ 0x41
 8005972:	2120      	movs	r1, #32
 8005974:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2242      	movs	r2, #66	@ 0x42
 800597a:	2100      	movs	r1, #0
 800597c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2240      	movs	r2, #64	@ 0x40
 8005982:	2100      	movs	r1, #0
 8005984:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8005986:	2317      	movs	r3, #23
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	2201      	movs	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	e002      	b.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005996:	f7ff f95f 	bl	8004c58 <HAL_GetTick>
 800599a:	0002      	movs	r2, r0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d11c      	bne.n	80059e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80059ac:	2017      	movs	r0, #23
 80059ae:	183b      	adds	r3, r7, r0
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d117      	bne.n	80059e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2204      	movs	r2, #4
 80059be:	4013      	ands	r3, r2
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d010      	beq.n	80059e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c8:	2220      	movs	r2, #32
 80059ca:	431a      	orrs	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2241      	movs	r2, #65	@ 0x41
 80059d4:	2120      	movs	r1, #32
 80059d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2240      	movs	r2, #64	@ 0x40
 80059dc:	2100      	movs	r1, #0
 80059de:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80059e0:	183b      	adds	r3, r7, r0
 80059e2:	2201      	movs	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2204      	movs	r2, #4
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	d005      	beq.n	8005a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80059f4:	2317      	movs	r3, #23
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d100      	bne.n	8005a00 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80059fe:	e776      	b.n	80058ee <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8005a00:	2317      	movs	r3, #23
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	781b      	ldrb	r3, [r3, #0]
}
 8005a06:	0018      	movs	r0, r3
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b006      	add	sp, #24
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	fe00e800 	.word	0xfe00e800

08005a14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08a      	sub	sp, #40	@ 0x28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a20:	2327      	movs	r3, #39	@ 0x27
 8005a22:	18fb      	adds	r3, r7, r3
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2210      	movs	r2, #16
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	d100      	bne.n	8005a42 <I2C_IsErrorOccurred+0x2e>
 8005a40:	e079      	b.n	8005b36 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2210      	movs	r2, #16
 8005a48:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a4a:	e057      	b.n	8005afc <I2C_IsErrorOccurred+0xe8>
 8005a4c:	2227      	movs	r2, #39	@ 0x27
 8005a4e:	18bb      	adds	r3, r7, r2
 8005a50:	18ba      	adds	r2, r7, r2
 8005a52:	7812      	ldrb	r2, [r2, #0]
 8005a54:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	d04f      	beq.n	8005afc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a5c:	f7ff f8fc 	bl	8004c58 <HAL_GetTick>
 8005a60:	0002      	movs	r2, r0
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d302      	bcc.n	8005a72 <I2C_IsErrorOccurred+0x5e>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d144      	bne.n	8005afc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	2380      	movs	r3, #128	@ 0x80
 8005a7a:	01db      	lsls	r3, r3, #7
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005a80:	2013      	movs	r0, #19
 8005a82:	183b      	adds	r3, r7, r0
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	2142      	movs	r1, #66	@ 0x42
 8005a88:	5c52      	ldrb	r2, [r2, r1]
 8005a8a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	2380      	movs	r3, #128	@ 0x80
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	401a      	ands	r2, r3
 8005a98:	2380      	movs	r3, #128	@ 0x80
 8005a9a:	021b      	lsls	r3, r3, #8
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d126      	bne.n	8005aee <I2C_IsErrorOccurred+0xda>
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	2380      	movs	r3, #128	@ 0x80
 8005aa4:	01db      	lsls	r3, r3, #7
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d021      	beq.n	8005aee <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8005aaa:	183b      	adds	r3, r7, r0
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d01d      	beq.n	8005aee <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2180      	movs	r1, #128	@ 0x80
 8005abe:	01c9      	lsls	r1, r1, #7
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005ac4:	f7ff f8c8 	bl	8004c58 <HAL_GetTick>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005acc:	e00f      	b.n	8005aee <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ace:	f7ff f8c3 	bl	8004c58 <HAL_GetTick>
 8005ad2:	0002      	movs	r2, r0
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b19      	cmp	r3, #25
 8005ada:	d908      	bls.n	8005aee <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ae4:	2327      	movs	r3, #39	@ 0x27
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	2201      	movs	r2, #1
 8005aea:	701a      	strb	r2, [r3, #0]

              break;
 8005aec:	e006      	b.n	8005afc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2220      	movs	r2, #32
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d1e8      	bne.n	8005ace <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	2220      	movs	r2, #32
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d004      	beq.n	8005b14 <I2C_IsErrorOccurred+0x100>
 8005b0a:	2327      	movs	r3, #39	@ 0x27
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d09b      	beq.n	8005a4c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b14:	2327      	movs	r3, #39	@ 0x27
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d103      	bne.n	8005b26 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2220      	movs	r2, #32
 8005b24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b2e:	2327      	movs	r3, #39	@ 0x27
 8005b30:	18fb      	adds	r3, r7, r3
 8005b32:	2201      	movs	r2, #1
 8005b34:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	2380      	movs	r3, #128	@ 0x80
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4013      	ands	r3, r2
 8005b46:	d00c      	beq.n	8005b62 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2280      	movs	r2, #128	@ 0x80
 8005b56:	0052      	lsls	r2, r2, #1
 8005b58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b5a:	2327      	movs	r3, #39	@ 0x27
 8005b5c:	18fb      	adds	r3, r7, r3
 8005b5e:	2201      	movs	r2, #1
 8005b60:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	2380      	movs	r3, #128	@ 0x80
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d00c      	beq.n	8005b86 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	2208      	movs	r2, #8
 8005b70:	4313      	orrs	r3, r2
 8005b72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2280      	movs	r2, #128	@ 0x80
 8005b7a:	00d2      	lsls	r2, r2, #3
 8005b7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b7e:	2327      	movs	r3, #39	@ 0x27
 8005b80:	18fb      	adds	r3, r7, r3
 8005b82:	2201      	movs	r2, #1
 8005b84:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	2380      	movs	r3, #128	@ 0x80
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d00c      	beq.n	8005baa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	2202      	movs	r2, #2
 8005b94:	4313      	orrs	r3, r2
 8005b96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2280      	movs	r2, #128	@ 0x80
 8005b9e:	0092      	lsls	r2, r2, #2
 8005ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ba2:	2327      	movs	r3, #39	@ 0x27
 8005ba4:	18fb      	adds	r3, r7, r3
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005baa:	2327      	movs	r3, #39	@ 0x27
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01d      	beq.n	8005bf0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f7ff fd8a 	bl	80056d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	490e      	ldr	r1, [pc, #56]	@ (8005c00 <I2C_IsErrorOccurred+0x1ec>)
 8005bc8:	400a      	ands	r2, r1
 8005bca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2241      	movs	r2, #65	@ 0x41
 8005bdc:	2120      	movs	r1, #32
 8005bde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2242      	movs	r2, #66	@ 0x42
 8005be4:	2100      	movs	r1, #0
 8005be6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2240      	movs	r2, #64	@ 0x40
 8005bec:	2100      	movs	r1, #0
 8005bee:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005bf0:	2327      	movs	r3, #39	@ 0x27
 8005bf2:	18fb      	adds	r3, r7, r3
 8005bf4:	781b      	ldrb	r3, [r3, #0]
}
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b00a      	add	sp, #40	@ 0x28
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	fe00e800 	.word	0xfe00e800

08005c04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c04:	b590      	push	{r4, r7, lr}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	0008      	movs	r0, r1
 8005c0e:	0011      	movs	r1, r2
 8005c10:	607b      	str	r3, [r7, #4]
 8005c12:	240a      	movs	r4, #10
 8005c14:	193b      	adds	r3, r7, r4
 8005c16:	1c02      	adds	r2, r0, #0
 8005c18:	801a      	strh	r2, [r3, #0]
 8005c1a:	2009      	movs	r0, #9
 8005c1c:	183b      	adds	r3, r7, r0
 8005c1e:	1c0a      	adds	r2, r1, #0
 8005c20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c22:	193b      	adds	r3, r7, r4
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	059b      	lsls	r3, r3, #22
 8005c28:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c2a:	183b      	adds	r3, r7, r0
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	0419      	lsls	r1, r3, #16
 8005c30:	23ff      	movs	r3, #255	@ 0xff
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c36:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c4e:	0d51      	lsrs	r1, r2, #21
 8005c50:	2280      	movs	r2, #128	@ 0x80
 8005c52:	00d2      	lsls	r2, r2, #3
 8005c54:	400a      	ands	r2, r1
 8005c56:	4907      	ldr	r1, [pc, #28]	@ (8005c74 <I2C_TransferConfig+0x70>)
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	43d2      	mvns	r2, r2
 8005c5c:	401a      	ands	r2, r3
 8005c5e:	0011      	movs	r1, r2
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b007      	add	sp, #28
 8005c70:	bd90      	pop	{r4, r7, pc}
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	03ff63ff 	.word	0x03ff63ff

08005c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2241      	movs	r2, #65	@ 0x41
 8005c86:	5c9b      	ldrb	r3, [r3, r2]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d138      	bne.n	8005d00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2240      	movs	r2, #64	@ 0x40
 8005c92:	5c9b      	ldrb	r3, [r3, r2]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e032      	b.n	8005d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2240      	movs	r2, #64	@ 0x40
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2241      	movs	r2, #65	@ 0x41
 8005ca8:	2124      	movs	r1, #36	@ 0x24
 8005caa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	438a      	bics	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4911      	ldr	r1, [pc, #68]	@ (8005d0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005cc8:	400a      	ands	r2, r1
 8005cca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6819      	ldr	r1, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2241      	movs	r2, #65	@ 0x41
 8005cf0:	2120      	movs	r1, #32
 8005cf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2240      	movs	r2, #64	@ 0x40
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e000      	b.n	8005d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d00:	2302      	movs	r3, #2
  }
}
 8005d02:	0018      	movs	r0, r3
 8005d04:	46bd      	mov	sp, r7
 8005d06:	b002      	add	sp, #8
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	46c0      	nop			@ (mov r8, r8)
 8005d0c:	ffffefff 	.word	0xffffefff

08005d10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2241      	movs	r2, #65	@ 0x41
 8005d1e:	5c9b      	ldrb	r3, [r3, r2]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d139      	bne.n	8005d9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2240      	movs	r2, #64	@ 0x40
 8005d2a:	5c9b      	ldrb	r3, [r3, r2]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e033      	b.n	8005d9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2240      	movs	r2, #64	@ 0x40
 8005d38:	2101      	movs	r1, #1
 8005d3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2241      	movs	r2, #65	@ 0x41
 8005d40:	2124      	movs	r1, #36	@ 0x24
 8005d42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2101      	movs	r1, #1
 8005d50:	438a      	bics	r2, r1
 8005d52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4a11      	ldr	r2, [pc, #68]	@ (8005da4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2101      	movs	r1, #1
 8005d82:	430a      	orrs	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2241      	movs	r2, #65	@ 0x41
 8005d8a:	2120      	movs	r1, #32
 8005d8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2240      	movs	r2, #64	@ 0x40
 8005d92:	2100      	movs	r1, #0
 8005d94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	e000      	b.n	8005d9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d9a:	2302      	movs	r3, #2
  }
}
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b004      	add	sp, #16
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	fffff0ff 	.word	0xfffff0ff

08005da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005db0:	4b19      	ldr	r3, [pc, #100]	@ (8005e18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a19      	ldr	r2, [pc, #100]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	0019      	movs	r1, r3
 8005dba:	4b17      	ldr	r3, [pc, #92]	@ (8005e18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	2380      	movs	r3, #128	@ 0x80
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d11f      	bne.n	8005e0c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005dcc:	4b14      	ldr	r3, [pc, #80]	@ (8005e20 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	0013      	movs	r3, r2
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	189b      	adds	r3, r3, r2
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	4912      	ldr	r1, [pc, #72]	@ (8005e24 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005dda:	0018      	movs	r0, r3
 8005ddc:	f7fa f9ae 	bl	800013c <__udivsi3>
 8005de0:	0003      	movs	r3, r0
 8005de2:	3301      	adds	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005de6:	e008      	b.n	8005dfa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	e001      	b.n	8005dfa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e009      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dfa:	4b07      	ldr	r3, [pc, #28]	@ (8005e18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	2380      	movs	r3, #128	@ 0x80
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	401a      	ands	r2, r3
 8005e04:	2380      	movs	r3, #128	@ 0x80
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d0ed      	beq.n	8005de8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	0018      	movs	r0, r3
 8005e10:	46bd      	mov	sp, r7
 8005e12:	b004      	add	sp, #16
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	40007000 	.word	0x40007000
 8005e1c:	fffff9ff 	.word	0xfffff9ff
 8005e20:	2000000c 	.word	0x2000000c
 8005e24:	000f4240 	.word	0x000f4240

08005e28 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005e2c:	4b03      	ldr	r3, [pc, #12]	@ (8005e3c <LL_RCC_GetAPB1Prescaler+0x14>)
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	23e0      	movs	r3, #224	@ 0xe0
 8005e32:	01db      	lsls	r3, r3, #7
 8005e34:	4013      	ands	r3, r2
}
 8005e36:	0018      	movs	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	40021000 	.word	0x40021000

08005e40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e2fe      	b.n	8006450 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2201      	movs	r2, #1
 8005e58:	4013      	ands	r3, r2
 8005e5a:	d100      	bne.n	8005e5e <HAL_RCC_OscConfig+0x1e>
 8005e5c:	e07c      	b.n	8005f58 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e5e:	4bc3      	ldr	r3, [pc, #780]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2238      	movs	r2, #56	@ 0x38
 8005e64:	4013      	ands	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e68:	4bc0      	ldr	r3, [pc, #768]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	4013      	ands	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d102      	bne.n	8005e7e <HAL_RCC_OscConfig+0x3e>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d002      	beq.n	8005e84 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d10b      	bne.n	8005e9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e84:	4bb9      	ldr	r3, [pc, #740]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	2380      	movs	r3, #128	@ 0x80
 8005e8a:	029b      	lsls	r3, r3, #10
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d062      	beq.n	8005f56 <HAL_RCC_OscConfig+0x116>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d15e      	bne.n	8005f56 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e2d9      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	025b      	lsls	r3, r3, #9
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d107      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x78>
 8005ea8:	4bb0      	ldr	r3, [pc, #704]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	4baf      	ldr	r3, [pc, #700]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005eae:	2180      	movs	r1, #128	@ 0x80
 8005eb0:	0249      	lsls	r1, r1, #9
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	e020      	b.n	8005efa <HAL_RCC_OscConfig+0xba>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	23a0      	movs	r3, #160	@ 0xa0
 8005ebe:	02db      	lsls	r3, r3, #11
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d10e      	bne.n	8005ee2 <HAL_RCC_OscConfig+0xa2>
 8005ec4:	4ba9      	ldr	r3, [pc, #676]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4ba8      	ldr	r3, [pc, #672]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005eca:	2180      	movs	r1, #128	@ 0x80
 8005ecc:	02c9      	lsls	r1, r1, #11
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	4ba6      	ldr	r3, [pc, #664]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4ba5      	ldr	r3, [pc, #660]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005ed8:	2180      	movs	r1, #128	@ 0x80
 8005eda:	0249      	lsls	r1, r1, #9
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	e00b      	b.n	8005efa <HAL_RCC_OscConfig+0xba>
 8005ee2:	4ba2      	ldr	r3, [pc, #648]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4ba1      	ldr	r3, [pc, #644]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005ee8:	49a1      	ldr	r1, [pc, #644]	@ (8006170 <HAL_RCC_OscConfig+0x330>)
 8005eea:	400a      	ands	r2, r1
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	4b9f      	ldr	r3, [pc, #636]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	4b9e      	ldr	r3, [pc, #632]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005ef4:	499f      	ldr	r1, [pc, #636]	@ (8006174 <HAL_RCC_OscConfig+0x334>)
 8005ef6:	400a      	ands	r2, r1
 8005ef8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d014      	beq.n	8005f2c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f02:	f7fe fea9 	bl	8004c58 <HAL_GetTick>
 8005f06:	0003      	movs	r3, r0
 8005f08:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f0c:	f7fe fea4 	bl	8004c58 <HAL_GetTick>
 8005f10:	0002      	movs	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	@ 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e298      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f1e:	4b93      	ldr	r3, [pc, #588]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	2380      	movs	r3, #128	@ 0x80
 8005f24:	029b      	lsls	r3, r3, #10
 8005f26:	4013      	ands	r3, r2
 8005f28:	d0f0      	beq.n	8005f0c <HAL_RCC_OscConfig+0xcc>
 8005f2a:	e015      	b.n	8005f58 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2c:	f7fe fe94 	bl	8004c58 <HAL_GetTick>
 8005f30:	0003      	movs	r3, r0
 8005f32:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f36:	f7fe fe8f 	bl	8004c58 <HAL_GetTick>
 8005f3a:	0002      	movs	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b64      	cmp	r3, #100	@ 0x64
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e283      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f48:	4b88      	ldr	r3, [pc, #544]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	2380      	movs	r3, #128	@ 0x80
 8005f4e:	029b      	lsls	r3, r3, #10
 8005f50:	4013      	ands	r3, r2
 8005f52:	d1f0      	bne.n	8005f36 <HAL_RCC_OscConfig+0xf6>
 8005f54:	e000      	b.n	8005f58 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	4013      	ands	r3, r2
 8005f60:	d100      	bne.n	8005f64 <HAL_RCC_OscConfig+0x124>
 8005f62:	e099      	b.n	8006098 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f64:	4b81      	ldr	r3, [pc, #516]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2238      	movs	r2, #56	@ 0x38
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2203      	movs	r2, #3
 8005f74:	4013      	ands	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b10      	cmp	r3, #16
 8005f7c:	d102      	bne.n	8005f84 <HAL_RCC_OscConfig+0x144>
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d002      	beq.n	8005f8a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d135      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f8a:	4b78      	ldr	r3, [pc, #480]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	2380      	movs	r3, #128	@ 0x80
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4013      	ands	r3, r2
 8005f94:	d005      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x162>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e256      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa2:	4b72      	ldr	r3, [pc, #456]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4a74      	ldr	r2, [pc, #464]	@ (8006178 <HAL_RCC_OscConfig+0x338>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	0019      	movs	r1, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	021a      	lsls	r2, r3, #8
 8005fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d112      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005fbe:	4b6b      	ldr	r3, [pc, #428]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a6e      	ldr	r2, [pc, #440]	@ (800617c <HAL_RCC_OscConfig+0x33c>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	0019      	movs	r1, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	4b67      	ldr	r3, [pc, #412]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005fd2:	4b66      	ldr	r3, [pc, #408]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	0adb      	lsrs	r3, r3, #11
 8005fd8:	2207      	movs	r2, #7
 8005fda:	4013      	ands	r3, r2
 8005fdc:	4a68      	ldr	r2, [pc, #416]	@ (8006180 <HAL_RCC_OscConfig+0x340>)
 8005fde:	40da      	lsrs	r2, r3
 8005fe0:	4b68      	ldr	r3, [pc, #416]	@ (8006184 <HAL_RCC_OscConfig+0x344>)
 8005fe2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fe4:	4b68      	ldr	r3, [pc, #416]	@ (8006188 <HAL_RCC_OscConfig+0x348>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f7fe fdd9 	bl	8004ba0 <HAL_InitTick>
 8005fee:	1e03      	subs	r3, r0, #0
 8005ff0:	d051      	beq.n	8006096 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e22c      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d030      	beq.n	8006060 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a5e      	ldr	r2, [pc, #376]	@ (800617c <HAL_RCC_OscConfig+0x33c>)
 8006004:	4013      	ands	r3, r2
 8006006:	0019      	movs	r1, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	4b57      	ldr	r3, [pc, #348]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 800600e:	430a      	orrs	r2, r1
 8006010:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006012:	4b56      	ldr	r3, [pc, #344]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b55      	ldr	r3, [pc, #340]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8006018:	2180      	movs	r1, #128	@ 0x80
 800601a:	0049      	lsls	r1, r1, #1
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fe fe1a 	bl	8004c58 <HAL_GetTick>
 8006024:	0003      	movs	r3, r0
 8006026:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602a:	f7fe fe15 	bl	8004c58 <HAL_GetTick>
 800602e:	0002      	movs	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e209      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800603c:	4b4b      	ldr	r3, [pc, #300]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	2380      	movs	r3, #128	@ 0x80
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4013      	ands	r3, r2
 8006046:	d0f0      	beq.n	800602a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006048:	4b48      	ldr	r3, [pc, #288]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4a4a      	ldr	r2, [pc, #296]	@ (8006178 <HAL_RCC_OscConfig+0x338>)
 800604e:	4013      	ands	r3, r2
 8006050:	0019      	movs	r1, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	021a      	lsls	r2, r3, #8
 8006058:	4b44      	ldr	r3, [pc, #272]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 800605a:	430a      	orrs	r2, r1
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	e01b      	b.n	8006098 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006060:	4b42      	ldr	r3, [pc, #264]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4b41      	ldr	r3, [pc, #260]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8006066:	4949      	ldr	r1, [pc, #292]	@ (800618c <HAL_RCC_OscConfig+0x34c>)
 8006068:	400a      	ands	r2, r1
 800606a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fe fdf4 	bl	8004c58 <HAL_GetTick>
 8006070:	0003      	movs	r3, r0
 8006072:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006076:	f7fe fdef 	bl	8004c58 <HAL_GetTick>
 800607a:	0002      	movs	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e1e3      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006088:	4b38      	ldr	r3, [pc, #224]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	2380      	movs	r3, #128	@ 0x80
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4013      	ands	r3, r2
 8006092:	d1f0      	bne.n	8006076 <HAL_RCC_OscConfig+0x236>
 8006094:	e000      	b.n	8006098 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006096:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2208      	movs	r2, #8
 800609e:	4013      	ands	r3, r2
 80060a0:	d047      	beq.n	8006132 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80060a2:	4b32      	ldr	r3, [pc, #200]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2238      	movs	r2, #56	@ 0x38
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b18      	cmp	r3, #24
 80060ac:	d10a      	bne.n	80060c4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80060ae:	4b2f      	ldr	r3, [pc, #188]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 80060b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060b2:	2202      	movs	r2, #2
 80060b4:	4013      	ands	r3, r2
 80060b6:	d03c      	beq.n	8006132 <HAL_RCC_OscConfig+0x2f2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d138      	bne.n	8006132 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e1c5      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d019      	beq.n	8006100 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80060cc:	4b27      	ldr	r3, [pc, #156]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 80060ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80060d0:	4b26      	ldr	r3, [pc, #152]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 80060d2:	2101      	movs	r1, #1
 80060d4:	430a      	orrs	r2, r1
 80060d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d8:	f7fe fdbe 	bl	8004c58 <HAL_GetTick>
 80060dc:	0003      	movs	r3, r0
 80060de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060e0:	e008      	b.n	80060f4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e2:	f7fe fdb9 	bl	8004c58 <HAL_GetTick>
 80060e6:	0002      	movs	r2, r0
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e1ad      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060f4:	4b1d      	ldr	r3, [pc, #116]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 80060f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060f8:	2202      	movs	r2, #2
 80060fa:	4013      	ands	r3, r2
 80060fc:	d0f1      	beq.n	80060e2 <HAL_RCC_OscConfig+0x2a2>
 80060fe:	e018      	b.n	8006132 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006100:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8006102:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006104:	4b19      	ldr	r3, [pc, #100]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8006106:	2101      	movs	r1, #1
 8006108:	438a      	bics	r2, r1
 800610a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610c:	f7fe fda4 	bl	8004c58 <HAL_GetTick>
 8006110:	0003      	movs	r3, r0
 8006112:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006116:	f7fe fd9f 	bl	8004c58 <HAL_GetTick>
 800611a:	0002      	movs	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e193      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006128:	4b10      	ldr	r3, [pc, #64]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 800612a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800612c:	2202      	movs	r2, #2
 800612e:	4013      	ands	r3, r2
 8006130:	d1f1      	bne.n	8006116 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2204      	movs	r2, #4
 8006138:	4013      	ands	r3, r2
 800613a:	d100      	bne.n	800613e <HAL_RCC_OscConfig+0x2fe>
 800613c:	e0c6      	b.n	80062cc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800613e:	231f      	movs	r3, #31
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006146:	4b09      	ldr	r3, [pc, #36]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2238      	movs	r2, #56	@ 0x38
 800614c:	4013      	ands	r3, r2
 800614e:	2b20      	cmp	r3, #32
 8006150:	d11e      	bne.n	8006190 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006152:	4b06      	ldr	r3, [pc, #24]	@ (800616c <HAL_RCC_OscConfig+0x32c>)
 8006154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006156:	2202      	movs	r2, #2
 8006158:	4013      	ands	r3, r2
 800615a:	d100      	bne.n	800615e <HAL_RCC_OscConfig+0x31e>
 800615c:	e0b6      	b.n	80062cc <HAL_RCC_OscConfig+0x48c>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d000      	beq.n	8006168 <HAL_RCC_OscConfig+0x328>
 8006166:	e0b1      	b.n	80062cc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e171      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
 800616c:	40021000 	.word	0x40021000
 8006170:	fffeffff 	.word	0xfffeffff
 8006174:	fffbffff 	.word	0xfffbffff
 8006178:	ffff80ff 	.word	0xffff80ff
 800617c:	ffffc7ff 	.word	0xffffc7ff
 8006180:	00f42400 	.word	0x00f42400
 8006184:	2000000c 	.word	0x2000000c
 8006188:	20000010 	.word	0x20000010
 800618c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006190:	4bb1      	ldr	r3, [pc, #708]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006192:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006194:	2380      	movs	r3, #128	@ 0x80
 8006196:	055b      	lsls	r3, r3, #21
 8006198:	4013      	ands	r3, r2
 800619a:	d101      	bne.n	80061a0 <HAL_RCC_OscConfig+0x360>
 800619c:	2301      	movs	r3, #1
 800619e:	e000      	b.n	80061a2 <HAL_RCC_OscConfig+0x362>
 80061a0:	2300      	movs	r3, #0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d011      	beq.n	80061ca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80061a6:	4bac      	ldr	r3, [pc, #688]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80061a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061aa:	4bab      	ldr	r3, [pc, #684]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80061ac:	2180      	movs	r1, #128	@ 0x80
 80061ae:	0549      	lsls	r1, r1, #21
 80061b0:	430a      	orrs	r2, r1
 80061b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80061b4:	4ba8      	ldr	r3, [pc, #672]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80061b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061b8:	2380      	movs	r3, #128	@ 0x80
 80061ba:	055b      	lsls	r3, r3, #21
 80061bc:	4013      	ands	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80061c2:	231f      	movs	r3, #31
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061ca:	4ba4      	ldr	r3, [pc, #656]	@ (800645c <HAL_RCC_OscConfig+0x61c>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	2380      	movs	r3, #128	@ 0x80
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	4013      	ands	r3, r2
 80061d4:	d11a      	bne.n	800620c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061d6:	4ba1      	ldr	r3, [pc, #644]	@ (800645c <HAL_RCC_OscConfig+0x61c>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4ba0      	ldr	r3, [pc, #640]	@ (800645c <HAL_RCC_OscConfig+0x61c>)
 80061dc:	2180      	movs	r1, #128	@ 0x80
 80061de:	0049      	lsls	r1, r1, #1
 80061e0:	430a      	orrs	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80061e4:	f7fe fd38 	bl	8004c58 <HAL_GetTick>
 80061e8:	0003      	movs	r3, r0
 80061ea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ee:	f7fe fd33 	bl	8004c58 <HAL_GetTick>
 80061f2:	0002      	movs	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e127      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006200:	4b96      	ldr	r3, [pc, #600]	@ (800645c <HAL_RCC_OscConfig+0x61c>)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	2380      	movs	r3, #128	@ 0x80
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	4013      	ands	r3, r2
 800620a:	d0f0      	beq.n	80061ee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d106      	bne.n	8006222 <HAL_RCC_OscConfig+0x3e2>
 8006214:	4b90      	ldr	r3, [pc, #576]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006216:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006218:	4b8f      	ldr	r3, [pc, #572]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 800621a:	2101      	movs	r1, #1
 800621c:	430a      	orrs	r2, r1
 800621e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006220:	e01c      	b.n	800625c <HAL_RCC_OscConfig+0x41c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	2b05      	cmp	r3, #5
 8006228:	d10c      	bne.n	8006244 <HAL_RCC_OscConfig+0x404>
 800622a:	4b8b      	ldr	r3, [pc, #556]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 800622c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800622e:	4b8a      	ldr	r3, [pc, #552]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006230:	2104      	movs	r1, #4
 8006232:	430a      	orrs	r2, r1
 8006234:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006236:	4b88      	ldr	r3, [pc, #544]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006238:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800623a:	4b87      	ldr	r3, [pc, #540]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 800623c:	2101      	movs	r1, #1
 800623e:	430a      	orrs	r2, r1
 8006240:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006242:	e00b      	b.n	800625c <HAL_RCC_OscConfig+0x41c>
 8006244:	4b84      	ldr	r3, [pc, #528]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006246:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006248:	4b83      	ldr	r3, [pc, #524]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 800624a:	2101      	movs	r1, #1
 800624c:	438a      	bics	r2, r1
 800624e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006250:	4b81      	ldr	r3, [pc, #516]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006252:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006254:	4b80      	ldr	r3, [pc, #512]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006256:	2104      	movs	r1, #4
 8006258:	438a      	bics	r2, r1
 800625a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d014      	beq.n	800628e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fe fcf8 	bl	8004c58 <HAL_GetTick>
 8006268:	0003      	movs	r3, r0
 800626a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800626c:	e009      	b.n	8006282 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626e:	f7fe fcf3 	bl	8004c58 <HAL_GetTick>
 8006272:	0002      	movs	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	4a79      	ldr	r2, [pc, #484]	@ (8006460 <HAL_RCC_OscConfig+0x620>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e0e6      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006282:	4b75      	ldr	r3, [pc, #468]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006286:	2202      	movs	r2, #2
 8006288:	4013      	ands	r3, r2
 800628a:	d0f0      	beq.n	800626e <HAL_RCC_OscConfig+0x42e>
 800628c:	e013      	b.n	80062b6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628e:	f7fe fce3 	bl	8004c58 <HAL_GetTick>
 8006292:	0003      	movs	r3, r0
 8006294:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006296:	e009      	b.n	80062ac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006298:	f7fe fcde 	bl	8004c58 <HAL_GetTick>
 800629c:	0002      	movs	r2, r0
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	4a6f      	ldr	r2, [pc, #444]	@ (8006460 <HAL_RCC_OscConfig+0x620>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e0d1      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062ac:	4b6a      	ldr	r3, [pc, #424]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80062ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b0:	2202      	movs	r2, #2
 80062b2:	4013      	ands	r3, r2
 80062b4:	d1f0      	bne.n	8006298 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80062b6:	231f      	movs	r3, #31
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d105      	bne.n	80062cc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80062c0:	4b65      	ldr	r3, [pc, #404]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80062c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062c4:	4b64      	ldr	r3, [pc, #400]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80062c6:	4967      	ldr	r1, [pc, #412]	@ (8006464 <HAL_RCC_OscConfig+0x624>)
 80062c8:	400a      	ands	r2, r1
 80062ca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d100      	bne.n	80062d6 <HAL_RCC_OscConfig+0x496>
 80062d4:	e0bb      	b.n	800644e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062d6:	4b60      	ldr	r3, [pc, #384]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2238      	movs	r2, #56	@ 0x38
 80062dc:	4013      	ands	r3, r2
 80062de:	2b10      	cmp	r3, #16
 80062e0:	d100      	bne.n	80062e4 <HAL_RCC_OscConfig+0x4a4>
 80062e2:	e07b      	b.n	80063dc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d156      	bne.n	800639a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4b59      	ldr	r3, [pc, #356]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80062f2:	495d      	ldr	r1, [pc, #372]	@ (8006468 <HAL_RCC_OscConfig+0x628>)
 80062f4:	400a      	ands	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fe fcae 	bl	8004c58 <HAL_GetTick>
 80062fc:	0003      	movs	r3, r0
 80062fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006302:	f7fe fca9 	bl	8004c58 <HAL_GetTick>
 8006306:	0002      	movs	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e09d      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006314:	4b50      	ldr	r3, [pc, #320]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	2380      	movs	r3, #128	@ 0x80
 800631a:	049b      	lsls	r3, r3, #18
 800631c:	4013      	ands	r3, r2
 800631e:	d1f0      	bne.n	8006302 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006320:	4b4d      	ldr	r3, [pc, #308]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4a51      	ldr	r2, [pc, #324]	@ (800646c <HAL_RCC_OscConfig+0x62c>)
 8006326:	4013      	ands	r3, r2
 8006328:	0019      	movs	r1, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1a      	ldr	r2, [r3, #32]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800634c:	431a      	orrs	r2, r3
 800634e:	4b42      	ldr	r3, [pc, #264]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006350:	430a      	orrs	r2, r1
 8006352:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006354:	4b40      	ldr	r3, [pc, #256]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4b3f      	ldr	r3, [pc, #252]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 800635a:	2180      	movs	r1, #128	@ 0x80
 800635c:	0449      	lsls	r1, r1, #17
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006362:	4b3d      	ldr	r3, [pc, #244]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	4b3c      	ldr	r3, [pc, #240]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 8006368:	2180      	movs	r1, #128	@ 0x80
 800636a:	0549      	lsls	r1, r1, #21
 800636c:	430a      	orrs	r2, r1
 800636e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006370:	f7fe fc72 	bl	8004c58 <HAL_GetTick>
 8006374:	0003      	movs	r3, r0
 8006376:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006378:	e008      	b.n	800638c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800637a:	f7fe fc6d 	bl	8004c58 <HAL_GetTick>
 800637e:	0002      	movs	r2, r0
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e061      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800638c:	4b32      	ldr	r3, [pc, #200]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	2380      	movs	r3, #128	@ 0x80
 8006392:	049b      	lsls	r3, r3, #18
 8006394:	4013      	ands	r3, r2
 8006396:	d0f0      	beq.n	800637a <HAL_RCC_OscConfig+0x53a>
 8006398:	e059      	b.n	800644e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800639a:	4b2f      	ldr	r3, [pc, #188]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b2e      	ldr	r3, [pc, #184]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80063a0:	4931      	ldr	r1, [pc, #196]	@ (8006468 <HAL_RCC_OscConfig+0x628>)
 80063a2:	400a      	ands	r2, r1
 80063a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a6:	f7fe fc57 	bl	8004c58 <HAL_GetTick>
 80063aa:	0003      	movs	r3, r0
 80063ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063b0:	f7fe fc52 	bl	8004c58 <HAL_GetTick>
 80063b4:	0002      	movs	r2, r0
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e046      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063c2:	4b25      	ldr	r3, [pc, #148]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	2380      	movs	r3, #128	@ 0x80
 80063c8:	049b      	lsls	r3, r3, #18
 80063ca:	4013      	ands	r3, r2
 80063cc:	d1f0      	bne.n	80063b0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80063ce:	4b22      	ldr	r3, [pc, #136]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	4b21      	ldr	r3, [pc, #132]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80063d4:	4926      	ldr	r1, [pc, #152]	@ (8006470 <HAL_RCC_OscConfig+0x630>)
 80063d6:	400a      	ands	r2, r1
 80063d8:	60da      	str	r2, [r3, #12]
 80063da:	e038      	b.n	800644e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e033      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80063e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006458 <HAL_RCC_OscConfig+0x618>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2203      	movs	r2, #3
 80063f2:	401a      	ands	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d126      	bne.n	800644a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2270      	movs	r2, #112	@ 0x70
 8006400:	401a      	ands	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006406:	429a      	cmp	r2, r3
 8006408:	d11f      	bne.n	800644a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	23fe      	movs	r3, #254	@ 0xfe
 800640e:	01db      	lsls	r3, r3, #7
 8006410:	401a      	ands	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006418:	429a      	cmp	r2, r3
 800641a:	d116      	bne.n	800644a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	23f8      	movs	r3, #248	@ 0xf8
 8006420:	039b      	lsls	r3, r3, #14
 8006422:	401a      	ands	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006428:	429a      	cmp	r2, r3
 800642a:	d10e      	bne.n	800644a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	23e0      	movs	r3, #224	@ 0xe0
 8006430:	051b      	lsls	r3, r3, #20
 8006432:	401a      	ands	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006438:	429a      	cmp	r2, r3
 800643a:	d106      	bne.n	800644a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	0f5b      	lsrs	r3, r3, #29
 8006440:	075a      	lsls	r2, r3, #29
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006446:	429a      	cmp	r2, r3
 8006448:	d001      	beq.n	800644e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	0018      	movs	r0, r3
 8006452:	46bd      	mov	sp, r7
 8006454:	b008      	add	sp, #32
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40021000 	.word	0x40021000
 800645c:	40007000 	.word	0x40007000
 8006460:	00001388 	.word	0x00001388
 8006464:	efffffff 	.word	0xefffffff
 8006468:	feffffff 	.word	0xfeffffff
 800646c:	11c1808c 	.word	0x11c1808c
 8006470:	eefefffc 	.word	0xeefefffc

08006474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0e9      	b.n	800665c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006488:	4b76      	ldr	r3, [pc, #472]	@ (8006664 <HAL_RCC_ClockConfig+0x1f0>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2207      	movs	r2, #7
 800648e:	4013      	ands	r3, r2
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	429a      	cmp	r2, r3
 8006494:	d91e      	bls.n	80064d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006496:	4b73      	ldr	r3, [pc, #460]	@ (8006664 <HAL_RCC_ClockConfig+0x1f0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2207      	movs	r2, #7
 800649c:	4393      	bics	r3, r2
 800649e:	0019      	movs	r1, r3
 80064a0:	4b70      	ldr	r3, [pc, #448]	@ (8006664 <HAL_RCC_ClockConfig+0x1f0>)
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064a8:	f7fe fbd6 	bl	8004c58 <HAL_GetTick>
 80064ac:	0003      	movs	r3, r0
 80064ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064b0:	e009      	b.n	80064c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b2:	f7fe fbd1 	bl	8004c58 <HAL_GetTick>
 80064b6:	0002      	movs	r2, r0
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	4a6a      	ldr	r2, [pc, #424]	@ (8006668 <HAL_RCC_ClockConfig+0x1f4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e0ca      	b.n	800665c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80064c6:	4b67      	ldr	r3, [pc, #412]	@ (8006664 <HAL_RCC_ClockConfig+0x1f0>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2207      	movs	r2, #7
 80064cc:	4013      	ands	r3, r2
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d1ee      	bne.n	80064b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2202      	movs	r2, #2
 80064da:	4013      	ands	r3, r2
 80064dc:	d015      	beq.n	800650a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2204      	movs	r2, #4
 80064e4:	4013      	ands	r3, r2
 80064e6:	d006      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80064e8:	4b60      	ldr	r3, [pc, #384]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	4b5f      	ldr	r3, [pc, #380]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 80064ee:	21e0      	movs	r1, #224	@ 0xe0
 80064f0:	01c9      	lsls	r1, r1, #7
 80064f2:	430a      	orrs	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f6:	4b5d      	ldr	r3, [pc, #372]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	4a5d      	ldr	r2, [pc, #372]	@ (8006670 <HAL_RCC_ClockConfig+0x1fc>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	0019      	movs	r1, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	4b59      	ldr	r3, [pc, #356]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 8006506:	430a      	orrs	r2, r1
 8006508:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2201      	movs	r2, #1
 8006510:	4013      	ands	r3, r2
 8006512:	d057      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d107      	bne.n	800652c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800651c:	4b53      	ldr	r3, [pc, #332]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	2380      	movs	r3, #128	@ 0x80
 8006522:	029b      	lsls	r3, r3, #10
 8006524:	4013      	ands	r3, r2
 8006526:	d12b      	bne.n	8006580 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e097      	b.n	800665c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d107      	bne.n	8006544 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006534:	4b4d      	ldr	r3, [pc, #308]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	2380      	movs	r3, #128	@ 0x80
 800653a:	049b      	lsls	r3, r3, #18
 800653c:	4013      	ands	r3, r2
 800653e:	d11f      	bne.n	8006580 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e08b      	b.n	800665c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d107      	bne.n	800655c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800654c:	4b47      	ldr	r3, [pc, #284]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	2380      	movs	r3, #128	@ 0x80
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	4013      	ands	r3, r2
 8006556:	d113      	bne.n	8006580 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e07f      	b.n	800665c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d106      	bne.n	8006572 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006564:	4b41      	ldr	r3, [pc, #260]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 8006566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006568:	2202      	movs	r2, #2
 800656a:	4013      	ands	r3, r2
 800656c:	d108      	bne.n	8006580 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e074      	b.n	800665c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006572:	4b3e      	ldr	r3, [pc, #248]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 8006574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006576:	2202      	movs	r2, #2
 8006578:	4013      	ands	r3, r2
 800657a:	d101      	bne.n	8006580 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e06d      	b.n	800665c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006580:	4b3a      	ldr	r3, [pc, #232]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2207      	movs	r2, #7
 8006586:	4393      	bics	r3, r2
 8006588:	0019      	movs	r1, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685a      	ldr	r2, [r3, #4]
 800658e:	4b37      	ldr	r3, [pc, #220]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 8006590:	430a      	orrs	r2, r1
 8006592:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006594:	f7fe fb60 	bl	8004c58 <HAL_GetTick>
 8006598:	0003      	movs	r3, r0
 800659a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659c:	e009      	b.n	80065b2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800659e:	f7fe fb5b 	bl	8004c58 <HAL_GetTick>
 80065a2:	0002      	movs	r2, r0
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	4a2f      	ldr	r2, [pc, #188]	@ (8006668 <HAL_RCC_ClockConfig+0x1f4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e054      	b.n	800665c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b2:	4b2e      	ldr	r3, [pc, #184]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2238      	movs	r2, #56	@ 0x38
 80065b8:	401a      	ands	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d1ec      	bne.n	800659e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065c4:	4b27      	ldr	r3, [pc, #156]	@ (8006664 <HAL_RCC_ClockConfig+0x1f0>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2207      	movs	r2, #7
 80065ca:	4013      	ands	r3, r2
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d21e      	bcs.n	8006610 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d2:	4b24      	ldr	r3, [pc, #144]	@ (8006664 <HAL_RCC_ClockConfig+0x1f0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2207      	movs	r2, #7
 80065d8:	4393      	bics	r3, r2
 80065da:	0019      	movs	r1, r3
 80065dc:	4b21      	ldr	r3, [pc, #132]	@ (8006664 <HAL_RCC_ClockConfig+0x1f0>)
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065e4:	f7fe fb38 	bl	8004c58 <HAL_GetTick>
 80065e8:	0003      	movs	r3, r0
 80065ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80065ec:	e009      	b.n	8006602 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ee:	f7fe fb33 	bl	8004c58 <HAL_GetTick>
 80065f2:	0002      	movs	r2, r0
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006668 <HAL_RCC_ClockConfig+0x1f4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e02c      	b.n	800665c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006602:	4b18      	ldr	r3, [pc, #96]	@ (8006664 <HAL_RCC_ClockConfig+0x1f0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2207      	movs	r2, #7
 8006608:	4013      	ands	r3, r2
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d1ee      	bne.n	80065ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2204      	movs	r2, #4
 8006616:	4013      	ands	r3, r2
 8006618:	d009      	beq.n	800662e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800661a:	4b14      	ldr	r3, [pc, #80]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	4a15      	ldr	r2, [pc, #84]	@ (8006674 <HAL_RCC_ClockConfig+0x200>)
 8006620:	4013      	ands	r3, r2
 8006622:	0019      	movs	r1, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	4b10      	ldr	r3, [pc, #64]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 800662a:	430a      	orrs	r2, r1
 800662c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800662e:	f000 f829 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 8006632:	0001      	movs	r1, r0
 8006634:	4b0d      	ldr	r3, [pc, #52]	@ (800666c <HAL_RCC_ClockConfig+0x1f8>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	220f      	movs	r2, #15
 800663c:	401a      	ands	r2, r3
 800663e:	4b0e      	ldr	r3, [pc, #56]	@ (8006678 <HAL_RCC_ClockConfig+0x204>)
 8006640:	0092      	lsls	r2, r2, #2
 8006642:	58d3      	ldr	r3, [r2, r3]
 8006644:	221f      	movs	r2, #31
 8006646:	4013      	ands	r3, r2
 8006648:	000a      	movs	r2, r1
 800664a:	40da      	lsrs	r2, r3
 800664c:	4b0b      	ldr	r3, [pc, #44]	@ (800667c <HAL_RCC_ClockConfig+0x208>)
 800664e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006650:	4b0b      	ldr	r3, [pc, #44]	@ (8006680 <HAL_RCC_ClockConfig+0x20c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	0018      	movs	r0, r3
 8006656:	f7fe faa3 	bl	8004ba0 <HAL_InitTick>
 800665a:	0003      	movs	r3, r0
}
 800665c:	0018      	movs	r0, r3
 800665e:	46bd      	mov	sp, r7
 8006660:	b004      	add	sp, #16
 8006662:	bd80      	pop	{r7, pc}
 8006664:	40022000 	.word	0x40022000
 8006668:	00001388 	.word	0x00001388
 800666c:	40021000 	.word	0x40021000
 8006670:	fffff0ff 	.word	0xfffff0ff
 8006674:	ffff8fff 	.word	0xffff8fff
 8006678:	0800ae40 	.word	0x0800ae40
 800667c:	2000000c 	.word	0x2000000c
 8006680:	20000010 	.word	0x20000010

08006684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800668a:	4b3c      	ldr	r3, [pc, #240]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2238      	movs	r2, #56	@ 0x38
 8006690:	4013      	ands	r3, r2
 8006692:	d10f      	bne.n	80066b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006694:	4b39      	ldr	r3, [pc, #228]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	0adb      	lsrs	r3, r3, #11
 800669a:	2207      	movs	r2, #7
 800669c:	4013      	ands	r3, r2
 800669e:	2201      	movs	r2, #1
 80066a0:	409a      	lsls	r2, r3
 80066a2:	0013      	movs	r3, r2
 80066a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	4835      	ldr	r0, [pc, #212]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xfc>)
 80066aa:	f7f9 fd47 	bl	800013c <__udivsi3>
 80066ae:	0003      	movs	r3, r0
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	e05d      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066b4:	4b31      	ldr	r3, [pc, #196]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	2238      	movs	r2, #56	@ 0x38
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d102      	bne.n	80066c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066c0:	4b30      	ldr	r3, [pc, #192]	@ (8006784 <HAL_RCC_GetSysClockFreq+0x100>)
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	e054      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066c6:	4b2d      	ldr	r3, [pc, #180]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2238      	movs	r2, #56	@ 0x38
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d138      	bne.n	8006744 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80066d2:	4b2a      	ldr	r3, [pc, #168]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	2203      	movs	r2, #3
 80066d8:	4013      	ands	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066dc:	4b27      	ldr	r3, [pc, #156]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	091b      	lsrs	r3, r3, #4
 80066e2:	2207      	movs	r2, #7
 80066e4:	4013      	ands	r3, r2
 80066e6:	3301      	adds	r3, #1
 80066e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b03      	cmp	r3, #3
 80066ee:	d10d      	bne.n	800670c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	4824      	ldr	r0, [pc, #144]	@ (8006784 <HAL_RCC_GetSysClockFreq+0x100>)
 80066f4:	f7f9 fd22 	bl	800013c <__udivsi3>
 80066f8:	0003      	movs	r3, r0
 80066fa:	0019      	movs	r1, r3
 80066fc:	4b1f      	ldr	r3, [pc, #124]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	227f      	movs	r2, #127	@ 0x7f
 8006704:	4013      	ands	r3, r2
 8006706:	434b      	muls	r3, r1
 8006708:	617b      	str	r3, [r7, #20]
        break;
 800670a:	e00d      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	481c      	ldr	r0, [pc, #112]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006710:	f7f9 fd14 	bl	800013c <__udivsi3>
 8006714:	0003      	movs	r3, r0
 8006716:	0019      	movs	r1, r3
 8006718:	4b18      	ldr	r3, [pc, #96]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	0a1b      	lsrs	r3, r3, #8
 800671e:	227f      	movs	r2, #127	@ 0x7f
 8006720:	4013      	ands	r3, r2
 8006722:	434b      	muls	r3, r1
 8006724:	617b      	str	r3, [r7, #20]
        break;
 8006726:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006728:	4b14      	ldr	r3, [pc, #80]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	0f5b      	lsrs	r3, r3, #29
 800672e:	2207      	movs	r2, #7
 8006730:	4013      	ands	r3, r2
 8006732:	3301      	adds	r3, #1
 8006734:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	6978      	ldr	r0, [r7, #20]
 800673a:	f7f9 fcff 	bl	800013c <__udivsi3>
 800673e:	0003      	movs	r3, r0
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	e015      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006744:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2238      	movs	r2, #56	@ 0x38
 800674a:	4013      	ands	r3, r2
 800674c:	2b20      	cmp	r3, #32
 800674e:	d103      	bne.n	8006758 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006750:	2380      	movs	r3, #128	@ 0x80
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	e00b      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006758:	4b08      	ldr	r3, [pc, #32]	@ (800677c <HAL_RCC_GetSysClockFreq+0xf8>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	2238      	movs	r2, #56	@ 0x38
 800675e:	4013      	ands	r3, r2
 8006760:	2b18      	cmp	r3, #24
 8006762:	d103      	bne.n	800676c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006764:	23fa      	movs	r3, #250	@ 0xfa
 8006766:	01db      	lsls	r3, r3, #7
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	e001      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006770:	693b      	ldr	r3, [r7, #16]
}
 8006772:	0018      	movs	r0, r3
 8006774:	46bd      	mov	sp, r7
 8006776:	b006      	add	sp, #24
 8006778:	bd80      	pop	{r7, pc}
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	40021000 	.word	0x40021000
 8006780:	00f42400 	.word	0x00f42400
 8006784:	007a1200 	.word	0x007a1200

08006788 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800678c:	4b02      	ldr	r3, [pc, #8]	@ (8006798 <HAL_RCC_GetHCLKFreq+0x10>)
 800678e:	681b      	ldr	r3, [r3, #0]
}
 8006790:	0018      	movs	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	46c0      	nop			@ (mov r8, r8)
 8006798:	2000000c 	.word	0x2000000c

0800679c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800679c:	b5b0      	push	{r4, r5, r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80067a0:	f7ff fff2 	bl	8006788 <HAL_RCC_GetHCLKFreq>
 80067a4:	0004      	movs	r4, r0
 80067a6:	f7ff fb3f 	bl	8005e28 <LL_RCC_GetAPB1Prescaler>
 80067aa:	0003      	movs	r3, r0
 80067ac:	0b1a      	lsrs	r2, r3, #12
 80067ae:	4b05      	ldr	r3, [pc, #20]	@ (80067c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067b0:	0092      	lsls	r2, r2, #2
 80067b2:	58d3      	ldr	r3, [r2, r3]
 80067b4:	221f      	movs	r2, #31
 80067b6:	4013      	ands	r3, r2
 80067b8:	40dc      	lsrs	r4, r3
 80067ba:	0023      	movs	r3, r4
}
 80067bc:	0018      	movs	r0, r3
 80067be:	46bd      	mov	sp, r7
 80067c0:	bdb0      	pop	{r4, r5, r7, pc}
 80067c2:	46c0      	nop			@ (mov r8, r8)
 80067c4:	0800ae80 	.word	0x0800ae80

080067c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e04a      	b.n	8006870 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	223d      	movs	r2, #61	@ 0x3d
 80067de:	5c9b      	ldrb	r3, [r3, r2]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d107      	bne.n	80067f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	223c      	movs	r2, #60	@ 0x3c
 80067ea:	2100      	movs	r1, #0
 80067ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7fe f809 	bl	8004808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	223d      	movs	r2, #61	@ 0x3d
 80067fa:	2102      	movs	r1, #2
 80067fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3304      	adds	r3, #4
 8006806:	0019      	movs	r1, r3
 8006808:	0010      	movs	r0, r2
 800680a:	f000 fa13 	bl	8006c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2248      	movs	r2, #72	@ 0x48
 8006812:	2101      	movs	r1, #1
 8006814:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	223e      	movs	r2, #62	@ 0x3e
 800681a:	2101      	movs	r1, #1
 800681c:	5499      	strb	r1, [r3, r2]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	223f      	movs	r2, #63	@ 0x3f
 8006822:	2101      	movs	r1, #1
 8006824:	5499      	strb	r1, [r3, r2]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2240      	movs	r2, #64	@ 0x40
 800682a:	2101      	movs	r1, #1
 800682c:	5499      	strb	r1, [r3, r2]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2241      	movs	r2, #65	@ 0x41
 8006832:	2101      	movs	r1, #1
 8006834:	5499      	strb	r1, [r3, r2]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2242      	movs	r2, #66	@ 0x42
 800683a:	2101      	movs	r1, #1
 800683c:	5499      	strb	r1, [r3, r2]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2243      	movs	r2, #67	@ 0x43
 8006842:	2101      	movs	r1, #1
 8006844:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2244      	movs	r2, #68	@ 0x44
 800684a:	2101      	movs	r1, #1
 800684c:	5499      	strb	r1, [r3, r2]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2245      	movs	r2, #69	@ 0x45
 8006852:	2101      	movs	r1, #1
 8006854:	5499      	strb	r1, [r3, r2]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2246      	movs	r2, #70	@ 0x46
 800685a:	2101      	movs	r1, #1
 800685c:	5499      	strb	r1, [r3, r2]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2247      	movs	r2, #71	@ 0x47
 8006862:	2101      	movs	r1, #1
 8006864:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	223d      	movs	r2, #61	@ 0x3d
 800686a:	2101      	movs	r1, #1
 800686c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b002      	add	sp, #8
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d108      	bne.n	800689a <HAL_TIM_PWM_Start+0x22>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	223e      	movs	r2, #62	@ 0x3e
 800688c:	5c9b      	ldrb	r3, [r3, r2]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	1e5a      	subs	r2, r3, #1
 8006894:	4193      	sbcs	r3, r2
 8006896:	b2db      	uxtb	r3, r3
 8006898:	e037      	b.n	800690a <HAL_TIM_PWM_Start+0x92>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b04      	cmp	r3, #4
 800689e:	d108      	bne.n	80068b2 <HAL_TIM_PWM_Start+0x3a>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	223f      	movs	r2, #63	@ 0x3f
 80068a4:	5c9b      	ldrb	r3, [r3, r2]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	1e5a      	subs	r2, r3, #1
 80068ac:	4193      	sbcs	r3, r2
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	e02b      	b.n	800690a <HAL_TIM_PWM_Start+0x92>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d108      	bne.n	80068ca <HAL_TIM_PWM_Start+0x52>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2240      	movs	r2, #64	@ 0x40
 80068bc:	5c9b      	ldrb	r3, [r3, r2]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	1e5a      	subs	r2, r3, #1
 80068c4:	4193      	sbcs	r3, r2
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	e01f      	b.n	800690a <HAL_TIM_PWM_Start+0x92>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b0c      	cmp	r3, #12
 80068ce:	d108      	bne.n	80068e2 <HAL_TIM_PWM_Start+0x6a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2241      	movs	r2, #65	@ 0x41
 80068d4:	5c9b      	ldrb	r3, [r3, r2]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	1e5a      	subs	r2, r3, #1
 80068dc:	4193      	sbcs	r3, r2
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	e013      	b.n	800690a <HAL_TIM_PWM_Start+0x92>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b10      	cmp	r3, #16
 80068e6:	d108      	bne.n	80068fa <HAL_TIM_PWM_Start+0x82>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2242      	movs	r2, #66	@ 0x42
 80068ec:	5c9b      	ldrb	r3, [r3, r2]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	1e5a      	subs	r2, r3, #1
 80068f4:	4193      	sbcs	r3, r2
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	e007      	b.n	800690a <HAL_TIM_PWM_Start+0x92>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2243      	movs	r2, #67	@ 0x43
 80068fe:	5c9b      	ldrb	r3, [r3, r2]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	1e5a      	subs	r2, r3, #1
 8006906:	4193      	sbcs	r3, r2
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e081      	b.n	8006a16 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d104      	bne.n	8006922 <HAL_TIM_PWM_Start+0xaa>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	223e      	movs	r2, #62	@ 0x3e
 800691c:	2102      	movs	r1, #2
 800691e:	5499      	strb	r1, [r3, r2]
 8006920:	e023      	b.n	800696a <HAL_TIM_PWM_Start+0xf2>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b04      	cmp	r3, #4
 8006926:	d104      	bne.n	8006932 <HAL_TIM_PWM_Start+0xba>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	223f      	movs	r2, #63	@ 0x3f
 800692c:	2102      	movs	r1, #2
 800692e:	5499      	strb	r1, [r3, r2]
 8006930:	e01b      	b.n	800696a <HAL_TIM_PWM_Start+0xf2>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d104      	bne.n	8006942 <HAL_TIM_PWM_Start+0xca>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2240      	movs	r2, #64	@ 0x40
 800693c:	2102      	movs	r1, #2
 800693e:	5499      	strb	r1, [r3, r2]
 8006940:	e013      	b.n	800696a <HAL_TIM_PWM_Start+0xf2>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b0c      	cmp	r3, #12
 8006946:	d104      	bne.n	8006952 <HAL_TIM_PWM_Start+0xda>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2241      	movs	r2, #65	@ 0x41
 800694c:	2102      	movs	r1, #2
 800694e:	5499      	strb	r1, [r3, r2]
 8006950:	e00b      	b.n	800696a <HAL_TIM_PWM_Start+0xf2>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b10      	cmp	r3, #16
 8006956:	d104      	bne.n	8006962 <HAL_TIM_PWM_Start+0xea>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2242      	movs	r2, #66	@ 0x42
 800695c:	2102      	movs	r1, #2
 800695e:	5499      	strb	r1, [r3, r2]
 8006960:	e003      	b.n	800696a <HAL_TIM_PWM_Start+0xf2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2243      	movs	r2, #67	@ 0x43
 8006966:	2102      	movs	r1, #2
 8006968:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	2201      	movs	r2, #1
 8006972:	0018      	movs	r0, r3
 8006974:	f000 fc7e 	bl	8007274 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a28      	ldr	r2, [pc, #160]	@ (8006a20 <HAL_TIM_PWM_Start+0x1a8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d009      	beq.n	8006996 <HAL_TIM_PWM_Start+0x11e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a27      	ldr	r2, [pc, #156]	@ (8006a24 <HAL_TIM_PWM_Start+0x1ac>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d004      	beq.n	8006996 <HAL_TIM_PWM_Start+0x11e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a25      	ldr	r2, [pc, #148]	@ (8006a28 <HAL_TIM_PWM_Start+0x1b0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d101      	bne.n	800699a <HAL_TIM_PWM_Start+0x122>
 8006996:	2301      	movs	r3, #1
 8006998:	e000      	b.n	800699c <HAL_TIM_PWM_Start+0x124>
 800699a:	2300      	movs	r3, #0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2180      	movs	r1, #128	@ 0x80
 80069ac:	0209      	lsls	r1, r1, #8
 80069ae:	430a      	orrs	r2, r1
 80069b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a20 <HAL_TIM_PWM_Start+0x1a8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00a      	beq.n	80069d2 <HAL_TIM_PWM_Start+0x15a>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	2380      	movs	r3, #128	@ 0x80
 80069c2:	05db      	lsls	r3, r3, #23
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d004      	beq.n	80069d2 <HAL_TIM_PWM_Start+0x15a>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a17      	ldr	r2, [pc, #92]	@ (8006a2c <HAL_TIM_PWM_Start+0x1b4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d116      	bne.n	8006a00 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	4a15      	ldr	r2, [pc, #84]	@ (8006a30 <HAL_TIM_PWM_Start+0x1b8>)
 80069da:	4013      	ands	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b06      	cmp	r3, #6
 80069e2:	d016      	beq.n	8006a12 <HAL_TIM_PWM_Start+0x19a>
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	2380      	movs	r3, #128	@ 0x80
 80069e8:	025b      	lsls	r3, r3, #9
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d011      	beq.n	8006a12 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2101      	movs	r1, #1
 80069fa:	430a      	orrs	r2, r1
 80069fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fe:	e008      	b.n	8006a12 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	e000      	b.n	8006a14 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a12:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	0018      	movs	r0, r3
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	b004      	add	sp, #16
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	46c0      	nop			@ (mov r8, r8)
 8006a20:	40012c00 	.word	0x40012c00
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800
 8006a2c:	40000400 	.word	0x40000400
 8006a30:	00010007 	.word	0x00010007

08006a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a40:	2317      	movs	r3, #23
 8006a42:	18fb      	adds	r3, r7, r3
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	223c      	movs	r2, #60	@ 0x3c
 8006a4c:	5c9b      	ldrb	r3, [r3, r2]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e0e5      	b.n	8006c22 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	223c      	movs	r2, #60	@ 0x3c
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b14      	cmp	r3, #20
 8006a62:	d900      	bls.n	8006a66 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006a64:	e0d1      	b.n	8006c0a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	009a      	lsls	r2, r3, #2
 8006a6a:	4b70      	ldr	r3, [pc, #448]	@ (8006c2c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006a6c:	18d3      	adds	r3, r2, r3
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	0011      	movs	r1, r2
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 f95e 	bl	8006d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2108      	movs	r1, #8
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2104      	movs	r1, #4
 8006a9c:	438a      	bics	r2, r1
 8006a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6999      	ldr	r1, [r3, #24]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	619a      	str	r2, [r3, #24]
      break;
 8006ab2:	e0af      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	0011      	movs	r1, r2
 8006abc:	0018      	movs	r0, r3
 8006abe:	f000 f9bd 	bl	8006e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2180      	movs	r1, #128	@ 0x80
 8006ace:	0109      	lsls	r1, r1, #4
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4954      	ldr	r1, [pc, #336]	@ (8006c30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006ae0:	400a      	ands	r2, r1
 8006ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6999      	ldr	r1, [r3, #24]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	021a      	lsls	r2, r3, #8
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	619a      	str	r2, [r3, #24]
      break;
 8006af8:	e08c      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	0011      	movs	r1, r2
 8006b02:	0018      	movs	r0, r3
 8006b04:	f000 fa18 	bl	8006f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69da      	ldr	r2, [r3, #28]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2108      	movs	r1, #8
 8006b14:	430a      	orrs	r2, r1
 8006b16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69da      	ldr	r2, [r3, #28]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2104      	movs	r1, #4
 8006b24:	438a      	bics	r2, r1
 8006b26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	69d9      	ldr	r1, [r3, #28]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	691a      	ldr	r2, [r3, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	61da      	str	r2, [r3, #28]
      break;
 8006b3a:	e06b      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	0011      	movs	r1, r2
 8006b44:	0018      	movs	r0, r3
 8006b46:	f000 fa79 	bl	800703c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	69da      	ldr	r2, [r3, #28]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2180      	movs	r1, #128	@ 0x80
 8006b56:	0109      	lsls	r1, r1, #4
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69da      	ldr	r2, [r3, #28]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4932      	ldr	r1, [pc, #200]	@ (8006c30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006b68:	400a      	ands	r2, r1
 8006b6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	69d9      	ldr	r1, [r3, #28]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	021a      	lsls	r2, r3, #8
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	61da      	str	r2, [r3, #28]
      break;
 8006b80:	e048      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	0011      	movs	r1, r2
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f000 faba 	bl	8007104 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2108      	movs	r1, #8
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2104      	movs	r1, #4
 8006bac:	438a      	bics	r2, r1
 8006bae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	691a      	ldr	r2, [r3, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006bc2:	e027      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	0011      	movs	r1, r2
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f000 faf3 	bl	80071b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2180      	movs	r1, #128	@ 0x80
 8006bde:	0109      	lsls	r1, r1, #4
 8006be0:	430a      	orrs	r2, r1
 8006be2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4910      	ldr	r1, [pc, #64]	@ (8006c30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006bf0:	400a      	ands	r2, r1
 8006bf2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	021a      	lsls	r2, r3, #8
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c08:	e004      	b.n	8006c14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006c0a:	2317      	movs	r3, #23
 8006c0c:	18fb      	adds	r3, r7, r3
 8006c0e:	2201      	movs	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
      break;
 8006c12:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	223c      	movs	r2, #60	@ 0x3c
 8006c18:	2100      	movs	r1, #0
 8006c1a:	5499      	strb	r1, [r3, r2]

  return status;
 8006c1c:	2317      	movs	r3, #23
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	781b      	ldrb	r3, [r3, #0]
}
 8006c22:	0018      	movs	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b006      	add	sp, #24
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	46c0      	nop			@ (mov r8, r8)
 8006c2c:	0800aea0 	.word	0x0800aea0
 8006c30:	fffffbff 	.word	0xfffffbff

08006c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a37      	ldr	r2, [pc, #220]	@ (8006d24 <TIM_Base_SetConfig+0xf0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d008      	beq.n	8006c5e <TIM_Base_SetConfig+0x2a>
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	2380      	movs	r3, #128	@ 0x80
 8006c50:	05db      	lsls	r3, r3, #23
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d003      	beq.n	8006c5e <TIM_Base_SetConfig+0x2a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a33      	ldr	r2, [pc, #204]	@ (8006d28 <TIM_Base_SetConfig+0xf4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d108      	bne.n	8006c70 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2270      	movs	r2, #112	@ 0x70
 8006c62:	4393      	bics	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a2c      	ldr	r2, [pc, #176]	@ (8006d24 <TIM_Base_SetConfig+0xf0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d014      	beq.n	8006ca2 <TIM_Base_SetConfig+0x6e>
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	2380      	movs	r3, #128	@ 0x80
 8006c7c:	05db      	lsls	r3, r3, #23
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d00f      	beq.n	8006ca2 <TIM_Base_SetConfig+0x6e>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a28      	ldr	r2, [pc, #160]	@ (8006d28 <TIM_Base_SetConfig+0xf4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00b      	beq.n	8006ca2 <TIM_Base_SetConfig+0x6e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a27      	ldr	r2, [pc, #156]	@ (8006d2c <TIM_Base_SetConfig+0xf8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d007      	beq.n	8006ca2 <TIM_Base_SetConfig+0x6e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a26      	ldr	r2, [pc, #152]	@ (8006d30 <TIM_Base_SetConfig+0xfc>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_Base_SetConfig+0x6e>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a25      	ldr	r2, [pc, #148]	@ (8006d34 <TIM_Base_SetConfig+0x100>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d108      	bne.n	8006cb4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a24      	ldr	r2, [pc, #144]	@ (8006d38 <TIM_Base_SetConfig+0x104>)
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2280      	movs	r2, #128	@ 0x80
 8006cb8:	4393      	bics	r3, r2
 8006cba:	001a      	movs	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a11      	ldr	r2, [pc, #68]	@ (8006d24 <TIM_Base_SetConfig+0xf0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d007      	beq.n	8006cf2 <TIM_Base_SetConfig+0xbe>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a12      	ldr	r2, [pc, #72]	@ (8006d30 <TIM_Base_SetConfig+0xfc>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d003      	beq.n	8006cf2 <TIM_Base_SetConfig+0xbe>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a11      	ldr	r2, [pc, #68]	@ (8006d34 <TIM_Base_SetConfig+0x100>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d103      	bne.n	8006cfa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	691a      	ldr	r2, [r3, #16]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2201      	movs	r2, #1
 8006d06:	4013      	ands	r3, r2
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d106      	bne.n	8006d1a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2201      	movs	r2, #1
 8006d12:	4393      	bics	r3, r2
 8006d14:	001a      	movs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	611a      	str	r2, [r3, #16]
  }
}
 8006d1a:	46c0      	nop			@ (mov r8, r8)
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b004      	add	sp, #16
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	46c0      	nop			@ (mov r8, r8)
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40002000 	.word	0x40002000
 8006d30:	40014400 	.word	0x40014400
 8006d34:	40014800 	.word	0x40014800
 8006d38:	fffffcff 	.word	0xfffffcff

08006d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	2201      	movs	r2, #1
 8006d52:	4393      	bics	r3, r2
 8006d54:	001a      	movs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4a2e      	ldr	r2, [pc, #184]	@ (8006e24 <TIM_OC1_SetConfig+0xe8>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2203      	movs	r2, #3
 8006d72:	4393      	bics	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2202      	movs	r2, #2
 8006d84:	4393      	bics	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a24      	ldr	r2, [pc, #144]	@ (8006e28 <TIM_OC1_SetConfig+0xec>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d007      	beq.n	8006daa <TIM_OC1_SetConfig+0x6e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a23      	ldr	r2, [pc, #140]	@ (8006e2c <TIM_OC1_SetConfig+0xf0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d003      	beq.n	8006daa <TIM_OC1_SetConfig+0x6e>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a22      	ldr	r2, [pc, #136]	@ (8006e30 <TIM_OC1_SetConfig+0xf4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d10c      	bne.n	8006dc4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2208      	movs	r2, #8
 8006dae:	4393      	bics	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2204      	movs	r2, #4
 8006dc0:	4393      	bics	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a18      	ldr	r2, [pc, #96]	@ (8006e28 <TIM_OC1_SetConfig+0xec>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d007      	beq.n	8006ddc <TIM_OC1_SetConfig+0xa0>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a17      	ldr	r2, [pc, #92]	@ (8006e2c <TIM_OC1_SetConfig+0xf0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <TIM_OC1_SetConfig+0xa0>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a16      	ldr	r2, [pc, #88]	@ (8006e30 <TIM_OC1_SetConfig+0xf4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d111      	bne.n	8006e00 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	4a15      	ldr	r2, [pc, #84]	@ (8006e34 <TIM_OC1_SetConfig+0xf8>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	4a14      	ldr	r2, [pc, #80]	@ (8006e38 <TIM_OC1_SetConfig+0xfc>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	621a      	str	r2, [r3, #32]
}
 8006e1a:	46c0      	nop			@ (mov r8, r8)
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b006      	add	sp, #24
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	fffeff8f 	.word	0xfffeff8f
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40014400 	.word	0x40014400
 8006e30:	40014800 	.word	0x40014800
 8006e34:	fffffeff 	.word	0xfffffeff
 8006e38:	fffffdff 	.word	0xfffffdff

08006e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	2210      	movs	r2, #16
 8006e52:	4393      	bics	r3, r2
 8006e54:	001a      	movs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4a2c      	ldr	r2, [pc, #176]	@ (8006f1c <TIM_OC2_SetConfig+0xe0>)
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a2b      	ldr	r2, [pc, #172]	@ (8006f20 <TIM_OC2_SetConfig+0xe4>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	021b      	lsls	r3, r3, #8
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2220      	movs	r2, #32
 8006e86:	4393      	bics	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a22      	ldr	r2, [pc, #136]	@ (8006f24 <TIM_OC2_SetConfig+0xe8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d10d      	bne.n	8006eba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2280      	movs	r2, #128	@ 0x80
 8006ea2:	4393      	bics	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2240      	movs	r2, #64	@ 0x40
 8006eb6:	4393      	bics	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a19      	ldr	r2, [pc, #100]	@ (8006f24 <TIM_OC2_SetConfig+0xe8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d007      	beq.n	8006ed2 <TIM_OC2_SetConfig+0x96>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a18      	ldr	r2, [pc, #96]	@ (8006f28 <TIM_OC2_SetConfig+0xec>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d003      	beq.n	8006ed2 <TIM_OC2_SetConfig+0x96>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a17      	ldr	r2, [pc, #92]	@ (8006f2c <TIM_OC2_SetConfig+0xf0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d113      	bne.n	8006efa <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	4a16      	ldr	r2, [pc, #88]	@ (8006f30 <TIM_OC2_SetConfig+0xf4>)
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4a15      	ldr	r2, [pc, #84]	@ (8006f34 <TIM_OC2_SetConfig+0xf8>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	621a      	str	r2, [r3, #32]
}
 8006f14:	46c0      	nop			@ (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b006      	add	sp, #24
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	feff8fff 	.word	0xfeff8fff
 8006f20:	fffffcff 	.word	0xfffffcff
 8006f24:	40012c00 	.word	0x40012c00
 8006f28:	40014400 	.word	0x40014400
 8006f2c:	40014800 	.word	0x40014800
 8006f30:	fffffbff 	.word	0xfffffbff
 8006f34:	fffff7ff 	.word	0xfffff7ff

08006f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	4a31      	ldr	r2, [pc, #196]	@ (8007014 <TIM_OC3_SetConfig+0xdc>)
 8006f4e:	401a      	ands	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a2d      	ldr	r2, [pc, #180]	@ (8007018 <TIM_OC3_SetConfig+0xe0>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	4393      	bics	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	4a27      	ldr	r2, [pc, #156]	@ (800701c <TIM_OC3_SetConfig+0xe4>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	021b      	lsls	r3, r3, #8
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a23      	ldr	r2, [pc, #140]	@ (8007020 <TIM_OC3_SetConfig+0xe8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d10d      	bne.n	8006fb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	4a22      	ldr	r2, [pc, #136]	@ (8007024 <TIM_OC3_SetConfig+0xec>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	4a1e      	ldr	r2, [pc, #120]	@ (8007028 <TIM_OC3_SetConfig+0xf0>)
 8006fae:	4013      	ands	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8007020 <TIM_OC3_SetConfig+0xe8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d007      	beq.n	8006fca <TIM_OC3_SetConfig+0x92>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800702c <TIM_OC3_SetConfig+0xf4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d003      	beq.n	8006fca <TIM_OC3_SetConfig+0x92>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8007030 <TIM_OC3_SetConfig+0xf8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d113      	bne.n	8006ff2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	4a19      	ldr	r2, [pc, #100]	@ (8007034 <TIM_OC3_SetConfig+0xfc>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	4a18      	ldr	r2, [pc, #96]	@ (8007038 <TIM_OC3_SetConfig+0x100>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	621a      	str	r2, [r3, #32]
}
 800700c:	46c0      	nop			@ (mov r8, r8)
 800700e:	46bd      	mov	sp, r7
 8007010:	b006      	add	sp, #24
 8007012:	bd80      	pop	{r7, pc}
 8007014:	fffffeff 	.word	0xfffffeff
 8007018:	fffeff8f 	.word	0xfffeff8f
 800701c:	fffffdff 	.word	0xfffffdff
 8007020:	40012c00 	.word	0x40012c00
 8007024:	fffff7ff 	.word	0xfffff7ff
 8007028:	fffffbff 	.word	0xfffffbff
 800702c:	40014400 	.word	0x40014400
 8007030:	40014800 	.word	0x40014800
 8007034:	ffffefff 	.word	0xffffefff
 8007038:	ffffdfff 	.word	0xffffdfff

0800703c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	4a24      	ldr	r2, [pc, #144]	@ (80070e4 <TIM_OC4_SetConfig+0xa8>)
 8007052:	401a      	ands	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4a20      	ldr	r2, [pc, #128]	@ (80070e8 <TIM_OC4_SetConfig+0xac>)
 8007068:	4013      	ands	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4a1f      	ldr	r2, [pc, #124]	@ (80070ec <TIM_OC4_SetConfig+0xb0>)
 8007070:	4013      	ands	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	021b      	lsls	r3, r3, #8
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4a1b      	ldr	r2, [pc, #108]	@ (80070f0 <TIM_OC4_SetConfig+0xb4>)
 8007084:	4013      	ands	r3, r2
 8007086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	031b      	lsls	r3, r3, #12
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4313      	orrs	r3, r2
 8007092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a17      	ldr	r2, [pc, #92]	@ (80070f4 <TIM_OC4_SetConfig+0xb8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d007      	beq.n	80070ac <TIM_OC4_SetConfig+0x70>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a16      	ldr	r2, [pc, #88]	@ (80070f8 <TIM_OC4_SetConfig+0xbc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_OC4_SetConfig+0x70>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a15      	ldr	r2, [pc, #84]	@ (80070fc <TIM_OC4_SetConfig+0xc0>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d109      	bne.n	80070c0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	4a14      	ldr	r2, [pc, #80]	@ (8007100 <TIM_OC4_SetConfig+0xc4>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	019b      	lsls	r3, r3, #6
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	46c0      	nop			@ (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	b006      	add	sp, #24
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	46c0      	nop			@ (mov r8, r8)
 80070e4:	ffffefff 	.word	0xffffefff
 80070e8:	feff8fff 	.word	0xfeff8fff
 80070ec:	fffffcff 	.word	0xfffffcff
 80070f0:	ffffdfff 	.word	0xffffdfff
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800
 8007100:	ffffbfff 	.word	0xffffbfff

08007104 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	4a21      	ldr	r2, [pc, #132]	@ (80071a0 <TIM_OC5_SetConfig+0x9c>)
 800711a:	401a      	ands	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4a1d      	ldr	r2, [pc, #116]	@ (80071a4 <TIM_OC5_SetConfig+0xa0>)
 8007130:	4013      	ands	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	4a19      	ldr	r2, [pc, #100]	@ (80071a8 <TIM_OC5_SetConfig+0xa4>)
 8007142:	4013      	ands	r3, r2
 8007144:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	041b      	lsls	r3, r3, #16
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	4313      	orrs	r3, r2
 8007150:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a15      	ldr	r2, [pc, #84]	@ (80071ac <TIM_OC5_SetConfig+0xa8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d007      	beq.n	800716a <TIM_OC5_SetConfig+0x66>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a14      	ldr	r2, [pc, #80]	@ (80071b0 <TIM_OC5_SetConfig+0xac>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d003      	beq.n	800716a <TIM_OC5_SetConfig+0x66>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a13      	ldr	r2, [pc, #76]	@ (80071b4 <TIM_OC5_SetConfig+0xb0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d109      	bne.n	800717e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	4a0c      	ldr	r2, [pc, #48]	@ (80071a0 <TIM_OC5_SetConfig+0x9c>)
 800716e:	4013      	ands	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	021b      	lsls	r3, r3, #8
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	4313      	orrs	r3, r2
 800717c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	621a      	str	r2, [r3, #32]
}
 8007198:	46c0      	nop			@ (mov r8, r8)
 800719a:	46bd      	mov	sp, r7
 800719c:	b006      	add	sp, #24
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	fffeffff 	.word	0xfffeffff
 80071a4:	fffeff8f 	.word	0xfffeff8f
 80071a8:	fffdffff 	.word	0xfffdffff
 80071ac:	40012c00 	.word	0x40012c00
 80071b0:	40014400 	.word	0x40014400
 80071b4:	40014800 	.word	0x40014800

080071b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	4a22      	ldr	r2, [pc, #136]	@ (8007258 <TIM_OC6_SetConfig+0xa0>)
 80071ce:	401a      	ands	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4a1e      	ldr	r2, [pc, #120]	@ (800725c <TIM_OC6_SetConfig+0xa4>)
 80071e4:	4013      	ands	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	021b      	lsls	r3, r3, #8
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	4a1a      	ldr	r2, [pc, #104]	@ (8007260 <TIM_OC6_SetConfig+0xa8>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	051b      	lsls	r3, r3, #20
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	4313      	orrs	r3, r2
 8007206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a16      	ldr	r2, [pc, #88]	@ (8007264 <TIM_OC6_SetConfig+0xac>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d007      	beq.n	8007220 <TIM_OC6_SetConfig+0x68>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a15      	ldr	r2, [pc, #84]	@ (8007268 <TIM_OC6_SetConfig+0xb0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d003      	beq.n	8007220 <TIM_OC6_SetConfig+0x68>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a14      	ldr	r2, [pc, #80]	@ (800726c <TIM_OC6_SetConfig+0xb4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d109      	bne.n	8007234 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	4a13      	ldr	r2, [pc, #76]	@ (8007270 <TIM_OC6_SetConfig+0xb8>)
 8007224:	4013      	ands	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	029b      	lsls	r3, r3, #10
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	4313      	orrs	r3, r2
 8007232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	46c0      	nop			@ (mov r8, r8)
 8007250:	46bd      	mov	sp, r7
 8007252:	b006      	add	sp, #24
 8007254:	bd80      	pop	{r7, pc}
 8007256:	46c0      	nop			@ (mov r8, r8)
 8007258:	ffefffff 	.word	0xffefffff
 800725c:	feff8fff 	.word	0xfeff8fff
 8007260:	ffdfffff 	.word	0xffdfffff
 8007264:	40012c00 	.word	0x40012c00
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800
 8007270:	fffbffff 	.word	0xfffbffff

08007274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	221f      	movs	r2, #31
 8007284:	4013      	ands	r3, r2
 8007286:	2201      	movs	r2, #1
 8007288:	409a      	lsls	r2, r3
 800728a:	0013      	movs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	43d2      	mvns	r2, r2
 8007296:	401a      	ands	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a1a      	ldr	r2, [r3, #32]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	211f      	movs	r1, #31
 80072a4:	400b      	ands	r3, r1
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4099      	lsls	r1, r3
 80072aa:	000b      	movs	r3, r1
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	621a      	str	r2, [r3, #32]
}
 80072b2:	46c0      	nop			@ (mov r8, r8)
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b006      	add	sp, #24
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	223c      	movs	r2, #60	@ 0x3c
 80072ca:	5c9b      	ldrb	r3, [r3, r2]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d101      	bne.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072d0:	2302      	movs	r3, #2
 80072d2:	e050      	b.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	223c      	movs	r2, #60	@ 0x3c
 80072d8:	2101      	movs	r1, #1
 80072da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	223d      	movs	r2, #61	@ 0x3d
 80072e0:	2102      	movs	r1, #2
 80072e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a21      	ldr	r2, [pc, #132]	@ (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d108      	bne.n	8007310 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4a20      	ldr	r2, [pc, #128]	@ (8007384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007302:	4013      	ands	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4313      	orrs	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2270      	movs	r2, #112	@ 0x70
 8007314:	4393      	bics	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a14      	ldr	r2, [pc, #80]	@ (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00a      	beq.n	800734a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	2380      	movs	r3, #128	@ 0x80
 800733a:	05db      	lsls	r3, r3, #23
 800733c:	429a      	cmp	r2, r3
 800733e:	d004      	beq.n	800734a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a10      	ldr	r2, [pc, #64]	@ (8007388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d10c      	bne.n	8007364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2280      	movs	r2, #128	@ 0x80
 800734e:	4393      	bics	r3, r2
 8007350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	4313      	orrs	r3, r2
 800735a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	223d      	movs	r2, #61	@ 0x3d
 8007368:	2101      	movs	r1, #1
 800736a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	223c      	movs	r2, #60	@ 0x3c
 8007370:	2100      	movs	r1, #0
 8007372:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	0018      	movs	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	b004      	add	sp, #16
 800737c:	bd80      	pop	{r7, pc}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	40012c00 	.word	0x40012c00
 8007384:	ff0fffff 	.word	0xff0fffff
 8007388:	40000400 	.word	0x40000400

0800738c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e046      	b.n	800742c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2288      	movs	r2, #136	@ 0x88
 80073a2:	589b      	ldr	r3, [r3, r2]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d107      	bne.n	80073b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2284      	movs	r2, #132	@ 0x84
 80073ac:	2100      	movs	r1, #0
 80073ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	0018      	movs	r0, r3
 80073b4:	f7fd fa82 	bl	80048bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2288      	movs	r2, #136	@ 0x88
 80073bc:	2124      	movs	r1, #36	@ 0x24
 80073be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2101      	movs	r1, #1
 80073cc:	438a      	bics	r2, r1
 80073ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	0018      	movs	r0, r3
 80073dc:	f000 fb48 	bl	8007a70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	0018      	movs	r0, r3
 80073e4:	f000 f8cc 	bl	8007580 <UART_SetConfig>
 80073e8:	0003      	movs	r3, r0
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d101      	bne.n	80073f2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e01c      	b.n	800742c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	490d      	ldr	r1, [pc, #52]	@ (8007434 <HAL_UART_Init+0xa8>)
 80073fe:	400a      	ands	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	212a      	movs	r1, #42	@ 0x2a
 800740e:	438a      	bics	r2, r1
 8007410:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2101      	movs	r1, #1
 800741e:	430a      	orrs	r2, r1
 8007420:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	0018      	movs	r0, r3
 8007426:	f000 fbd7 	bl	8007bd8 <UART_CheckIdleState>
 800742a:	0003      	movs	r3, r0
}
 800742c:	0018      	movs	r0, r3
 800742e:	46bd      	mov	sp, r7
 8007430:	b002      	add	sp, #8
 8007432:	bd80      	pop	{r7, pc}
 8007434:	ffffb7ff 	.word	0xffffb7ff

08007438 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08a      	sub	sp, #40	@ 0x28
 800743c:	af02      	add	r7, sp, #8
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	1dbb      	adds	r3, r7, #6
 8007446:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2288      	movs	r2, #136	@ 0x88
 800744c:	589b      	ldr	r3, [r3, r2]
 800744e:	2b20      	cmp	r3, #32
 8007450:	d000      	beq.n	8007454 <HAL_UART_Transmit+0x1c>
 8007452:	e090      	b.n	8007576 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_UART_Transmit+0x2a>
 800745a:	1dbb      	adds	r3, r7, #6
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e088      	b.n	8007578 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	2380      	movs	r3, #128	@ 0x80
 800746c:	015b      	lsls	r3, r3, #5
 800746e:	429a      	cmp	r2, r3
 8007470:	d109      	bne.n	8007486 <HAL_UART_Transmit+0x4e>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2201      	movs	r2, #1
 800747e:	4013      	ands	r3, r2
 8007480:	d001      	beq.n	8007486 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e078      	b.n	8007578 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2290      	movs	r2, #144	@ 0x90
 800748a:	2100      	movs	r1, #0
 800748c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2288      	movs	r2, #136	@ 0x88
 8007492:	2121      	movs	r1, #33	@ 0x21
 8007494:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007496:	f7fd fbdf 	bl	8004c58 <HAL_GetTick>
 800749a:	0003      	movs	r3, r0
 800749c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1dba      	adds	r2, r7, #6
 80074a2:	2154      	movs	r1, #84	@ 0x54
 80074a4:	8812      	ldrh	r2, [r2, #0]
 80074a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	1dba      	adds	r2, r7, #6
 80074ac:	2156      	movs	r1, #86	@ 0x56
 80074ae:	8812      	ldrh	r2, [r2, #0]
 80074b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	2380      	movs	r3, #128	@ 0x80
 80074b8:	015b      	lsls	r3, r3, #5
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d108      	bne.n	80074d0 <HAL_UART_Transmit+0x98>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	61bb      	str	r3, [r7, #24]
 80074ce:	e003      	b.n	80074d8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074d8:	e030      	b.n	800753c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	0013      	movs	r3, r2
 80074e4:	2200      	movs	r2, #0
 80074e6:	2180      	movs	r1, #128	@ 0x80
 80074e8:	f000 fc20 	bl	8007d2c <UART_WaitOnFlagUntilTimeout>
 80074ec:	1e03      	subs	r3, r0, #0
 80074ee:	d005      	beq.n	80074fc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2288      	movs	r2, #136	@ 0x88
 80074f4:	2120      	movs	r1, #32
 80074f6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e03d      	b.n	8007578 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10b      	bne.n	800751a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	881b      	ldrh	r3, [r3, #0]
 8007506:	001a      	movs	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	05d2      	lsls	r2, r2, #23
 800750e:	0dd2      	lsrs	r2, r2, #23
 8007510:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	3302      	adds	r3, #2
 8007516:	61bb      	str	r3, [r7, #24]
 8007518:	e007      	b.n	800752a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	781a      	ldrb	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	3301      	adds	r3, #1
 8007528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2256      	movs	r2, #86	@ 0x56
 800752e:	5a9b      	ldrh	r3, [r3, r2]
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b299      	uxth	r1, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2256      	movs	r2, #86	@ 0x56
 800753a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2256      	movs	r2, #86	@ 0x56
 8007540:	5a9b      	ldrh	r3, [r3, r2]
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1c8      	bne.n	80074da <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	0013      	movs	r3, r2
 8007552:	2200      	movs	r2, #0
 8007554:	2140      	movs	r1, #64	@ 0x40
 8007556:	f000 fbe9 	bl	8007d2c <UART_WaitOnFlagUntilTimeout>
 800755a:	1e03      	subs	r3, r0, #0
 800755c:	d005      	beq.n	800756a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2288      	movs	r2, #136	@ 0x88
 8007562:	2120      	movs	r1, #32
 8007564:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e006      	b.n	8007578 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2288      	movs	r2, #136	@ 0x88
 800756e:	2120      	movs	r1, #32
 8007570:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e000      	b.n	8007578 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007576:	2302      	movs	r3, #2
  }
}
 8007578:	0018      	movs	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	b008      	add	sp, #32
 800757e:	bd80      	pop	{r7, pc}

08007580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007580:	b5b0      	push	{r4, r5, r7, lr}
 8007582:	b090      	sub	sp, #64	@ 0x40
 8007584:	af00      	add	r7, sp, #0
 8007586:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007588:	231a      	movs	r3, #26
 800758a:	2220      	movs	r2, #32
 800758c:	189b      	adds	r3, r3, r2
 800758e:	19db      	adds	r3, r3, r7
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	689a      	ldr	r2, [r3, #8]
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	431a      	orrs	r2, r3
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4ac4      	ldr	r2, [pc, #784]	@ (80078c4 <UART_SetConfig+0x344>)
 80075b4:	4013      	ands	r3, r2
 80075b6:	0019      	movs	r1, r3
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075be:	430b      	orrs	r3, r1
 80075c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	4abf      	ldr	r2, [pc, #764]	@ (80078c8 <UART_SetConfig+0x348>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	0018      	movs	r0, r3
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	68d9      	ldr	r1, [r3, #12]
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	0003      	movs	r3, r0
 80075d8:	430b      	orrs	r3, r1
 80075da:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4ab9      	ldr	r2, [pc, #740]	@ (80078cc <UART_SetConfig+0x34c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d004      	beq.n	80075f6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80075f2:	4313      	orrs	r3, r2
 80075f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	4ab4      	ldr	r2, [pc, #720]	@ (80078d0 <UART_SetConfig+0x350>)
 80075fe:	4013      	ands	r3, r2
 8007600:	0019      	movs	r1, r3
 8007602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007608:	430b      	orrs	r3, r1
 800760a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007612:	220f      	movs	r2, #15
 8007614:	4393      	bics	r3, r2
 8007616:	0018      	movs	r0, r3
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	0003      	movs	r3, r0
 8007622:	430b      	orrs	r3, r1
 8007624:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4aaa      	ldr	r2, [pc, #680]	@ (80078d4 <UART_SetConfig+0x354>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d131      	bne.n	8007694 <UART_SetConfig+0x114>
 8007630:	4ba9      	ldr	r3, [pc, #676]	@ (80078d8 <UART_SetConfig+0x358>)
 8007632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007634:	2203      	movs	r2, #3
 8007636:	4013      	ands	r3, r2
 8007638:	2b03      	cmp	r3, #3
 800763a:	d01d      	beq.n	8007678 <UART_SetConfig+0xf8>
 800763c:	d823      	bhi.n	8007686 <UART_SetConfig+0x106>
 800763e:	2b02      	cmp	r3, #2
 8007640:	d00c      	beq.n	800765c <UART_SetConfig+0xdc>
 8007642:	d820      	bhi.n	8007686 <UART_SetConfig+0x106>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <UART_SetConfig+0xce>
 8007648:	2b01      	cmp	r3, #1
 800764a:	d00e      	beq.n	800766a <UART_SetConfig+0xea>
 800764c:	e01b      	b.n	8007686 <UART_SetConfig+0x106>
 800764e:	231b      	movs	r3, #27
 8007650:	2220      	movs	r2, #32
 8007652:	189b      	adds	r3, r3, r2
 8007654:	19db      	adds	r3, r3, r7
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	e071      	b.n	8007740 <UART_SetConfig+0x1c0>
 800765c:	231b      	movs	r3, #27
 800765e:	2220      	movs	r2, #32
 8007660:	189b      	adds	r3, r3, r2
 8007662:	19db      	adds	r3, r3, r7
 8007664:	2202      	movs	r2, #2
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	e06a      	b.n	8007740 <UART_SetConfig+0x1c0>
 800766a:	231b      	movs	r3, #27
 800766c:	2220      	movs	r2, #32
 800766e:	189b      	adds	r3, r3, r2
 8007670:	19db      	adds	r3, r3, r7
 8007672:	2204      	movs	r2, #4
 8007674:	701a      	strb	r2, [r3, #0]
 8007676:	e063      	b.n	8007740 <UART_SetConfig+0x1c0>
 8007678:	231b      	movs	r3, #27
 800767a:	2220      	movs	r2, #32
 800767c:	189b      	adds	r3, r3, r2
 800767e:	19db      	adds	r3, r3, r7
 8007680:	2208      	movs	r2, #8
 8007682:	701a      	strb	r2, [r3, #0]
 8007684:	e05c      	b.n	8007740 <UART_SetConfig+0x1c0>
 8007686:	231b      	movs	r3, #27
 8007688:	2220      	movs	r2, #32
 800768a:	189b      	adds	r3, r3, r2
 800768c:	19db      	adds	r3, r3, r7
 800768e:	2210      	movs	r2, #16
 8007690:	701a      	strb	r2, [r3, #0]
 8007692:	e055      	b.n	8007740 <UART_SetConfig+0x1c0>
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a90      	ldr	r2, [pc, #576]	@ (80078dc <UART_SetConfig+0x35c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d106      	bne.n	80076ac <UART_SetConfig+0x12c>
 800769e:	231b      	movs	r3, #27
 80076a0:	2220      	movs	r2, #32
 80076a2:	189b      	adds	r3, r3, r2
 80076a4:	19db      	adds	r3, r3, r7
 80076a6:	2200      	movs	r2, #0
 80076a8:	701a      	strb	r2, [r3, #0]
 80076aa:	e049      	b.n	8007740 <UART_SetConfig+0x1c0>
 80076ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a86      	ldr	r2, [pc, #536]	@ (80078cc <UART_SetConfig+0x34c>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d13e      	bne.n	8007734 <UART_SetConfig+0x1b4>
 80076b6:	4b88      	ldr	r3, [pc, #544]	@ (80078d8 <UART_SetConfig+0x358>)
 80076b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80076ba:	23c0      	movs	r3, #192	@ 0xc0
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	4013      	ands	r3, r2
 80076c0:	22c0      	movs	r2, #192	@ 0xc0
 80076c2:	0112      	lsls	r2, r2, #4
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d027      	beq.n	8007718 <UART_SetConfig+0x198>
 80076c8:	22c0      	movs	r2, #192	@ 0xc0
 80076ca:	0112      	lsls	r2, r2, #4
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d82a      	bhi.n	8007726 <UART_SetConfig+0x1a6>
 80076d0:	2280      	movs	r2, #128	@ 0x80
 80076d2:	0112      	lsls	r2, r2, #4
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d011      	beq.n	80076fc <UART_SetConfig+0x17c>
 80076d8:	2280      	movs	r2, #128	@ 0x80
 80076da:	0112      	lsls	r2, r2, #4
 80076dc:	4293      	cmp	r3, r2
 80076de:	d822      	bhi.n	8007726 <UART_SetConfig+0x1a6>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d004      	beq.n	80076ee <UART_SetConfig+0x16e>
 80076e4:	2280      	movs	r2, #128	@ 0x80
 80076e6:	00d2      	lsls	r2, r2, #3
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00e      	beq.n	800770a <UART_SetConfig+0x18a>
 80076ec:	e01b      	b.n	8007726 <UART_SetConfig+0x1a6>
 80076ee:	231b      	movs	r3, #27
 80076f0:	2220      	movs	r2, #32
 80076f2:	189b      	adds	r3, r3, r2
 80076f4:	19db      	adds	r3, r3, r7
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	e021      	b.n	8007740 <UART_SetConfig+0x1c0>
 80076fc:	231b      	movs	r3, #27
 80076fe:	2220      	movs	r2, #32
 8007700:	189b      	adds	r3, r3, r2
 8007702:	19db      	adds	r3, r3, r7
 8007704:	2202      	movs	r2, #2
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	e01a      	b.n	8007740 <UART_SetConfig+0x1c0>
 800770a:	231b      	movs	r3, #27
 800770c:	2220      	movs	r2, #32
 800770e:	189b      	adds	r3, r3, r2
 8007710:	19db      	adds	r3, r3, r7
 8007712:	2204      	movs	r2, #4
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	e013      	b.n	8007740 <UART_SetConfig+0x1c0>
 8007718:	231b      	movs	r3, #27
 800771a:	2220      	movs	r2, #32
 800771c:	189b      	adds	r3, r3, r2
 800771e:	19db      	adds	r3, r3, r7
 8007720:	2208      	movs	r2, #8
 8007722:	701a      	strb	r2, [r3, #0]
 8007724:	e00c      	b.n	8007740 <UART_SetConfig+0x1c0>
 8007726:	231b      	movs	r3, #27
 8007728:	2220      	movs	r2, #32
 800772a:	189b      	adds	r3, r3, r2
 800772c:	19db      	adds	r3, r3, r7
 800772e:	2210      	movs	r2, #16
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	e005      	b.n	8007740 <UART_SetConfig+0x1c0>
 8007734:	231b      	movs	r3, #27
 8007736:	2220      	movs	r2, #32
 8007738:	189b      	adds	r3, r3, r2
 800773a:	19db      	adds	r3, r3, r7
 800773c:	2210      	movs	r2, #16
 800773e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a61      	ldr	r2, [pc, #388]	@ (80078cc <UART_SetConfig+0x34c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d000      	beq.n	800774c <UART_SetConfig+0x1cc>
 800774a:	e092      	b.n	8007872 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800774c:	231b      	movs	r3, #27
 800774e:	2220      	movs	r2, #32
 8007750:	189b      	adds	r3, r3, r2
 8007752:	19db      	adds	r3, r3, r7
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	2b08      	cmp	r3, #8
 8007758:	d015      	beq.n	8007786 <UART_SetConfig+0x206>
 800775a:	dc18      	bgt.n	800778e <UART_SetConfig+0x20e>
 800775c:	2b04      	cmp	r3, #4
 800775e:	d00d      	beq.n	800777c <UART_SetConfig+0x1fc>
 8007760:	dc15      	bgt.n	800778e <UART_SetConfig+0x20e>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <UART_SetConfig+0x1ec>
 8007766:	2b02      	cmp	r3, #2
 8007768:	d005      	beq.n	8007776 <UART_SetConfig+0x1f6>
 800776a:	e010      	b.n	800778e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800776c:	f7ff f816 	bl	800679c <HAL_RCC_GetPCLK1Freq>
 8007770:	0003      	movs	r3, r0
 8007772:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007774:	e014      	b.n	80077a0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007776:	4b5a      	ldr	r3, [pc, #360]	@ (80078e0 <UART_SetConfig+0x360>)
 8007778:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800777a:	e011      	b.n	80077a0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777c:	f7fe ff82 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 8007780:	0003      	movs	r3, r0
 8007782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007784:	e00c      	b.n	80077a0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007786:	2380      	movs	r3, #128	@ 0x80
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800778c:	e008      	b.n	80077a0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007792:	231a      	movs	r3, #26
 8007794:	2220      	movs	r2, #32
 8007796:	189b      	adds	r3, r3, r2
 8007798:	19db      	adds	r3, r3, r7
 800779a:	2201      	movs	r2, #1
 800779c:	701a      	strb	r2, [r3, #0]
        break;
 800779e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d100      	bne.n	80077a8 <UART_SetConfig+0x228>
 80077a6:	e147      	b.n	8007a38 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077ac:	4b4d      	ldr	r3, [pc, #308]	@ (80078e4 <UART_SetConfig+0x364>)
 80077ae:	0052      	lsls	r2, r2, #1
 80077b0:	5ad3      	ldrh	r3, [r2, r3]
 80077b2:	0019      	movs	r1, r3
 80077b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80077b6:	f7f8 fcc1 	bl	800013c <__udivsi3>
 80077ba:	0003      	movs	r3, r0
 80077bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	0013      	movs	r3, r2
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	189b      	adds	r3, r3, r2
 80077c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d305      	bcc.n	80077da <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d906      	bls.n	80077e8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80077da:	231a      	movs	r3, #26
 80077dc:	2220      	movs	r2, #32
 80077de:	189b      	adds	r3, r3, r2
 80077e0:	19db      	adds	r3, r3, r7
 80077e2:	2201      	movs	r2, #1
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e127      	b.n	8007a38 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ea:	61bb      	str	r3, [r7, #24]
 80077ec:	2300      	movs	r3, #0
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077f4:	4b3b      	ldr	r3, [pc, #236]	@ (80078e4 <UART_SetConfig+0x364>)
 80077f6:	0052      	lsls	r2, r2, #1
 80077f8:	5ad3      	ldrh	r3, [r2, r3]
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	2300      	movs	r3, #0
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	69b8      	ldr	r0, [r7, #24]
 8007806:	69f9      	ldr	r1, [r7, #28]
 8007808:	f7f8 fe4c 	bl	80004a4 <__aeabi_uldivmod>
 800780c:	0002      	movs	r2, r0
 800780e:	000b      	movs	r3, r1
 8007810:	0e11      	lsrs	r1, r2, #24
 8007812:	021d      	lsls	r5, r3, #8
 8007814:	430d      	orrs	r5, r1
 8007816:	0214      	lsls	r4, r2, #8
 8007818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	085b      	lsrs	r3, r3, #1
 800781e:	60bb      	str	r3, [r7, #8]
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	68b8      	ldr	r0, [r7, #8]
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	1900      	adds	r0, r0, r4
 800782a:	4169      	adcs	r1, r5
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	603b      	str	r3, [r7, #0]
 8007832:	2300      	movs	r3, #0
 8007834:	607b      	str	r3, [r7, #4]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f7f8 fe33 	bl	80004a4 <__aeabi_uldivmod>
 800783e:	0002      	movs	r2, r0
 8007840:	000b      	movs	r3, r1
 8007842:	0013      	movs	r3, r2
 8007844:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007848:	23c0      	movs	r3, #192	@ 0xc0
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	429a      	cmp	r2, r3
 800784e:	d309      	bcc.n	8007864 <UART_SetConfig+0x2e4>
 8007850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007852:	2380      	movs	r3, #128	@ 0x80
 8007854:	035b      	lsls	r3, r3, #13
 8007856:	429a      	cmp	r2, r3
 8007858:	d204      	bcs.n	8007864 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007860:	60da      	str	r2, [r3, #12]
 8007862:	e0e9      	b.n	8007a38 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8007864:	231a      	movs	r3, #26
 8007866:	2220      	movs	r2, #32
 8007868:	189b      	adds	r3, r3, r2
 800786a:	19db      	adds	r3, r3, r7
 800786c:	2201      	movs	r2, #1
 800786e:	701a      	strb	r2, [r3, #0]
 8007870:	e0e2      	b.n	8007a38 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	69da      	ldr	r2, [r3, #28]
 8007876:	2380      	movs	r3, #128	@ 0x80
 8007878:	021b      	lsls	r3, r3, #8
 800787a:	429a      	cmp	r2, r3
 800787c:	d000      	beq.n	8007880 <UART_SetConfig+0x300>
 800787e:	e083      	b.n	8007988 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007880:	231b      	movs	r3, #27
 8007882:	2220      	movs	r2, #32
 8007884:	189b      	adds	r3, r3, r2
 8007886:	19db      	adds	r3, r3, r7
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b08      	cmp	r3, #8
 800788c:	d015      	beq.n	80078ba <UART_SetConfig+0x33a>
 800788e:	dc2b      	bgt.n	80078e8 <UART_SetConfig+0x368>
 8007890:	2b04      	cmp	r3, #4
 8007892:	d00d      	beq.n	80078b0 <UART_SetConfig+0x330>
 8007894:	dc28      	bgt.n	80078e8 <UART_SetConfig+0x368>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <UART_SetConfig+0x320>
 800789a:	2b02      	cmp	r3, #2
 800789c:	d005      	beq.n	80078aa <UART_SetConfig+0x32a>
 800789e:	e023      	b.n	80078e8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078a0:	f7fe ff7c 	bl	800679c <HAL_RCC_GetPCLK1Freq>
 80078a4:	0003      	movs	r3, r0
 80078a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078a8:	e027      	b.n	80078fa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078aa:	4b0d      	ldr	r3, [pc, #52]	@ (80078e0 <UART_SetConfig+0x360>)
 80078ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078ae:	e024      	b.n	80078fa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078b0:	f7fe fee8 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 80078b4:	0003      	movs	r3, r0
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078b8:	e01f      	b.n	80078fa <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ba:	2380      	movs	r3, #128	@ 0x80
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078c0:	e01b      	b.n	80078fa <UART_SetConfig+0x37a>
 80078c2:	46c0      	nop			@ (mov r8, r8)
 80078c4:	cfff69f3 	.word	0xcfff69f3
 80078c8:	ffffcfff 	.word	0xffffcfff
 80078cc:	40008000 	.word	0x40008000
 80078d0:	11fff4ff 	.word	0x11fff4ff
 80078d4:	40013800 	.word	0x40013800
 80078d8:	40021000 	.word	0x40021000
 80078dc:	40004400 	.word	0x40004400
 80078e0:	00f42400 	.word	0x00f42400
 80078e4:	0800aef4 	.word	0x0800aef4
      default:
        pclk = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80078ec:	231a      	movs	r3, #26
 80078ee:	2220      	movs	r2, #32
 80078f0:	189b      	adds	r3, r3, r2
 80078f2:	19db      	adds	r3, r3, r7
 80078f4:	2201      	movs	r2, #1
 80078f6:	701a      	strb	r2, [r3, #0]
        break;
 80078f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d100      	bne.n	8007902 <UART_SetConfig+0x382>
 8007900:	e09a      	b.n	8007a38 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007906:	4b58      	ldr	r3, [pc, #352]	@ (8007a68 <UART_SetConfig+0x4e8>)
 8007908:	0052      	lsls	r2, r2, #1
 800790a:	5ad3      	ldrh	r3, [r2, r3]
 800790c:	0019      	movs	r1, r3
 800790e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007910:	f7f8 fc14 	bl	800013c <__udivsi3>
 8007914:	0003      	movs	r3, r0
 8007916:	005a      	lsls	r2, r3, #1
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	085b      	lsrs	r3, r3, #1
 800791e:	18d2      	adds	r2, r2, r3
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	0019      	movs	r1, r3
 8007926:	0010      	movs	r0, r2
 8007928:	f7f8 fc08 	bl	800013c <__udivsi3>
 800792c:	0003      	movs	r3, r0
 800792e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	2b0f      	cmp	r3, #15
 8007934:	d921      	bls.n	800797a <UART_SetConfig+0x3fa>
 8007936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007938:	2380      	movs	r3, #128	@ 0x80
 800793a:	025b      	lsls	r3, r3, #9
 800793c:	429a      	cmp	r2, r3
 800793e:	d21c      	bcs.n	800797a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007942:	b29a      	uxth	r2, r3
 8007944:	200e      	movs	r0, #14
 8007946:	2420      	movs	r4, #32
 8007948:	1903      	adds	r3, r0, r4
 800794a:	19db      	adds	r3, r3, r7
 800794c:	210f      	movs	r1, #15
 800794e:	438a      	bics	r2, r1
 8007950:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	085b      	lsrs	r3, r3, #1
 8007956:	b29b      	uxth	r3, r3
 8007958:	2207      	movs	r2, #7
 800795a:	4013      	ands	r3, r2
 800795c:	b299      	uxth	r1, r3
 800795e:	1903      	adds	r3, r0, r4
 8007960:	19db      	adds	r3, r3, r7
 8007962:	1902      	adds	r2, r0, r4
 8007964:	19d2      	adds	r2, r2, r7
 8007966:	8812      	ldrh	r2, [r2, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800796c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	1902      	adds	r2, r0, r4
 8007972:	19d2      	adds	r2, r2, r7
 8007974:	8812      	ldrh	r2, [r2, #0]
 8007976:	60da      	str	r2, [r3, #12]
 8007978:	e05e      	b.n	8007a38 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800797a:	231a      	movs	r3, #26
 800797c:	2220      	movs	r2, #32
 800797e:	189b      	adds	r3, r3, r2
 8007980:	19db      	adds	r3, r3, r7
 8007982:	2201      	movs	r2, #1
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	e057      	b.n	8007a38 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007988:	231b      	movs	r3, #27
 800798a:	2220      	movs	r2, #32
 800798c:	189b      	adds	r3, r3, r2
 800798e:	19db      	adds	r3, r3, r7
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b08      	cmp	r3, #8
 8007994:	d015      	beq.n	80079c2 <UART_SetConfig+0x442>
 8007996:	dc18      	bgt.n	80079ca <UART_SetConfig+0x44a>
 8007998:	2b04      	cmp	r3, #4
 800799a:	d00d      	beq.n	80079b8 <UART_SetConfig+0x438>
 800799c:	dc15      	bgt.n	80079ca <UART_SetConfig+0x44a>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <UART_SetConfig+0x428>
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d005      	beq.n	80079b2 <UART_SetConfig+0x432>
 80079a6:	e010      	b.n	80079ca <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079a8:	f7fe fef8 	bl	800679c <HAL_RCC_GetPCLK1Freq>
 80079ac:	0003      	movs	r3, r0
 80079ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079b0:	e014      	b.n	80079dc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079b2:	4b2e      	ldr	r3, [pc, #184]	@ (8007a6c <UART_SetConfig+0x4ec>)
 80079b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079b6:	e011      	b.n	80079dc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079b8:	f7fe fe64 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 80079bc:	0003      	movs	r3, r0
 80079be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079c0:	e00c      	b.n	80079dc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079c2:	2380      	movs	r3, #128	@ 0x80
 80079c4:	021b      	lsls	r3, r3, #8
 80079c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079c8:	e008      	b.n	80079dc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80079ce:	231a      	movs	r3, #26
 80079d0:	2220      	movs	r2, #32
 80079d2:	189b      	adds	r3, r3, r2
 80079d4:	19db      	adds	r3, r3, r7
 80079d6:	2201      	movs	r2, #1
 80079d8:	701a      	strb	r2, [r3, #0]
        break;
 80079da:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80079dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d02a      	beq.n	8007a38 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079e6:	4b20      	ldr	r3, [pc, #128]	@ (8007a68 <UART_SetConfig+0x4e8>)
 80079e8:	0052      	lsls	r2, r2, #1
 80079ea:	5ad3      	ldrh	r3, [r2, r3]
 80079ec:	0019      	movs	r1, r3
 80079ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80079f0:	f7f8 fba4 	bl	800013c <__udivsi3>
 80079f4:	0003      	movs	r3, r0
 80079f6:	001a      	movs	r2, r3
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	085b      	lsrs	r3, r3, #1
 80079fe:	18d2      	adds	r2, r2, r3
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	0019      	movs	r1, r3
 8007a06:	0010      	movs	r0, r2
 8007a08:	f7f8 fb98 	bl	800013c <__udivsi3>
 8007a0c:	0003      	movs	r3, r0
 8007a0e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a12:	2b0f      	cmp	r3, #15
 8007a14:	d90a      	bls.n	8007a2c <UART_SetConfig+0x4ac>
 8007a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a18:	2380      	movs	r3, #128	@ 0x80
 8007a1a:	025b      	lsls	r3, r3, #9
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d205      	bcs.n	8007a2c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60da      	str	r2, [r3, #12]
 8007a2a:	e005      	b.n	8007a38 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007a2c:	231a      	movs	r3, #26
 8007a2e:	2220      	movs	r2, #32
 8007a30:	189b      	adds	r3, r3, r2
 8007a32:	19db      	adds	r3, r3, r7
 8007a34:	2201      	movs	r2, #1
 8007a36:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	226a      	movs	r2, #106	@ 0x6a
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a42:	2268      	movs	r2, #104	@ 0x68
 8007a44:	2101      	movs	r1, #1
 8007a46:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a50:	2200      	movs	r2, #0
 8007a52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a54:	231a      	movs	r3, #26
 8007a56:	2220      	movs	r2, #32
 8007a58:	189b      	adds	r3, r3, r2
 8007a5a:	19db      	adds	r3, r3, r7
 8007a5c:	781b      	ldrb	r3, [r3, #0]
}
 8007a5e:	0018      	movs	r0, r3
 8007a60:	46bd      	mov	sp, r7
 8007a62:	b010      	add	sp, #64	@ 0x40
 8007a64:	bdb0      	pop	{r4, r5, r7, pc}
 8007a66:	46c0      	nop			@ (mov r8, r8)
 8007a68:	0800aef4 	.word	0x0800aef4
 8007a6c:	00f42400 	.word	0x00f42400

08007a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	4013      	ands	r3, r2
 8007a80:	d00b      	beq.n	8007a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	4a4a      	ldr	r2, [pc, #296]	@ (8007bb4 <UART_AdvFeatureConfig+0x144>)
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	0019      	movs	r1, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	d00b      	beq.n	8007abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	4a43      	ldr	r2, [pc, #268]	@ (8007bb8 <UART_AdvFeatureConfig+0x148>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	0019      	movs	r1, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	d00b      	beq.n	8007ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	4a3b      	ldr	r2, [pc, #236]	@ (8007bbc <UART_AdvFeatureConfig+0x14c>)
 8007ace:	4013      	ands	r3, r2
 8007ad0:	0019      	movs	r1, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	d00b      	beq.n	8007b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	4a34      	ldr	r2, [pc, #208]	@ (8007bc0 <UART_AdvFeatureConfig+0x150>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	0019      	movs	r1, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b04:	2210      	movs	r2, #16
 8007b06:	4013      	ands	r3, r2
 8007b08:	d00b      	beq.n	8007b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	4a2c      	ldr	r2, [pc, #176]	@ (8007bc4 <UART_AdvFeatureConfig+0x154>)
 8007b12:	4013      	ands	r3, r2
 8007b14:	0019      	movs	r1, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b26:	2220      	movs	r2, #32
 8007b28:	4013      	ands	r3, r2
 8007b2a:	d00b      	beq.n	8007b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	4a25      	ldr	r2, [pc, #148]	@ (8007bc8 <UART_AdvFeatureConfig+0x158>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	0019      	movs	r1, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b48:	2240      	movs	r2, #64	@ 0x40
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	d01d      	beq.n	8007b8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	4a1d      	ldr	r2, [pc, #116]	@ (8007bcc <UART_AdvFeatureConfig+0x15c>)
 8007b56:	4013      	ands	r3, r2
 8007b58:	0019      	movs	r1, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b6a:	2380      	movs	r3, #128	@ 0x80
 8007b6c:	035b      	lsls	r3, r3, #13
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d10b      	bne.n	8007b8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4a15      	ldr	r2, [pc, #84]	@ (8007bd0 <UART_AdvFeatureConfig+0x160>)
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	0019      	movs	r1, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8e:	2280      	movs	r2, #128	@ 0x80
 8007b90:	4013      	ands	r3, r2
 8007b92:	d00b      	beq.n	8007bac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8007bd4 <UART_AdvFeatureConfig+0x164>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	0019      	movs	r1, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	605a      	str	r2, [r3, #4]
  }
}
 8007bac:	46c0      	nop			@ (mov r8, r8)
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	b002      	add	sp, #8
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	ffff7fff 	.word	0xffff7fff
 8007bb8:	fffdffff 	.word	0xfffdffff
 8007bbc:	fffeffff 	.word	0xfffeffff
 8007bc0:	fffbffff 	.word	0xfffbffff
 8007bc4:	ffffefff 	.word	0xffffefff
 8007bc8:	ffffdfff 	.word	0xffffdfff
 8007bcc:	ffefffff 	.word	0xffefffff
 8007bd0:	ff9fffff 	.word	0xff9fffff
 8007bd4:	fff7ffff 	.word	0xfff7ffff

08007bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b092      	sub	sp, #72	@ 0x48
 8007bdc:	af02      	add	r7, sp, #8
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2290      	movs	r2, #144	@ 0x90
 8007be4:	2100      	movs	r1, #0
 8007be6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007be8:	f7fd f836 	bl	8004c58 <HAL_GetTick>
 8007bec:	0003      	movs	r3, r0
 8007bee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	2b08      	cmp	r3, #8
 8007bfc:	d12d      	bne.n	8007c5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c00:	2280      	movs	r2, #128	@ 0x80
 8007c02:	0391      	lsls	r1, r2, #14
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4a47      	ldr	r2, [pc, #284]	@ (8007d24 <UART_CheckIdleState+0x14c>)
 8007c08:	9200      	str	r2, [sp, #0]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f000 f88e 	bl	8007d2c <UART_WaitOnFlagUntilTimeout>
 8007c10:	1e03      	subs	r3, r0, #0
 8007c12:	d022      	beq.n	8007c5a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c14:	f3ef 8310 	mrs	r3, PRIMASK
 8007c18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c1e:	2301      	movs	r3, #1
 8007c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c24:	f383 8810 	msr	PRIMASK, r3
}
 8007c28:	46c0      	nop			@ (mov r8, r8)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2180      	movs	r1, #128	@ 0x80
 8007c36:	438a      	bics	r2, r1
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c40:	f383 8810 	msr	PRIMASK, r3
}
 8007c44:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2288      	movs	r2, #136	@ 0x88
 8007c4a:	2120      	movs	r1, #32
 8007c4c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2284      	movs	r2, #132	@ 0x84
 8007c52:	2100      	movs	r1, #0
 8007c54:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e060      	b.n	8007d1c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2204      	movs	r2, #4
 8007c62:	4013      	ands	r3, r2
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d146      	bne.n	8007cf6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c6a:	2280      	movs	r2, #128	@ 0x80
 8007c6c:	03d1      	lsls	r1, r2, #15
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	4a2c      	ldr	r2, [pc, #176]	@ (8007d24 <UART_CheckIdleState+0x14c>)
 8007c72:	9200      	str	r2, [sp, #0]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f000 f859 	bl	8007d2c <UART_WaitOnFlagUntilTimeout>
 8007c7a:	1e03      	subs	r3, r0, #0
 8007c7c:	d03b      	beq.n	8007cf6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c82:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c84:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c88:	2301      	movs	r3, #1
 8007c8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f383 8810 	msr	PRIMASK, r3
}
 8007c92:	46c0      	nop			@ (mov r8, r8)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4922      	ldr	r1, [pc, #136]	@ (8007d28 <UART_CheckIdleState+0x150>)
 8007ca0:	400a      	ands	r2, r1
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f383 8810 	msr	PRIMASK, r3
}
 8007cae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cb6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cba:	2301      	movs	r3, #1
 8007cbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	f383 8810 	msr	PRIMASK, r3
}
 8007cc4:	46c0      	nop			@ (mov r8, r8)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	438a      	bics	r2, r1
 8007cd4:	609a      	str	r2, [r3, #8]
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	f383 8810 	msr	PRIMASK, r3
}
 8007ce0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	228c      	movs	r2, #140	@ 0x8c
 8007ce6:	2120      	movs	r1, #32
 8007ce8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2284      	movs	r2, #132	@ 0x84
 8007cee:	2100      	movs	r1, #0
 8007cf0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e012      	b.n	8007d1c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2288      	movs	r2, #136	@ 0x88
 8007cfa:	2120      	movs	r1, #32
 8007cfc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	228c      	movs	r2, #140	@ 0x8c
 8007d02:	2120      	movs	r1, #32
 8007d04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2284      	movs	r2, #132	@ 0x84
 8007d16:	2100      	movs	r1, #0
 8007d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	b010      	add	sp, #64	@ 0x40
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	01ffffff 	.word	0x01ffffff
 8007d28:	fffffedf 	.word	0xfffffedf

08007d2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	1dfb      	adds	r3, r7, #7
 8007d3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d3c:	e051      	b.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	3301      	adds	r3, #1
 8007d42:	d04e      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d44:	f7fc ff88 	bl	8004c58 <HAL_GetTick>
 8007d48:	0002      	movs	r2, r0
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d302      	bcc.n	8007d5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e051      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2204      	movs	r2, #4
 8007d66:	4013      	ands	r3, r2
 8007d68:	d03b      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b80      	cmp	r3, #128	@ 0x80
 8007d6e:	d038      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b40      	cmp	r3, #64	@ 0x40
 8007d74:	d035      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	2208      	movs	r2, #8
 8007d7e:	4013      	ands	r3, r2
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	d111      	bne.n	8007da8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2208      	movs	r2, #8
 8007d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f000 f83c 	bl	8007e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2290      	movs	r2, #144	@ 0x90
 8007d98:	2108      	movs	r1, #8
 8007d9a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2284      	movs	r2, #132	@ 0x84
 8007da0:	2100      	movs	r1, #0
 8007da2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e02c      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69da      	ldr	r2, [r3, #28]
 8007dae:	2380      	movs	r3, #128	@ 0x80
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	401a      	ands	r2, r3
 8007db4:	2380      	movs	r3, #128	@ 0x80
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d112      	bne.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2280      	movs	r2, #128	@ 0x80
 8007dc2:	0112      	lsls	r2, r2, #4
 8007dc4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	0018      	movs	r0, r3
 8007dca:	f000 f81f 	bl	8007e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2290      	movs	r2, #144	@ 0x90
 8007dd2:	2120      	movs	r1, #32
 8007dd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2284      	movs	r2, #132	@ 0x84
 8007dda:	2100      	movs	r1, #0
 8007ddc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e00f      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	4013      	ands	r3, r2
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	425a      	negs	r2, r3
 8007df2:	4153      	adcs	r3, r2
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	001a      	movs	r2, r3
 8007df8:	1dfb      	adds	r3, r7, #7
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d09e      	beq.n	8007d3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	0018      	movs	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b004      	add	sp, #16
 8007e08:	bd80      	pop	{r7, pc}
	...

08007e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08e      	sub	sp, #56	@ 0x38
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e14:	f3ef 8310 	mrs	r3, PRIMASK
 8007e18:	617b      	str	r3, [r7, #20]
  return(result);
 8007e1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e1e:	2301      	movs	r3, #1
 8007e20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	f383 8810 	msr	PRIMASK, r3
}
 8007e28:	46c0      	nop			@ (mov r8, r8)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4926      	ldr	r1, [pc, #152]	@ (8007ed0 <UART_EndRxTransfer+0xc4>)
 8007e36:	400a      	ands	r2, r1
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	f383 8810 	msr	PRIMASK, r3
}
 8007e44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e46:	f3ef 8310 	mrs	r3, PRIMASK
 8007e4a:	623b      	str	r3, [r7, #32]
  return(result);
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e50:	2301      	movs	r3, #1
 8007e52:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e56:	f383 8810 	msr	PRIMASK, r3
}
 8007e5a:	46c0      	nop			@ (mov r8, r8)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689a      	ldr	r2, [r3, #8]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	491b      	ldr	r1, [pc, #108]	@ (8007ed4 <UART_EndRxTransfer+0xc8>)
 8007e68:	400a      	ands	r2, r1
 8007e6a:	609a      	str	r2, [r3, #8]
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e72:	f383 8810 	msr	PRIMASK, r3
}
 8007e76:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d118      	bne.n	8007eb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e80:	f3ef 8310 	mrs	r3, PRIMASK
 8007e84:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f383 8810 	msr	PRIMASK, r3
}
 8007e94:	46c0      	nop			@ (mov r8, r8)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2110      	movs	r1, #16
 8007ea2:	438a      	bics	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f383 8810 	msr	PRIMASK, r3
}
 8007eb0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	228c      	movs	r2, #140	@ 0x8c
 8007eb6:	2120      	movs	r1, #32
 8007eb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ec6:	46c0      	nop			@ (mov r8, r8)
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	b00e      	add	sp, #56	@ 0x38
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	46c0      	nop			@ (mov r8, r8)
 8007ed0:	fffffedf 	.word	0xfffffedf
 8007ed4:	effffffe 	.word	0xeffffffe

08007ed8 <__cvt>:
 8007ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eda:	001f      	movs	r7, r3
 8007edc:	2300      	movs	r3, #0
 8007ede:	0016      	movs	r6, r2
 8007ee0:	b08b      	sub	sp, #44	@ 0x2c
 8007ee2:	429f      	cmp	r7, r3
 8007ee4:	da04      	bge.n	8007ef0 <__cvt+0x18>
 8007ee6:	2180      	movs	r1, #128	@ 0x80
 8007ee8:	0609      	lsls	r1, r1, #24
 8007eea:	187b      	adds	r3, r7, r1
 8007eec:	001f      	movs	r7, r3
 8007eee:	232d      	movs	r3, #45	@ 0x2d
 8007ef0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007ef2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8007ef4:	7013      	strb	r3, [r2, #0]
 8007ef6:	2320      	movs	r3, #32
 8007ef8:	2203      	movs	r2, #3
 8007efa:	439d      	bics	r5, r3
 8007efc:	2d46      	cmp	r5, #70	@ 0x46
 8007efe:	d007      	beq.n	8007f10 <__cvt+0x38>
 8007f00:	002b      	movs	r3, r5
 8007f02:	3b45      	subs	r3, #69	@ 0x45
 8007f04:	4259      	negs	r1, r3
 8007f06:	414b      	adcs	r3, r1
 8007f08:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007f0a:	3a01      	subs	r2, #1
 8007f0c:	18cb      	adds	r3, r1, r3
 8007f0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f10:	ab09      	add	r3, sp, #36	@ 0x24
 8007f12:	9304      	str	r3, [sp, #16]
 8007f14:	ab08      	add	r3, sp, #32
 8007f16:	9303      	str	r3, [sp, #12]
 8007f18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f1a:	9200      	str	r2, [sp, #0]
 8007f1c:	9302      	str	r3, [sp, #8]
 8007f1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f20:	0032      	movs	r2, r6
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	003b      	movs	r3, r7
 8007f26:	f000 fea3 	bl	8008c70 <_dtoa_r>
 8007f2a:	0004      	movs	r4, r0
 8007f2c:	2d47      	cmp	r5, #71	@ 0x47
 8007f2e:	d11b      	bne.n	8007f68 <__cvt+0x90>
 8007f30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f32:	07db      	lsls	r3, r3, #31
 8007f34:	d511      	bpl.n	8007f5a <__cvt+0x82>
 8007f36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f38:	18c3      	adds	r3, r0, r3
 8007f3a:	9307      	str	r3, [sp, #28]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2300      	movs	r3, #0
 8007f40:	0030      	movs	r0, r6
 8007f42:	0039      	movs	r1, r7
 8007f44:	f7f8 fa80 	bl	8000448 <__aeabi_dcmpeq>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d001      	beq.n	8007f50 <__cvt+0x78>
 8007f4c:	9b07      	ldr	r3, [sp, #28]
 8007f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f50:	2230      	movs	r2, #48	@ 0x30
 8007f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f54:	9907      	ldr	r1, [sp, #28]
 8007f56:	428b      	cmp	r3, r1
 8007f58:	d320      	bcc.n	8007f9c <__cvt+0xc4>
 8007f5a:	0020      	movs	r0, r4
 8007f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f5e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007f60:	1b1b      	subs	r3, r3, r4
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	b00b      	add	sp, #44	@ 0x2c
 8007f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f6a:	18c3      	adds	r3, r0, r3
 8007f6c:	9307      	str	r3, [sp, #28]
 8007f6e:	2d46      	cmp	r5, #70	@ 0x46
 8007f70:	d1e4      	bne.n	8007f3c <__cvt+0x64>
 8007f72:	7803      	ldrb	r3, [r0, #0]
 8007f74:	2b30      	cmp	r3, #48	@ 0x30
 8007f76:	d10c      	bne.n	8007f92 <__cvt+0xba>
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	0030      	movs	r0, r6
 8007f7e:	0039      	movs	r1, r7
 8007f80:	f7f8 fa62 	bl	8000448 <__aeabi_dcmpeq>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d104      	bne.n	8007f92 <__cvt+0xba>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007f8c:	1a9b      	subs	r3, r3, r2
 8007f8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f90:	6013      	str	r3, [r2, #0]
 8007f92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f94:	9a07      	ldr	r2, [sp, #28]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	18d3      	adds	r3, r2, r3
 8007f9a:	e7ce      	b.n	8007f3a <__cvt+0x62>
 8007f9c:	1c59      	adds	r1, r3, #1
 8007f9e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007fa0:	701a      	strb	r2, [r3, #0]
 8007fa2:	e7d6      	b.n	8007f52 <__cvt+0x7a>

08007fa4 <__exponent>:
 8007fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa6:	232b      	movs	r3, #43	@ 0x2b
 8007fa8:	b085      	sub	sp, #20
 8007faa:	0005      	movs	r5, r0
 8007fac:	1e0c      	subs	r4, r1, #0
 8007fae:	7002      	strb	r2, [r0, #0]
 8007fb0:	da01      	bge.n	8007fb6 <__exponent+0x12>
 8007fb2:	424c      	negs	r4, r1
 8007fb4:	3302      	adds	r3, #2
 8007fb6:	706b      	strb	r3, [r5, #1]
 8007fb8:	2c09      	cmp	r4, #9
 8007fba:	dd2c      	ble.n	8008016 <__exponent+0x72>
 8007fbc:	ab02      	add	r3, sp, #8
 8007fbe:	1dde      	adds	r6, r3, #7
 8007fc0:	0020      	movs	r0, r4
 8007fc2:	210a      	movs	r1, #10
 8007fc4:	f7f8 fa2a 	bl	800041c <__aeabi_idivmod>
 8007fc8:	0037      	movs	r7, r6
 8007fca:	3130      	adds	r1, #48	@ 0x30
 8007fcc:	3e01      	subs	r6, #1
 8007fce:	0020      	movs	r0, r4
 8007fd0:	7031      	strb	r1, [r6, #0]
 8007fd2:	210a      	movs	r1, #10
 8007fd4:	9401      	str	r4, [sp, #4]
 8007fd6:	f7f8 f93b 	bl	8000250 <__divsi3>
 8007fda:	9b01      	ldr	r3, [sp, #4]
 8007fdc:	0004      	movs	r4, r0
 8007fde:	2b63      	cmp	r3, #99	@ 0x63
 8007fe0:	dcee      	bgt.n	8007fc0 <__exponent+0x1c>
 8007fe2:	1eba      	subs	r2, r7, #2
 8007fe4:	1ca8      	adds	r0, r5, #2
 8007fe6:	0001      	movs	r1, r0
 8007fe8:	0013      	movs	r3, r2
 8007fea:	3430      	adds	r4, #48	@ 0x30
 8007fec:	7014      	strb	r4, [r2, #0]
 8007fee:	ac02      	add	r4, sp, #8
 8007ff0:	3407      	adds	r4, #7
 8007ff2:	429c      	cmp	r4, r3
 8007ff4:	d80a      	bhi.n	800800c <__exponent+0x68>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4294      	cmp	r4, r2
 8007ffa:	d303      	bcc.n	8008004 <__exponent+0x60>
 8007ffc:	3309      	adds	r3, #9
 8007ffe:	aa02      	add	r2, sp, #8
 8008000:	189b      	adds	r3, r3, r2
 8008002:	1bdb      	subs	r3, r3, r7
 8008004:	18c0      	adds	r0, r0, r3
 8008006:	1b40      	subs	r0, r0, r5
 8008008:	b005      	add	sp, #20
 800800a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800800c:	781c      	ldrb	r4, [r3, #0]
 800800e:	3301      	adds	r3, #1
 8008010:	700c      	strb	r4, [r1, #0]
 8008012:	3101      	adds	r1, #1
 8008014:	e7eb      	b.n	8007fee <__exponent+0x4a>
 8008016:	2330      	movs	r3, #48	@ 0x30
 8008018:	18e4      	adds	r4, r4, r3
 800801a:	70ab      	strb	r3, [r5, #2]
 800801c:	1d28      	adds	r0, r5, #4
 800801e:	70ec      	strb	r4, [r5, #3]
 8008020:	e7f1      	b.n	8008006 <__exponent+0x62>
	...

08008024 <_printf_float>:
 8008024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008026:	b097      	sub	sp, #92	@ 0x5c
 8008028:	000d      	movs	r5, r1
 800802a:	920a      	str	r2, [sp, #40]	@ 0x28
 800802c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800802e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008030:	9009      	str	r0, [sp, #36]	@ 0x24
 8008032:	f000 fd0d 	bl	8008a50 <_localeconv_r>
 8008036:	6803      	ldr	r3, [r0, #0]
 8008038:	0018      	movs	r0, r3
 800803a:	930d      	str	r3, [sp, #52]	@ 0x34
 800803c:	f7f8 f862 	bl	8000104 <strlen>
 8008040:	2300      	movs	r3, #0
 8008042:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008044:	9314      	str	r3, [sp, #80]	@ 0x50
 8008046:	7e2b      	ldrb	r3, [r5, #24]
 8008048:	2207      	movs	r2, #7
 800804a:	930c      	str	r3, [sp, #48]	@ 0x30
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008050:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	05c9      	lsls	r1, r1, #23
 8008056:	d545      	bpl.n	80080e4 <_printf_float+0xc0>
 8008058:	189b      	adds	r3, r3, r2
 800805a:	4393      	bics	r3, r2
 800805c:	001a      	movs	r2, r3
 800805e:	3208      	adds	r2, #8
 8008060:	6022      	str	r2, [r4, #0]
 8008062:	2201      	movs	r2, #1
 8008064:	681e      	ldr	r6, [r3, #0]
 8008066:	685f      	ldr	r7, [r3, #4]
 8008068:	007b      	lsls	r3, r7, #1
 800806a:	085b      	lsrs	r3, r3, #1
 800806c:	9311      	str	r3, [sp, #68]	@ 0x44
 800806e:	9610      	str	r6, [sp, #64]	@ 0x40
 8008070:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008072:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008074:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008076:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008078:	4ba7      	ldr	r3, [pc, #668]	@ (8008318 <_printf_float+0x2f4>)
 800807a:	4252      	negs	r2, r2
 800807c:	f7fa ff90 	bl	8002fa0 <__aeabi_dcmpun>
 8008080:	2800      	cmp	r0, #0
 8008082:	d131      	bne.n	80080e8 <_printf_float+0xc4>
 8008084:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008086:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008088:	2201      	movs	r2, #1
 800808a:	4ba3      	ldr	r3, [pc, #652]	@ (8008318 <_printf_float+0x2f4>)
 800808c:	4252      	negs	r2, r2
 800808e:	f7f8 f9eb 	bl	8000468 <__aeabi_dcmple>
 8008092:	2800      	cmp	r0, #0
 8008094:	d128      	bne.n	80080e8 <_printf_float+0xc4>
 8008096:	2200      	movs	r2, #0
 8008098:	2300      	movs	r3, #0
 800809a:	0030      	movs	r0, r6
 800809c:	0039      	movs	r1, r7
 800809e:	f7f8 f9d9 	bl	8000454 <__aeabi_dcmplt>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d003      	beq.n	80080ae <_printf_float+0x8a>
 80080a6:	002b      	movs	r3, r5
 80080a8:	222d      	movs	r2, #45	@ 0x2d
 80080aa:	3343      	adds	r3, #67	@ 0x43
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080b0:	4f9a      	ldr	r7, [pc, #616]	@ (800831c <_printf_float+0x2f8>)
 80080b2:	2b47      	cmp	r3, #71	@ 0x47
 80080b4:	d800      	bhi.n	80080b8 <_printf_float+0x94>
 80080b6:	4f9a      	ldr	r7, [pc, #616]	@ (8008320 <_printf_float+0x2fc>)
 80080b8:	2303      	movs	r3, #3
 80080ba:	2400      	movs	r4, #0
 80080bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080be:	612b      	str	r3, [r5, #16]
 80080c0:	3301      	adds	r3, #1
 80080c2:	439a      	bics	r2, r3
 80080c4:	602a      	str	r2, [r5, #0]
 80080c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080c8:	0029      	movs	r1, r5
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080d0:	aa15      	add	r2, sp, #84	@ 0x54
 80080d2:	f000 f9e5 	bl	80084a0 <_printf_common>
 80080d6:	3001      	adds	r0, #1
 80080d8:	d000      	beq.n	80080dc <_printf_float+0xb8>
 80080da:	e09e      	b.n	800821a <_printf_float+0x1f6>
 80080dc:	2001      	movs	r0, #1
 80080de:	4240      	negs	r0, r0
 80080e0:	b017      	add	sp, #92	@ 0x5c
 80080e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e4:	3307      	adds	r3, #7
 80080e6:	e7b8      	b.n	800805a <_printf_float+0x36>
 80080e8:	0032      	movs	r2, r6
 80080ea:	003b      	movs	r3, r7
 80080ec:	0030      	movs	r0, r6
 80080ee:	0039      	movs	r1, r7
 80080f0:	f7fa ff56 	bl	8002fa0 <__aeabi_dcmpun>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d00b      	beq.n	8008110 <_printf_float+0xec>
 80080f8:	2f00      	cmp	r7, #0
 80080fa:	da03      	bge.n	8008104 <_printf_float+0xe0>
 80080fc:	002b      	movs	r3, r5
 80080fe:	222d      	movs	r2, #45	@ 0x2d
 8008100:	3343      	adds	r3, #67	@ 0x43
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008106:	4f87      	ldr	r7, [pc, #540]	@ (8008324 <_printf_float+0x300>)
 8008108:	2b47      	cmp	r3, #71	@ 0x47
 800810a:	d8d5      	bhi.n	80080b8 <_printf_float+0x94>
 800810c:	4f86      	ldr	r7, [pc, #536]	@ (8008328 <_printf_float+0x304>)
 800810e:	e7d3      	b.n	80080b8 <_printf_float+0x94>
 8008110:	2220      	movs	r2, #32
 8008112:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008114:	686b      	ldr	r3, [r5, #4]
 8008116:	4394      	bics	r4, r2
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	d146      	bne.n	80081aa <_printf_float+0x186>
 800811c:	3307      	adds	r3, #7
 800811e:	606b      	str	r3, [r5, #4]
 8008120:	2380      	movs	r3, #128	@ 0x80
 8008122:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	4313      	orrs	r3, r2
 8008128:	2200      	movs	r2, #0
 800812a:	602b      	str	r3, [r5, #0]
 800812c:	9206      	str	r2, [sp, #24]
 800812e:	aa14      	add	r2, sp, #80	@ 0x50
 8008130:	9205      	str	r2, [sp, #20]
 8008132:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008134:	a90a      	add	r1, sp, #40	@ 0x28
 8008136:	9204      	str	r2, [sp, #16]
 8008138:	aa13      	add	r2, sp, #76	@ 0x4c
 800813a:	9203      	str	r2, [sp, #12]
 800813c:	2223      	movs	r2, #35	@ 0x23
 800813e:	1852      	adds	r2, r2, r1
 8008140:	9202      	str	r2, [sp, #8]
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	686b      	ldr	r3, [r5, #4]
 8008146:	0032      	movs	r2, r6
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800814c:	003b      	movs	r3, r7
 800814e:	f7ff fec3 	bl	8007ed8 <__cvt>
 8008152:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008154:	0007      	movs	r7, r0
 8008156:	2c47      	cmp	r4, #71	@ 0x47
 8008158:	d12d      	bne.n	80081b6 <_printf_float+0x192>
 800815a:	1cd3      	adds	r3, r2, #3
 800815c:	db02      	blt.n	8008164 <_printf_float+0x140>
 800815e:	686b      	ldr	r3, [r5, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	dd47      	ble.n	80081f4 <_printf_float+0x1d0>
 8008164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008166:	3b02      	subs	r3, #2
 8008168:	b2db      	uxtb	r3, r3
 800816a:	930c      	str	r3, [sp, #48]	@ 0x30
 800816c:	0028      	movs	r0, r5
 800816e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008170:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008172:	3901      	subs	r1, #1
 8008174:	3050      	adds	r0, #80	@ 0x50
 8008176:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008178:	f7ff ff14 	bl	8007fa4 <__exponent>
 800817c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800817e:	0004      	movs	r4, r0
 8008180:	1813      	adds	r3, r2, r0
 8008182:	612b      	str	r3, [r5, #16]
 8008184:	2a01      	cmp	r2, #1
 8008186:	dc02      	bgt.n	800818e <_printf_float+0x16a>
 8008188:	682a      	ldr	r2, [r5, #0]
 800818a:	07d2      	lsls	r2, r2, #31
 800818c:	d501      	bpl.n	8008192 <_printf_float+0x16e>
 800818e:	3301      	adds	r3, #1
 8008190:	612b      	str	r3, [r5, #16]
 8008192:	2323      	movs	r3, #35	@ 0x23
 8008194:	aa0a      	add	r2, sp, #40	@ 0x28
 8008196:	189b      	adds	r3, r3, r2
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d100      	bne.n	80081a0 <_printf_float+0x17c>
 800819e:	e792      	b.n	80080c6 <_printf_float+0xa2>
 80081a0:	002b      	movs	r3, r5
 80081a2:	222d      	movs	r2, #45	@ 0x2d
 80081a4:	3343      	adds	r3, #67	@ 0x43
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	e78d      	b.n	80080c6 <_printf_float+0xa2>
 80081aa:	2c47      	cmp	r4, #71	@ 0x47
 80081ac:	d1b8      	bne.n	8008120 <_printf_float+0xfc>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1b6      	bne.n	8008120 <_printf_float+0xfc>
 80081b2:	3301      	adds	r3, #1
 80081b4:	e7b3      	b.n	800811e <_printf_float+0xfa>
 80081b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081b8:	2b65      	cmp	r3, #101	@ 0x65
 80081ba:	d9d7      	bls.n	800816c <_printf_float+0x148>
 80081bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081be:	2b66      	cmp	r3, #102	@ 0x66
 80081c0:	d11a      	bne.n	80081f8 <_printf_float+0x1d4>
 80081c2:	686b      	ldr	r3, [r5, #4]
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	dd09      	ble.n	80081dc <_printf_float+0x1b8>
 80081c8:	612a      	str	r2, [r5, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d102      	bne.n	80081d4 <_printf_float+0x1b0>
 80081ce:	6829      	ldr	r1, [r5, #0]
 80081d0:	07c9      	lsls	r1, r1, #31
 80081d2:	d50b      	bpl.n	80081ec <_printf_float+0x1c8>
 80081d4:	3301      	adds	r3, #1
 80081d6:	189b      	adds	r3, r3, r2
 80081d8:	612b      	str	r3, [r5, #16]
 80081da:	e007      	b.n	80081ec <_printf_float+0x1c8>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <_printf_float+0x1c4>
 80081e0:	2201      	movs	r2, #1
 80081e2:	6829      	ldr	r1, [r5, #0]
 80081e4:	4211      	tst	r1, r2
 80081e6:	d000      	beq.n	80081ea <_printf_float+0x1c6>
 80081e8:	1c9a      	adds	r2, r3, #2
 80081ea:	612a      	str	r2, [r5, #16]
 80081ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081ee:	2400      	movs	r4, #0
 80081f0:	65ab      	str	r3, [r5, #88]	@ 0x58
 80081f2:	e7ce      	b.n	8008192 <_printf_float+0x16e>
 80081f4:	2367      	movs	r3, #103	@ 0x67
 80081f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80081f8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80081fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081fc:	4299      	cmp	r1, r3
 80081fe:	db06      	blt.n	800820e <_printf_float+0x1ea>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	6129      	str	r1, [r5, #16]
 8008204:	07db      	lsls	r3, r3, #31
 8008206:	d5f1      	bpl.n	80081ec <_printf_float+0x1c8>
 8008208:	3101      	adds	r1, #1
 800820a:	6129      	str	r1, [r5, #16]
 800820c:	e7ee      	b.n	80081ec <_printf_float+0x1c8>
 800820e:	2201      	movs	r2, #1
 8008210:	2900      	cmp	r1, #0
 8008212:	dce0      	bgt.n	80081d6 <_printf_float+0x1b2>
 8008214:	1892      	adds	r2, r2, r2
 8008216:	1a52      	subs	r2, r2, r1
 8008218:	e7dd      	b.n	80081d6 <_printf_float+0x1b2>
 800821a:	682a      	ldr	r2, [r5, #0]
 800821c:	0553      	lsls	r3, r2, #21
 800821e:	d408      	bmi.n	8008232 <_printf_float+0x20e>
 8008220:	692b      	ldr	r3, [r5, #16]
 8008222:	003a      	movs	r2, r7
 8008224:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008228:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800822a:	47a0      	blx	r4
 800822c:	3001      	adds	r0, #1
 800822e:	d129      	bne.n	8008284 <_printf_float+0x260>
 8008230:	e754      	b.n	80080dc <_printf_float+0xb8>
 8008232:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008234:	2b65      	cmp	r3, #101	@ 0x65
 8008236:	d800      	bhi.n	800823a <_printf_float+0x216>
 8008238:	e0db      	b.n	80083f2 <_printf_float+0x3ce>
 800823a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800823c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800823e:	2200      	movs	r2, #0
 8008240:	2300      	movs	r3, #0
 8008242:	f7f8 f901 	bl	8000448 <__aeabi_dcmpeq>
 8008246:	2800      	cmp	r0, #0
 8008248:	d033      	beq.n	80082b2 <_printf_float+0x28e>
 800824a:	2301      	movs	r3, #1
 800824c:	4a37      	ldr	r2, [pc, #220]	@ (800832c <_printf_float+0x308>)
 800824e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008250:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008252:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008254:	47a0      	blx	r4
 8008256:	3001      	adds	r0, #1
 8008258:	d100      	bne.n	800825c <_printf_float+0x238>
 800825a:	e73f      	b.n	80080dc <_printf_float+0xb8>
 800825c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800825e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008260:	42b3      	cmp	r3, r6
 8008262:	db02      	blt.n	800826a <_printf_float+0x246>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	07db      	lsls	r3, r3, #31
 8008268:	d50c      	bpl.n	8008284 <_printf_float+0x260>
 800826a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800826c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800826e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008270:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008274:	47a0      	blx	r4
 8008276:	2400      	movs	r4, #0
 8008278:	3001      	adds	r0, #1
 800827a:	d100      	bne.n	800827e <_printf_float+0x25a>
 800827c:	e72e      	b.n	80080dc <_printf_float+0xb8>
 800827e:	1e73      	subs	r3, r6, #1
 8008280:	42a3      	cmp	r3, r4
 8008282:	dc0a      	bgt.n	800829a <_printf_float+0x276>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	079b      	lsls	r3, r3, #30
 8008288:	d500      	bpl.n	800828c <_printf_float+0x268>
 800828a:	e106      	b.n	800849a <_printf_float+0x476>
 800828c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800828e:	68e8      	ldr	r0, [r5, #12]
 8008290:	4298      	cmp	r0, r3
 8008292:	db00      	blt.n	8008296 <_printf_float+0x272>
 8008294:	e724      	b.n	80080e0 <_printf_float+0xbc>
 8008296:	0018      	movs	r0, r3
 8008298:	e722      	b.n	80080e0 <_printf_float+0xbc>
 800829a:	002a      	movs	r2, r5
 800829c:	2301      	movs	r3, #1
 800829e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082a2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80082a4:	321a      	adds	r2, #26
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	d100      	bne.n	80082ae <_printf_float+0x28a>
 80082ac:	e716      	b.n	80080dc <_printf_float+0xb8>
 80082ae:	3401      	adds	r4, #1
 80082b0:	e7e5      	b.n	800827e <_printf_float+0x25a>
 80082b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dc3b      	bgt.n	8008330 <_printf_float+0x30c>
 80082b8:	2301      	movs	r3, #1
 80082ba:	4a1c      	ldr	r2, [pc, #112]	@ (800832c <_printf_float+0x308>)
 80082bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80082c2:	47a0      	blx	r4
 80082c4:	3001      	adds	r0, #1
 80082c6:	d100      	bne.n	80082ca <_printf_float+0x2a6>
 80082c8:	e708      	b.n	80080dc <_printf_float+0xb8>
 80082ca:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80082cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082ce:	4333      	orrs	r3, r6
 80082d0:	d102      	bne.n	80082d8 <_printf_float+0x2b4>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	07db      	lsls	r3, r3, #31
 80082d6:	d5d5      	bpl.n	8008284 <_printf_float+0x260>
 80082d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80082e2:	47a0      	blx	r4
 80082e4:	2300      	movs	r3, #0
 80082e6:	3001      	adds	r0, #1
 80082e8:	d100      	bne.n	80082ec <_printf_float+0x2c8>
 80082ea:	e6f7      	b.n	80080dc <_printf_float+0xb8>
 80082ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80082ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80082f2:	425b      	negs	r3, r3
 80082f4:	4293      	cmp	r3, r2
 80082f6:	dc01      	bgt.n	80082fc <_printf_float+0x2d8>
 80082f8:	0033      	movs	r3, r6
 80082fa:	e792      	b.n	8008222 <_printf_float+0x1fe>
 80082fc:	002a      	movs	r2, r5
 80082fe:	2301      	movs	r3, #1
 8008300:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008304:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008306:	321a      	adds	r2, #26
 8008308:	47a0      	blx	r4
 800830a:	3001      	adds	r0, #1
 800830c:	d100      	bne.n	8008310 <_printf_float+0x2ec>
 800830e:	e6e5      	b.n	80080dc <_printf_float+0xb8>
 8008310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008312:	3301      	adds	r3, #1
 8008314:	e7ea      	b.n	80082ec <_printf_float+0x2c8>
 8008316:	46c0      	nop			@ (mov r8, r8)
 8008318:	7fefffff 	.word	0x7fefffff
 800831c:	0800af10 	.word	0x0800af10
 8008320:	0800af0c 	.word	0x0800af0c
 8008324:	0800af18 	.word	0x0800af18
 8008328:	0800af14 	.word	0x0800af14
 800832c:	0800af1c 	.word	0x0800af1c
 8008330:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008332:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008334:	930c      	str	r3, [sp, #48]	@ 0x30
 8008336:	429e      	cmp	r6, r3
 8008338:	dd00      	ble.n	800833c <_printf_float+0x318>
 800833a:	001e      	movs	r6, r3
 800833c:	2e00      	cmp	r6, #0
 800833e:	dc31      	bgt.n	80083a4 <_printf_float+0x380>
 8008340:	43f3      	mvns	r3, r6
 8008342:	2400      	movs	r4, #0
 8008344:	17db      	asrs	r3, r3, #31
 8008346:	4033      	ands	r3, r6
 8008348:	930e      	str	r3, [sp, #56]	@ 0x38
 800834a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800834c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800834e:	1af3      	subs	r3, r6, r3
 8008350:	42a3      	cmp	r3, r4
 8008352:	dc30      	bgt.n	80083b6 <_printf_float+0x392>
 8008354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008356:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008358:	429a      	cmp	r2, r3
 800835a:	dc38      	bgt.n	80083ce <_printf_float+0x3aa>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	07db      	lsls	r3, r3, #31
 8008360:	d435      	bmi.n	80083ce <_printf_float+0x3aa>
 8008362:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008366:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008368:	1b9b      	subs	r3, r3, r6
 800836a:	1b14      	subs	r4, r2, r4
 800836c:	429c      	cmp	r4, r3
 800836e:	dd00      	ble.n	8008372 <_printf_float+0x34e>
 8008370:	001c      	movs	r4, r3
 8008372:	2c00      	cmp	r4, #0
 8008374:	dc34      	bgt.n	80083e0 <_printf_float+0x3bc>
 8008376:	43e3      	mvns	r3, r4
 8008378:	2600      	movs	r6, #0
 800837a:	17db      	asrs	r3, r3, #31
 800837c:	401c      	ands	r4, r3
 800837e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008380:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	1b1b      	subs	r3, r3, r4
 8008386:	42b3      	cmp	r3, r6
 8008388:	dc00      	bgt.n	800838c <_printf_float+0x368>
 800838a:	e77b      	b.n	8008284 <_printf_float+0x260>
 800838c:	002a      	movs	r2, r5
 800838e:	2301      	movs	r3, #1
 8008390:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008394:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008396:	321a      	adds	r2, #26
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	d100      	bne.n	80083a0 <_printf_float+0x37c>
 800839e:	e69d      	b.n	80080dc <_printf_float+0xb8>
 80083a0:	3601      	adds	r6, #1
 80083a2:	e7ec      	b.n	800837e <_printf_float+0x35a>
 80083a4:	0033      	movs	r3, r6
 80083a6:	003a      	movs	r2, r7
 80083a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083ac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80083ae:	47a0      	blx	r4
 80083b0:	3001      	adds	r0, #1
 80083b2:	d1c5      	bne.n	8008340 <_printf_float+0x31c>
 80083b4:	e692      	b.n	80080dc <_printf_float+0xb8>
 80083b6:	002a      	movs	r2, r5
 80083b8:	2301      	movs	r3, #1
 80083ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80083c0:	321a      	adds	r2, #26
 80083c2:	47b0      	blx	r6
 80083c4:	3001      	adds	r0, #1
 80083c6:	d100      	bne.n	80083ca <_printf_float+0x3a6>
 80083c8:	e688      	b.n	80080dc <_printf_float+0xb8>
 80083ca:	3401      	adds	r4, #1
 80083cc:	e7bd      	b.n	800834a <_printf_float+0x326>
 80083ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80083d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083d6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80083d8:	47a0      	blx	r4
 80083da:	3001      	adds	r0, #1
 80083dc:	d1c1      	bne.n	8008362 <_printf_float+0x33e>
 80083de:	e67d      	b.n	80080dc <_printf_float+0xb8>
 80083e0:	19ba      	adds	r2, r7, r6
 80083e2:	0023      	movs	r3, r4
 80083e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80083ea:	47b0      	blx	r6
 80083ec:	3001      	adds	r0, #1
 80083ee:	d1c2      	bne.n	8008376 <_printf_float+0x352>
 80083f0:	e674      	b.n	80080dc <_printf_float+0xb8>
 80083f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	dc02      	bgt.n	8008400 <_printf_float+0x3dc>
 80083fa:	2301      	movs	r3, #1
 80083fc:	421a      	tst	r2, r3
 80083fe:	d039      	beq.n	8008474 <_printf_float+0x450>
 8008400:	2301      	movs	r3, #1
 8008402:	003a      	movs	r2, r7
 8008404:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008408:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800840a:	47b0      	blx	r6
 800840c:	3001      	adds	r0, #1
 800840e:	d100      	bne.n	8008412 <_printf_float+0x3ee>
 8008410:	e664      	b.n	80080dc <_printf_float+0xb8>
 8008412:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008414:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008416:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008418:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800841a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800841c:	47b0      	blx	r6
 800841e:	3001      	adds	r0, #1
 8008420:	d100      	bne.n	8008424 <_printf_float+0x400>
 8008422:	e65b      	b.n	80080dc <_printf_float+0xb8>
 8008424:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008426:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800842a:	2200      	movs	r2, #0
 800842c:	3b01      	subs	r3, #1
 800842e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008430:	2300      	movs	r3, #0
 8008432:	f7f8 f809 	bl	8000448 <__aeabi_dcmpeq>
 8008436:	2800      	cmp	r0, #0
 8008438:	d11a      	bne.n	8008470 <_printf_float+0x44c>
 800843a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800843c:	1c7a      	adds	r2, r7, #1
 800843e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008440:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008442:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008444:	47b0      	blx	r6
 8008446:	3001      	adds	r0, #1
 8008448:	d10e      	bne.n	8008468 <_printf_float+0x444>
 800844a:	e647      	b.n	80080dc <_printf_float+0xb8>
 800844c:	002a      	movs	r2, r5
 800844e:	2301      	movs	r3, #1
 8008450:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008454:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008456:	321a      	adds	r2, #26
 8008458:	47b8      	blx	r7
 800845a:	3001      	adds	r0, #1
 800845c:	d100      	bne.n	8008460 <_printf_float+0x43c>
 800845e:	e63d      	b.n	80080dc <_printf_float+0xb8>
 8008460:	3601      	adds	r6, #1
 8008462:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008464:	429e      	cmp	r6, r3
 8008466:	dbf1      	blt.n	800844c <_printf_float+0x428>
 8008468:	002a      	movs	r2, r5
 800846a:	0023      	movs	r3, r4
 800846c:	3250      	adds	r2, #80	@ 0x50
 800846e:	e6d9      	b.n	8008224 <_printf_float+0x200>
 8008470:	2600      	movs	r6, #0
 8008472:	e7f6      	b.n	8008462 <_printf_float+0x43e>
 8008474:	003a      	movs	r2, r7
 8008476:	e7e2      	b.n	800843e <_printf_float+0x41a>
 8008478:	002a      	movs	r2, r5
 800847a:	2301      	movs	r3, #1
 800847c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800847e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008480:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008482:	3219      	adds	r2, #25
 8008484:	47b0      	blx	r6
 8008486:	3001      	adds	r0, #1
 8008488:	d100      	bne.n	800848c <_printf_float+0x468>
 800848a:	e627      	b.n	80080dc <_printf_float+0xb8>
 800848c:	3401      	adds	r4, #1
 800848e:	68eb      	ldr	r3, [r5, #12]
 8008490:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	42a3      	cmp	r3, r4
 8008496:	dcef      	bgt.n	8008478 <_printf_float+0x454>
 8008498:	e6f8      	b.n	800828c <_printf_float+0x268>
 800849a:	2400      	movs	r4, #0
 800849c:	e7f7      	b.n	800848e <_printf_float+0x46a>
 800849e:	46c0      	nop			@ (mov r8, r8)

080084a0 <_printf_common>:
 80084a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084a2:	0016      	movs	r6, r2
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	688a      	ldr	r2, [r1, #8]
 80084a8:	690b      	ldr	r3, [r1, #16]
 80084aa:	000c      	movs	r4, r1
 80084ac:	9000      	str	r0, [sp, #0]
 80084ae:	4293      	cmp	r3, r2
 80084b0:	da00      	bge.n	80084b4 <_printf_common+0x14>
 80084b2:	0013      	movs	r3, r2
 80084b4:	0022      	movs	r2, r4
 80084b6:	6033      	str	r3, [r6, #0]
 80084b8:	3243      	adds	r2, #67	@ 0x43
 80084ba:	7812      	ldrb	r2, [r2, #0]
 80084bc:	2a00      	cmp	r2, #0
 80084be:	d001      	beq.n	80084c4 <_printf_common+0x24>
 80084c0:	3301      	adds	r3, #1
 80084c2:	6033      	str	r3, [r6, #0]
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	069b      	lsls	r3, r3, #26
 80084c8:	d502      	bpl.n	80084d0 <_printf_common+0x30>
 80084ca:	6833      	ldr	r3, [r6, #0]
 80084cc:	3302      	adds	r3, #2
 80084ce:	6033      	str	r3, [r6, #0]
 80084d0:	6822      	ldr	r2, [r4, #0]
 80084d2:	2306      	movs	r3, #6
 80084d4:	0015      	movs	r5, r2
 80084d6:	401d      	ands	r5, r3
 80084d8:	421a      	tst	r2, r3
 80084da:	d027      	beq.n	800852c <_printf_common+0x8c>
 80084dc:	0023      	movs	r3, r4
 80084de:	3343      	adds	r3, #67	@ 0x43
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	1e5a      	subs	r2, r3, #1
 80084e4:	4193      	sbcs	r3, r2
 80084e6:	6822      	ldr	r2, [r4, #0]
 80084e8:	0692      	lsls	r2, r2, #26
 80084ea:	d430      	bmi.n	800854e <_printf_common+0xae>
 80084ec:	0022      	movs	r2, r4
 80084ee:	9901      	ldr	r1, [sp, #4]
 80084f0:	9800      	ldr	r0, [sp, #0]
 80084f2:	9d08      	ldr	r5, [sp, #32]
 80084f4:	3243      	adds	r2, #67	@ 0x43
 80084f6:	47a8      	blx	r5
 80084f8:	3001      	adds	r0, #1
 80084fa:	d025      	beq.n	8008548 <_printf_common+0xa8>
 80084fc:	2206      	movs	r2, #6
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	2500      	movs	r5, #0
 8008502:	4013      	ands	r3, r2
 8008504:	2b04      	cmp	r3, #4
 8008506:	d105      	bne.n	8008514 <_printf_common+0x74>
 8008508:	6833      	ldr	r3, [r6, #0]
 800850a:	68e5      	ldr	r5, [r4, #12]
 800850c:	1aed      	subs	r5, r5, r3
 800850e:	43eb      	mvns	r3, r5
 8008510:	17db      	asrs	r3, r3, #31
 8008512:	401d      	ands	r5, r3
 8008514:	68a3      	ldr	r3, [r4, #8]
 8008516:	6922      	ldr	r2, [r4, #16]
 8008518:	4293      	cmp	r3, r2
 800851a:	dd01      	ble.n	8008520 <_printf_common+0x80>
 800851c:	1a9b      	subs	r3, r3, r2
 800851e:	18ed      	adds	r5, r5, r3
 8008520:	2600      	movs	r6, #0
 8008522:	42b5      	cmp	r5, r6
 8008524:	d120      	bne.n	8008568 <_printf_common+0xc8>
 8008526:	2000      	movs	r0, #0
 8008528:	e010      	b.n	800854c <_printf_common+0xac>
 800852a:	3501      	adds	r5, #1
 800852c:	68e3      	ldr	r3, [r4, #12]
 800852e:	6832      	ldr	r2, [r6, #0]
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	42ab      	cmp	r3, r5
 8008534:	ddd2      	ble.n	80084dc <_printf_common+0x3c>
 8008536:	0022      	movs	r2, r4
 8008538:	2301      	movs	r3, #1
 800853a:	9901      	ldr	r1, [sp, #4]
 800853c:	9800      	ldr	r0, [sp, #0]
 800853e:	9f08      	ldr	r7, [sp, #32]
 8008540:	3219      	adds	r2, #25
 8008542:	47b8      	blx	r7
 8008544:	3001      	adds	r0, #1
 8008546:	d1f0      	bne.n	800852a <_printf_common+0x8a>
 8008548:	2001      	movs	r0, #1
 800854a:	4240      	negs	r0, r0
 800854c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800854e:	2030      	movs	r0, #48	@ 0x30
 8008550:	18e1      	adds	r1, r4, r3
 8008552:	3143      	adds	r1, #67	@ 0x43
 8008554:	7008      	strb	r0, [r1, #0]
 8008556:	0021      	movs	r1, r4
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	3145      	adds	r1, #69	@ 0x45
 800855c:	7809      	ldrb	r1, [r1, #0]
 800855e:	18a2      	adds	r2, r4, r2
 8008560:	3243      	adds	r2, #67	@ 0x43
 8008562:	3302      	adds	r3, #2
 8008564:	7011      	strb	r1, [r2, #0]
 8008566:	e7c1      	b.n	80084ec <_printf_common+0x4c>
 8008568:	0022      	movs	r2, r4
 800856a:	2301      	movs	r3, #1
 800856c:	9901      	ldr	r1, [sp, #4]
 800856e:	9800      	ldr	r0, [sp, #0]
 8008570:	9f08      	ldr	r7, [sp, #32]
 8008572:	321a      	adds	r2, #26
 8008574:	47b8      	blx	r7
 8008576:	3001      	adds	r0, #1
 8008578:	d0e6      	beq.n	8008548 <_printf_common+0xa8>
 800857a:	3601      	adds	r6, #1
 800857c:	e7d1      	b.n	8008522 <_printf_common+0x82>
	...

08008580 <_printf_i>:
 8008580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008582:	b08b      	sub	sp, #44	@ 0x2c
 8008584:	9206      	str	r2, [sp, #24]
 8008586:	000a      	movs	r2, r1
 8008588:	3243      	adds	r2, #67	@ 0x43
 800858a:	9307      	str	r3, [sp, #28]
 800858c:	9005      	str	r0, [sp, #20]
 800858e:	9203      	str	r2, [sp, #12]
 8008590:	7e0a      	ldrb	r2, [r1, #24]
 8008592:	000c      	movs	r4, r1
 8008594:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008596:	2a78      	cmp	r2, #120	@ 0x78
 8008598:	d809      	bhi.n	80085ae <_printf_i+0x2e>
 800859a:	2a62      	cmp	r2, #98	@ 0x62
 800859c:	d80b      	bhi.n	80085b6 <_printf_i+0x36>
 800859e:	2a00      	cmp	r2, #0
 80085a0:	d100      	bne.n	80085a4 <_printf_i+0x24>
 80085a2:	e0ba      	b.n	800871a <_printf_i+0x19a>
 80085a4:	497a      	ldr	r1, [pc, #488]	@ (8008790 <_printf_i+0x210>)
 80085a6:	9104      	str	r1, [sp, #16]
 80085a8:	2a58      	cmp	r2, #88	@ 0x58
 80085aa:	d100      	bne.n	80085ae <_printf_i+0x2e>
 80085ac:	e08e      	b.n	80086cc <_printf_i+0x14c>
 80085ae:	0025      	movs	r5, r4
 80085b0:	3542      	adds	r5, #66	@ 0x42
 80085b2:	702a      	strb	r2, [r5, #0]
 80085b4:	e022      	b.n	80085fc <_printf_i+0x7c>
 80085b6:	0010      	movs	r0, r2
 80085b8:	3863      	subs	r0, #99	@ 0x63
 80085ba:	2815      	cmp	r0, #21
 80085bc:	d8f7      	bhi.n	80085ae <_printf_i+0x2e>
 80085be:	f7f7 fdb3 	bl	8000128 <__gnu_thumb1_case_shi>
 80085c2:	0016      	.short	0x0016
 80085c4:	fff6001f 	.word	0xfff6001f
 80085c8:	fff6fff6 	.word	0xfff6fff6
 80085cc:	001ffff6 	.word	0x001ffff6
 80085d0:	fff6fff6 	.word	0xfff6fff6
 80085d4:	fff6fff6 	.word	0xfff6fff6
 80085d8:	0036009f 	.word	0x0036009f
 80085dc:	fff6007e 	.word	0xfff6007e
 80085e0:	00b0fff6 	.word	0x00b0fff6
 80085e4:	0036fff6 	.word	0x0036fff6
 80085e8:	fff6fff6 	.word	0xfff6fff6
 80085ec:	0082      	.short	0x0082
 80085ee:	0025      	movs	r5, r4
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	3542      	adds	r5, #66	@ 0x42
 80085f4:	1d11      	adds	r1, r2, #4
 80085f6:	6019      	str	r1, [r3, #0]
 80085f8:	6813      	ldr	r3, [r2, #0]
 80085fa:	702b      	strb	r3, [r5, #0]
 80085fc:	2301      	movs	r3, #1
 80085fe:	e09e      	b.n	800873e <_printf_i+0x1be>
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	6809      	ldr	r1, [r1, #0]
 8008604:	1d02      	adds	r2, r0, #4
 8008606:	060d      	lsls	r5, r1, #24
 8008608:	d50b      	bpl.n	8008622 <_printf_i+0xa2>
 800860a:	6806      	ldr	r6, [r0, #0]
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	2e00      	cmp	r6, #0
 8008610:	da03      	bge.n	800861a <_printf_i+0x9a>
 8008612:	232d      	movs	r3, #45	@ 0x2d
 8008614:	9a03      	ldr	r2, [sp, #12]
 8008616:	4276      	negs	r6, r6
 8008618:	7013      	strb	r3, [r2, #0]
 800861a:	4b5d      	ldr	r3, [pc, #372]	@ (8008790 <_printf_i+0x210>)
 800861c:	270a      	movs	r7, #10
 800861e:	9304      	str	r3, [sp, #16]
 8008620:	e018      	b.n	8008654 <_printf_i+0xd4>
 8008622:	6806      	ldr	r6, [r0, #0]
 8008624:	601a      	str	r2, [r3, #0]
 8008626:	0649      	lsls	r1, r1, #25
 8008628:	d5f1      	bpl.n	800860e <_printf_i+0x8e>
 800862a:	b236      	sxth	r6, r6
 800862c:	e7ef      	b.n	800860e <_printf_i+0x8e>
 800862e:	6808      	ldr	r0, [r1, #0]
 8008630:	6819      	ldr	r1, [r3, #0]
 8008632:	c940      	ldmia	r1!, {r6}
 8008634:	0605      	lsls	r5, r0, #24
 8008636:	d402      	bmi.n	800863e <_printf_i+0xbe>
 8008638:	0640      	lsls	r0, r0, #25
 800863a:	d500      	bpl.n	800863e <_printf_i+0xbe>
 800863c:	b2b6      	uxth	r6, r6
 800863e:	6019      	str	r1, [r3, #0]
 8008640:	4b53      	ldr	r3, [pc, #332]	@ (8008790 <_printf_i+0x210>)
 8008642:	270a      	movs	r7, #10
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	2a6f      	cmp	r2, #111	@ 0x6f
 8008648:	d100      	bne.n	800864c <_printf_i+0xcc>
 800864a:	3f02      	subs	r7, #2
 800864c:	0023      	movs	r3, r4
 800864e:	2200      	movs	r2, #0
 8008650:	3343      	adds	r3, #67	@ 0x43
 8008652:	701a      	strb	r2, [r3, #0]
 8008654:	6863      	ldr	r3, [r4, #4]
 8008656:	60a3      	str	r3, [r4, #8]
 8008658:	2b00      	cmp	r3, #0
 800865a:	db06      	blt.n	800866a <_printf_i+0xea>
 800865c:	2104      	movs	r1, #4
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	9d03      	ldr	r5, [sp, #12]
 8008662:	438a      	bics	r2, r1
 8008664:	6022      	str	r2, [r4, #0]
 8008666:	4333      	orrs	r3, r6
 8008668:	d00c      	beq.n	8008684 <_printf_i+0x104>
 800866a:	9d03      	ldr	r5, [sp, #12]
 800866c:	0030      	movs	r0, r6
 800866e:	0039      	movs	r1, r7
 8008670:	f7f7 fdea 	bl	8000248 <__aeabi_uidivmod>
 8008674:	9b04      	ldr	r3, [sp, #16]
 8008676:	3d01      	subs	r5, #1
 8008678:	5c5b      	ldrb	r3, [r3, r1]
 800867a:	702b      	strb	r3, [r5, #0]
 800867c:	0033      	movs	r3, r6
 800867e:	0006      	movs	r6, r0
 8008680:	429f      	cmp	r7, r3
 8008682:	d9f3      	bls.n	800866c <_printf_i+0xec>
 8008684:	2f08      	cmp	r7, #8
 8008686:	d109      	bne.n	800869c <_printf_i+0x11c>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	07db      	lsls	r3, r3, #31
 800868c:	d506      	bpl.n	800869c <_printf_i+0x11c>
 800868e:	6862      	ldr	r2, [r4, #4]
 8008690:	6923      	ldr	r3, [r4, #16]
 8008692:	429a      	cmp	r2, r3
 8008694:	dc02      	bgt.n	800869c <_printf_i+0x11c>
 8008696:	2330      	movs	r3, #48	@ 0x30
 8008698:	3d01      	subs	r5, #1
 800869a:	702b      	strb	r3, [r5, #0]
 800869c:	9b03      	ldr	r3, [sp, #12]
 800869e:	1b5b      	subs	r3, r3, r5
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	9b07      	ldr	r3, [sp, #28]
 80086a4:	0021      	movs	r1, r4
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	9805      	ldr	r0, [sp, #20]
 80086aa:	9b06      	ldr	r3, [sp, #24]
 80086ac:	aa09      	add	r2, sp, #36	@ 0x24
 80086ae:	f7ff fef7 	bl	80084a0 <_printf_common>
 80086b2:	3001      	adds	r0, #1
 80086b4:	d148      	bne.n	8008748 <_printf_i+0x1c8>
 80086b6:	2001      	movs	r0, #1
 80086b8:	4240      	negs	r0, r0
 80086ba:	b00b      	add	sp, #44	@ 0x2c
 80086bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086be:	2220      	movs	r2, #32
 80086c0:	6809      	ldr	r1, [r1, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	6022      	str	r2, [r4, #0]
 80086c6:	2278      	movs	r2, #120	@ 0x78
 80086c8:	4932      	ldr	r1, [pc, #200]	@ (8008794 <_printf_i+0x214>)
 80086ca:	9104      	str	r1, [sp, #16]
 80086cc:	0021      	movs	r1, r4
 80086ce:	3145      	adds	r1, #69	@ 0x45
 80086d0:	700a      	strb	r2, [r1, #0]
 80086d2:	6819      	ldr	r1, [r3, #0]
 80086d4:	6822      	ldr	r2, [r4, #0]
 80086d6:	c940      	ldmia	r1!, {r6}
 80086d8:	0610      	lsls	r0, r2, #24
 80086da:	d402      	bmi.n	80086e2 <_printf_i+0x162>
 80086dc:	0650      	lsls	r0, r2, #25
 80086de:	d500      	bpl.n	80086e2 <_printf_i+0x162>
 80086e0:	b2b6      	uxth	r6, r6
 80086e2:	6019      	str	r1, [r3, #0]
 80086e4:	07d3      	lsls	r3, r2, #31
 80086e6:	d502      	bpl.n	80086ee <_printf_i+0x16e>
 80086e8:	2320      	movs	r3, #32
 80086ea:	4313      	orrs	r3, r2
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	d001      	beq.n	80086f6 <_printf_i+0x176>
 80086f2:	2710      	movs	r7, #16
 80086f4:	e7aa      	b.n	800864c <_printf_i+0xcc>
 80086f6:	2220      	movs	r2, #32
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	4393      	bics	r3, r2
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	e7f8      	b.n	80086f2 <_printf_i+0x172>
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	680d      	ldr	r5, [r1, #0]
 8008704:	1d10      	adds	r0, r2, #4
 8008706:	6949      	ldr	r1, [r1, #20]
 8008708:	6018      	str	r0, [r3, #0]
 800870a:	6813      	ldr	r3, [r2, #0]
 800870c:	062e      	lsls	r6, r5, #24
 800870e:	d501      	bpl.n	8008714 <_printf_i+0x194>
 8008710:	6019      	str	r1, [r3, #0]
 8008712:	e002      	b.n	800871a <_printf_i+0x19a>
 8008714:	066d      	lsls	r5, r5, #25
 8008716:	d5fb      	bpl.n	8008710 <_printf_i+0x190>
 8008718:	8019      	strh	r1, [r3, #0]
 800871a:	2300      	movs	r3, #0
 800871c:	9d03      	ldr	r5, [sp, #12]
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	e7bf      	b.n	80086a2 <_printf_i+0x122>
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	1d11      	adds	r1, r2, #4
 8008726:	6019      	str	r1, [r3, #0]
 8008728:	6815      	ldr	r5, [r2, #0]
 800872a:	2100      	movs	r1, #0
 800872c:	0028      	movs	r0, r5
 800872e:	6862      	ldr	r2, [r4, #4]
 8008730:	f000 fa0d 	bl	8008b4e <memchr>
 8008734:	2800      	cmp	r0, #0
 8008736:	d001      	beq.n	800873c <_printf_i+0x1bc>
 8008738:	1b40      	subs	r0, r0, r5
 800873a:	6060      	str	r0, [r4, #4]
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	2300      	movs	r3, #0
 8008742:	9a03      	ldr	r2, [sp, #12]
 8008744:	7013      	strb	r3, [r2, #0]
 8008746:	e7ac      	b.n	80086a2 <_printf_i+0x122>
 8008748:	002a      	movs	r2, r5
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	9906      	ldr	r1, [sp, #24]
 800874e:	9805      	ldr	r0, [sp, #20]
 8008750:	9d07      	ldr	r5, [sp, #28]
 8008752:	47a8      	blx	r5
 8008754:	3001      	adds	r0, #1
 8008756:	d0ae      	beq.n	80086b6 <_printf_i+0x136>
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	079b      	lsls	r3, r3, #30
 800875c:	d415      	bmi.n	800878a <_printf_i+0x20a>
 800875e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008760:	68e0      	ldr	r0, [r4, #12]
 8008762:	4298      	cmp	r0, r3
 8008764:	daa9      	bge.n	80086ba <_printf_i+0x13a>
 8008766:	0018      	movs	r0, r3
 8008768:	e7a7      	b.n	80086ba <_printf_i+0x13a>
 800876a:	0022      	movs	r2, r4
 800876c:	2301      	movs	r3, #1
 800876e:	9906      	ldr	r1, [sp, #24]
 8008770:	9805      	ldr	r0, [sp, #20]
 8008772:	9e07      	ldr	r6, [sp, #28]
 8008774:	3219      	adds	r2, #25
 8008776:	47b0      	blx	r6
 8008778:	3001      	adds	r0, #1
 800877a:	d09c      	beq.n	80086b6 <_printf_i+0x136>
 800877c:	3501      	adds	r5, #1
 800877e:	68e3      	ldr	r3, [r4, #12]
 8008780:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	42ab      	cmp	r3, r5
 8008786:	dcf0      	bgt.n	800876a <_printf_i+0x1ea>
 8008788:	e7e9      	b.n	800875e <_printf_i+0x1de>
 800878a:	2500      	movs	r5, #0
 800878c:	e7f7      	b.n	800877e <_printf_i+0x1fe>
 800878e:	46c0      	nop			@ (mov r8, r8)
 8008790:	0800af1e 	.word	0x0800af1e
 8008794:	0800af2f 	.word	0x0800af2f

08008798 <std>:
 8008798:	2300      	movs	r3, #0
 800879a:	b510      	push	{r4, lr}
 800879c:	0004      	movs	r4, r0
 800879e:	6003      	str	r3, [r0, #0]
 80087a0:	6043      	str	r3, [r0, #4]
 80087a2:	6083      	str	r3, [r0, #8]
 80087a4:	8181      	strh	r1, [r0, #12]
 80087a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80087a8:	81c2      	strh	r2, [r0, #14]
 80087aa:	6103      	str	r3, [r0, #16]
 80087ac:	6143      	str	r3, [r0, #20]
 80087ae:	6183      	str	r3, [r0, #24]
 80087b0:	0019      	movs	r1, r3
 80087b2:	2208      	movs	r2, #8
 80087b4:	305c      	adds	r0, #92	@ 0x5c
 80087b6:	f000 f943 	bl	8008a40 <memset>
 80087ba:	4b0b      	ldr	r3, [pc, #44]	@ (80087e8 <std+0x50>)
 80087bc:	6224      	str	r4, [r4, #32]
 80087be:	6263      	str	r3, [r4, #36]	@ 0x24
 80087c0:	4b0a      	ldr	r3, [pc, #40]	@ (80087ec <std+0x54>)
 80087c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087c4:	4b0a      	ldr	r3, [pc, #40]	@ (80087f0 <std+0x58>)
 80087c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087c8:	4b0a      	ldr	r3, [pc, #40]	@ (80087f4 <std+0x5c>)
 80087ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80087cc:	4b0a      	ldr	r3, [pc, #40]	@ (80087f8 <std+0x60>)
 80087ce:	429c      	cmp	r4, r3
 80087d0:	d005      	beq.n	80087de <std+0x46>
 80087d2:	4b0a      	ldr	r3, [pc, #40]	@ (80087fc <std+0x64>)
 80087d4:	429c      	cmp	r4, r3
 80087d6:	d002      	beq.n	80087de <std+0x46>
 80087d8:	4b09      	ldr	r3, [pc, #36]	@ (8008800 <std+0x68>)
 80087da:	429c      	cmp	r4, r3
 80087dc:	d103      	bne.n	80087e6 <std+0x4e>
 80087de:	0020      	movs	r0, r4
 80087e0:	3058      	adds	r0, #88	@ 0x58
 80087e2:	f000 f9b1 	bl	8008b48 <__retarget_lock_init_recursive>
 80087e6:	bd10      	pop	{r4, pc}
 80087e8:	08008965 	.word	0x08008965
 80087ec:	0800898d 	.word	0x0800898d
 80087f0:	080089c5 	.word	0x080089c5
 80087f4:	080089f1 	.word	0x080089f1
 80087f8:	200003dc 	.word	0x200003dc
 80087fc:	20000444 	.word	0x20000444
 8008800:	200004ac 	.word	0x200004ac

08008804 <stdio_exit_handler>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4a03      	ldr	r2, [pc, #12]	@ (8008814 <stdio_exit_handler+0x10>)
 8008808:	4903      	ldr	r1, [pc, #12]	@ (8008818 <stdio_exit_handler+0x14>)
 800880a:	4804      	ldr	r0, [pc, #16]	@ (800881c <stdio_exit_handler+0x18>)
 800880c:	f000 f86c 	bl	80088e8 <_fwalk_sglue>
 8008810:	bd10      	pop	{r4, pc}
 8008812:	46c0      	nop			@ (mov r8, r8)
 8008814:	20000018 	.word	0x20000018
 8008818:	0800a55d 	.word	0x0800a55d
 800881c:	20000028 	.word	0x20000028

08008820 <cleanup_stdio>:
 8008820:	6841      	ldr	r1, [r0, #4]
 8008822:	4b0b      	ldr	r3, [pc, #44]	@ (8008850 <cleanup_stdio+0x30>)
 8008824:	b510      	push	{r4, lr}
 8008826:	0004      	movs	r4, r0
 8008828:	4299      	cmp	r1, r3
 800882a:	d001      	beq.n	8008830 <cleanup_stdio+0x10>
 800882c:	f001 fe96 	bl	800a55c <_fflush_r>
 8008830:	68a1      	ldr	r1, [r4, #8]
 8008832:	4b08      	ldr	r3, [pc, #32]	@ (8008854 <cleanup_stdio+0x34>)
 8008834:	4299      	cmp	r1, r3
 8008836:	d002      	beq.n	800883e <cleanup_stdio+0x1e>
 8008838:	0020      	movs	r0, r4
 800883a:	f001 fe8f 	bl	800a55c <_fflush_r>
 800883e:	68e1      	ldr	r1, [r4, #12]
 8008840:	4b05      	ldr	r3, [pc, #20]	@ (8008858 <cleanup_stdio+0x38>)
 8008842:	4299      	cmp	r1, r3
 8008844:	d002      	beq.n	800884c <cleanup_stdio+0x2c>
 8008846:	0020      	movs	r0, r4
 8008848:	f001 fe88 	bl	800a55c <_fflush_r>
 800884c:	bd10      	pop	{r4, pc}
 800884e:	46c0      	nop			@ (mov r8, r8)
 8008850:	200003dc 	.word	0x200003dc
 8008854:	20000444 	.word	0x20000444
 8008858:	200004ac 	.word	0x200004ac

0800885c <global_stdio_init.part.0>:
 800885c:	b510      	push	{r4, lr}
 800885e:	4b09      	ldr	r3, [pc, #36]	@ (8008884 <global_stdio_init.part.0+0x28>)
 8008860:	4a09      	ldr	r2, [pc, #36]	@ (8008888 <global_stdio_init.part.0+0x2c>)
 8008862:	2104      	movs	r1, #4
 8008864:	601a      	str	r2, [r3, #0]
 8008866:	4809      	ldr	r0, [pc, #36]	@ (800888c <global_stdio_init.part.0+0x30>)
 8008868:	2200      	movs	r2, #0
 800886a:	f7ff ff95 	bl	8008798 <std>
 800886e:	2201      	movs	r2, #1
 8008870:	2109      	movs	r1, #9
 8008872:	4807      	ldr	r0, [pc, #28]	@ (8008890 <global_stdio_init.part.0+0x34>)
 8008874:	f7ff ff90 	bl	8008798 <std>
 8008878:	2202      	movs	r2, #2
 800887a:	2112      	movs	r1, #18
 800887c:	4805      	ldr	r0, [pc, #20]	@ (8008894 <global_stdio_init.part.0+0x38>)
 800887e:	f7ff ff8b 	bl	8008798 <std>
 8008882:	bd10      	pop	{r4, pc}
 8008884:	20000514 	.word	0x20000514
 8008888:	08008805 	.word	0x08008805
 800888c:	200003dc 	.word	0x200003dc
 8008890:	20000444 	.word	0x20000444
 8008894:	200004ac 	.word	0x200004ac

08008898 <__sfp_lock_acquire>:
 8008898:	b510      	push	{r4, lr}
 800889a:	4802      	ldr	r0, [pc, #8]	@ (80088a4 <__sfp_lock_acquire+0xc>)
 800889c:	f000 f955 	bl	8008b4a <__retarget_lock_acquire_recursive>
 80088a0:	bd10      	pop	{r4, pc}
 80088a2:	46c0      	nop			@ (mov r8, r8)
 80088a4:	2000051d 	.word	0x2000051d

080088a8 <__sfp_lock_release>:
 80088a8:	b510      	push	{r4, lr}
 80088aa:	4802      	ldr	r0, [pc, #8]	@ (80088b4 <__sfp_lock_release+0xc>)
 80088ac:	f000 f94e 	bl	8008b4c <__retarget_lock_release_recursive>
 80088b0:	bd10      	pop	{r4, pc}
 80088b2:	46c0      	nop			@ (mov r8, r8)
 80088b4:	2000051d 	.word	0x2000051d

080088b8 <__sinit>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	0004      	movs	r4, r0
 80088bc:	f7ff ffec 	bl	8008898 <__sfp_lock_acquire>
 80088c0:	6a23      	ldr	r3, [r4, #32]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <__sinit+0x14>
 80088c6:	f7ff ffef 	bl	80088a8 <__sfp_lock_release>
 80088ca:	bd10      	pop	{r4, pc}
 80088cc:	4b04      	ldr	r3, [pc, #16]	@ (80088e0 <__sinit+0x28>)
 80088ce:	6223      	str	r3, [r4, #32]
 80088d0:	4b04      	ldr	r3, [pc, #16]	@ (80088e4 <__sinit+0x2c>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1f6      	bne.n	80088c6 <__sinit+0xe>
 80088d8:	f7ff ffc0 	bl	800885c <global_stdio_init.part.0>
 80088dc:	e7f3      	b.n	80088c6 <__sinit+0xe>
 80088de:	46c0      	nop			@ (mov r8, r8)
 80088e0:	08008821 	.word	0x08008821
 80088e4:	20000514 	.word	0x20000514

080088e8 <_fwalk_sglue>:
 80088e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ea:	0014      	movs	r4, r2
 80088ec:	2600      	movs	r6, #0
 80088ee:	9000      	str	r0, [sp, #0]
 80088f0:	9101      	str	r1, [sp, #4]
 80088f2:	68a5      	ldr	r5, [r4, #8]
 80088f4:	6867      	ldr	r7, [r4, #4]
 80088f6:	3f01      	subs	r7, #1
 80088f8:	d504      	bpl.n	8008904 <_fwalk_sglue+0x1c>
 80088fa:	6824      	ldr	r4, [r4, #0]
 80088fc:	2c00      	cmp	r4, #0
 80088fe:	d1f8      	bne.n	80088f2 <_fwalk_sglue+0xa>
 8008900:	0030      	movs	r0, r6
 8008902:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008904:	89ab      	ldrh	r3, [r5, #12]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d908      	bls.n	800891c <_fwalk_sglue+0x34>
 800890a:	220e      	movs	r2, #14
 800890c:	5eab      	ldrsh	r3, [r5, r2]
 800890e:	3301      	adds	r3, #1
 8008910:	d004      	beq.n	800891c <_fwalk_sglue+0x34>
 8008912:	0029      	movs	r1, r5
 8008914:	9800      	ldr	r0, [sp, #0]
 8008916:	9b01      	ldr	r3, [sp, #4]
 8008918:	4798      	blx	r3
 800891a:	4306      	orrs	r6, r0
 800891c:	3568      	adds	r5, #104	@ 0x68
 800891e:	e7ea      	b.n	80088f6 <_fwalk_sglue+0xe>

08008920 <siprintf>:
 8008920:	b40e      	push	{r1, r2, r3}
 8008922:	b510      	push	{r4, lr}
 8008924:	2400      	movs	r4, #0
 8008926:	490c      	ldr	r1, [pc, #48]	@ (8008958 <siprintf+0x38>)
 8008928:	b09d      	sub	sp, #116	@ 0x74
 800892a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800892c:	9002      	str	r0, [sp, #8]
 800892e:	9006      	str	r0, [sp, #24]
 8008930:	9107      	str	r1, [sp, #28]
 8008932:	9104      	str	r1, [sp, #16]
 8008934:	4809      	ldr	r0, [pc, #36]	@ (800895c <siprintf+0x3c>)
 8008936:	490a      	ldr	r1, [pc, #40]	@ (8008960 <siprintf+0x40>)
 8008938:	cb04      	ldmia	r3!, {r2}
 800893a:	9105      	str	r1, [sp, #20]
 800893c:	6800      	ldr	r0, [r0, #0]
 800893e:	a902      	add	r1, sp, #8
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008944:	f001 fc86 	bl	800a254 <_svfiprintf_r>
 8008948:	9b02      	ldr	r3, [sp, #8]
 800894a:	701c      	strb	r4, [r3, #0]
 800894c:	b01d      	add	sp, #116	@ 0x74
 800894e:	bc10      	pop	{r4}
 8008950:	bc08      	pop	{r3}
 8008952:	b003      	add	sp, #12
 8008954:	4718      	bx	r3
 8008956:	46c0      	nop			@ (mov r8, r8)
 8008958:	7fffffff 	.word	0x7fffffff
 800895c:	20000024 	.word	0x20000024
 8008960:	ffff0208 	.word	0xffff0208

08008964 <__sread>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	000c      	movs	r4, r1
 8008968:	250e      	movs	r5, #14
 800896a:	5f49      	ldrsh	r1, [r1, r5]
 800896c:	f000 f89a 	bl	8008aa4 <_read_r>
 8008970:	2800      	cmp	r0, #0
 8008972:	db03      	blt.n	800897c <__sread+0x18>
 8008974:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008976:	181b      	adds	r3, r3, r0
 8008978:	6563      	str	r3, [r4, #84]	@ 0x54
 800897a:	bd70      	pop	{r4, r5, r6, pc}
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	4a02      	ldr	r2, [pc, #8]	@ (8008988 <__sread+0x24>)
 8008980:	4013      	ands	r3, r2
 8008982:	81a3      	strh	r3, [r4, #12]
 8008984:	e7f9      	b.n	800897a <__sread+0x16>
 8008986:	46c0      	nop			@ (mov r8, r8)
 8008988:	ffffefff 	.word	0xffffefff

0800898c <__swrite>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	001f      	movs	r7, r3
 8008990:	898b      	ldrh	r3, [r1, #12]
 8008992:	0005      	movs	r5, r0
 8008994:	000c      	movs	r4, r1
 8008996:	0016      	movs	r6, r2
 8008998:	05db      	lsls	r3, r3, #23
 800899a:	d505      	bpl.n	80089a8 <__swrite+0x1c>
 800899c:	230e      	movs	r3, #14
 800899e:	5ec9      	ldrsh	r1, [r1, r3]
 80089a0:	2200      	movs	r2, #0
 80089a2:	2302      	movs	r3, #2
 80089a4:	f000 f86a 	bl	8008a7c <_lseek_r>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	4a05      	ldr	r2, [pc, #20]	@ (80089c0 <__swrite+0x34>)
 80089ac:	0028      	movs	r0, r5
 80089ae:	4013      	ands	r3, r2
 80089b0:	81a3      	strh	r3, [r4, #12]
 80089b2:	0032      	movs	r2, r6
 80089b4:	230e      	movs	r3, #14
 80089b6:	5ee1      	ldrsh	r1, [r4, r3]
 80089b8:	003b      	movs	r3, r7
 80089ba:	f000 f887 	bl	8008acc <_write_r>
 80089be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089c0:	ffffefff 	.word	0xffffefff

080089c4 <__sseek>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	000c      	movs	r4, r1
 80089c8:	250e      	movs	r5, #14
 80089ca:	5f49      	ldrsh	r1, [r1, r5]
 80089cc:	f000 f856 	bl	8008a7c <_lseek_r>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	1c42      	adds	r2, r0, #1
 80089d4:	d103      	bne.n	80089de <__sseek+0x1a>
 80089d6:	4a05      	ldr	r2, [pc, #20]	@ (80089ec <__sseek+0x28>)
 80089d8:	4013      	ands	r3, r2
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	bd70      	pop	{r4, r5, r6, pc}
 80089de:	2280      	movs	r2, #128	@ 0x80
 80089e0:	0152      	lsls	r2, r2, #5
 80089e2:	4313      	orrs	r3, r2
 80089e4:	81a3      	strh	r3, [r4, #12]
 80089e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80089e8:	e7f8      	b.n	80089dc <__sseek+0x18>
 80089ea:	46c0      	nop			@ (mov r8, r8)
 80089ec:	ffffefff 	.word	0xffffefff

080089f0 <__sclose>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	230e      	movs	r3, #14
 80089f4:	5ec9      	ldrsh	r1, [r1, r3]
 80089f6:	f000 f82f 	bl	8008a58 <_close_r>
 80089fa:	bd10      	pop	{r4, pc}

080089fc <_vsiprintf_r>:
 80089fc:	b510      	push	{r4, lr}
 80089fe:	2400      	movs	r4, #0
 8008a00:	b09a      	sub	sp, #104	@ 0x68
 8008a02:	9100      	str	r1, [sp, #0]
 8008a04:	9104      	str	r1, [sp, #16]
 8008a06:	4906      	ldr	r1, [pc, #24]	@ (8008a20 <_vsiprintf_r+0x24>)
 8008a08:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a0a:	9105      	str	r1, [sp, #20]
 8008a0c:	9102      	str	r1, [sp, #8]
 8008a0e:	4905      	ldr	r1, [pc, #20]	@ (8008a24 <_vsiprintf_r+0x28>)
 8008a10:	9103      	str	r1, [sp, #12]
 8008a12:	4669      	mov	r1, sp
 8008a14:	f001 fc1e 	bl	800a254 <_svfiprintf_r>
 8008a18:	9b00      	ldr	r3, [sp, #0]
 8008a1a:	701c      	strb	r4, [r3, #0]
 8008a1c:	b01a      	add	sp, #104	@ 0x68
 8008a1e:	bd10      	pop	{r4, pc}
 8008a20:	7fffffff 	.word	0x7fffffff
 8008a24:	ffff0208 	.word	0xffff0208

08008a28 <vsiprintf>:
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	4c04      	ldr	r4, [pc, #16]	@ (8008a3c <vsiprintf+0x14>)
 8008a2c:	0013      	movs	r3, r2
 8008a2e:	000a      	movs	r2, r1
 8008a30:	0001      	movs	r1, r0
 8008a32:	6820      	ldr	r0, [r4, #0]
 8008a34:	f7ff ffe2 	bl	80089fc <_vsiprintf_r>
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	46c0      	nop			@ (mov r8, r8)
 8008a3c:	20000024 	.word	0x20000024

08008a40 <memset>:
 8008a40:	0003      	movs	r3, r0
 8008a42:	1882      	adds	r2, r0, r2
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d100      	bne.n	8008a4a <memset+0xa>
 8008a48:	4770      	bx	lr
 8008a4a:	7019      	strb	r1, [r3, #0]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	e7f9      	b.n	8008a44 <memset+0x4>

08008a50 <_localeconv_r>:
 8008a50:	4800      	ldr	r0, [pc, #0]	@ (8008a54 <_localeconv_r+0x4>)
 8008a52:	4770      	bx	lr
 8008a54:	20000164 	.word	0x20000164

08008a58 <_close_r>:
 8008a58:	2300      	movs	r3, #0
 8008a5a:	b570      	push	{r4, r5, r6, lr}
 8008a5c:	4d06      	ldr	r5, [pc, #24]	@ (8008a78 <_close_r+0x20>)
 8008a5e:	0004      	movs	r4, r0
 8008a60:	0008      	movs	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7fb ffe9 	bl	8004a3a <_close>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d103      	bne.n	8008a74 <_close_r+0x1c>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d000      	beq.n	8008a74 <_close_r+0x1c>
 8008a72:	6023      	str	r3, [r4, #0]
 8008a74:	bd70      	pop	{r4, r5, r6, pc}
 8008a76:	46c0      	nop			@ (mov r8, r8)
 8008a78:	20000518 	.word	0x20000518

08008a7c <_lseek_r>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	0004      	movs	r4, r0
 8008a80:	0008      	movs	r0, r1
 8008a82:	0011      	movs	r1, r2
 8008a84:	001a      	movs	r2, r3
 8008a86:	2300      	movs	r3, #0
 8008a88:	4d05      	ldr	r5, [pc, #20]	@ (8008aa0 <_lseek_r+0x24>)
 8008a8a:	602b      	str	r3, [r5, #0]
 8008a8c:	f7fb fff6 	bl	8004a7c <_lseek>
 8008a90:	1c43      	adds	r3, r0, #1
 8008a92:	d103      	bne.n	8008a9c <_lseek_r+0x20>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d000      	beq.n	8008a9c <_lseek_r+0x20>
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	bd70      	pop	{r4, r5, r6, pc}
 8008a9e:	46c0      	nop			@ (mov r8, r8)
 8008aa0:	20000518 	.word	0x20000518

08008aa4 <_read_r>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	0004      	movs	r4, r0
 8008aa8:	0008      	movs	r0, r1
 8008aaa:	0011      	movs	r1, r2
 8008aac:	001a      	movs	r2, r3
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4d05      	ldr	r5, [pc, #20]	@ (8008ac8 <_read_r+0x24>)
 8008ab2:	602b      	str	r3, [r5, #0]
 8008ab4:	f7fb ff88 	bl	80049c8 <_read>
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d103      	bne.n	8008ac4 <_read_r+0x20>
 8008abc:	682b      	ldr	r3, [r5, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d000      	beq.n	8008ac4 <_read_r+0x20>
 8008ac2:	6023      	str	r3, [r4, #0]
 8008ac4:	bd70      	pop	{r4, r5, r6, pc}
 8008ac6:	46c0      	nop			@ (mov r8, r8)
 8008ac8:	20000518 	.word	0x20000518

08008acc <_write_r>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	0004      	movs	r4, r0
 8008ad0:	0008      	movs	r0, r1
 8008ad2:	0011      	movs	r1, r2
 8008ad4:	001a      	movs	r2, r3
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	4d05      	ldr	r5, [pc, #20]	@ (8008af0 <_write_r+0x24>)
 8008ada:	602b      	str	r3, [r5, #0]
 8008adc:	f7fb ff91 	bl	8004a02 <_write>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d103      	bne.n	8008aec <_write_r+0x20>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d000      	beq.n	8008aec <_write_r+0x20>
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	bd70      	pop	{r4, r5, r6, pc}
 8008aee:	46c0      	nop			@ (mov r8, r8)
 8008af0:	20000518 	.word	0x20000518

08008af4 <__errno>:
 8008af4:	4b01      	ldr	r3, [pc, #4]	@ (8008afc <__errno+0x8>)
 8008af6:	6818      	ldr	r0, [r3, #0]
 8008af8:	4770      	bx	lr
 8008afa:	46c0      	nop			@ (mov r8, r8)
 8008afc:	20000024 	.word	0x20000024

08008b00 <__libc_init_array>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	2600      	movs	r6, #0
 8008b04:	4c0c      	ldr	r4, [pc, #48]	@ (8008b38 <__libc_init_array+0x38>)
 8008b06:	4d0d      	ldr	r5, [pc, #52]	@ (8008b3c <__libc_init_array+0x3c>)
 8008b08:	1b64      	subs	r4, r4, r5
 8008b0a:	10a4      	asrs	r4, r4, #2
 8008b0c:	42a6      	cmp	r6, r4
 8008b0e:	d109      	bne.n	8008b24 <__libc_init_array+0x24>
 8008b10:	2600      	movs	r6, #0
 8008b12:	f002 f8f3 	bl	800acfc <_init>
 8008b16:	4c0a      	ldr	r4, [pc, #40]	@ (8008b40 <__libc_init_array+0x40>)
 8008b18:	4d0a      	ldr	r5, [pc, #40]	@ (8008b44 <__libc_init_array+0x44>)
 8008b1a:	1b64      	subs	r4, r4, r5
 8008b1c:	10a4      	asrs	r4, r4, #2
 8008b1e:	42a6      	cmp	r6, r4
 8008b20:	d105      	bne.n	8008b2e <__libc_init_array+0x2e>
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	00b3      	lsls	r3, r6, #2
 8008b26:	58eb      	ldr	r3, [r5, r3]
 8008b28:	4798      	blx	r3
 8008b2a:	3601      	adds	r6, #1
 8008b2c:	e7ee      	b.n	8008b0c <__libc_init_array+0xc>
 8008b2e:	00b3      	lsls	r3, r6, #2
 8008b30:	58eb      	ldr	r3, [r5, r3]
 8008b32:	4798      	blx	r3
 8008b34:	3601      	adds	r6, #1
 8008b36:	e7f2      	b.n	8008b1e <__libc_init_array+0x1e>
 8008b38:	0800b28c 	.word	0x0800b28c
 8008b3c:	0800b28c 	.word	0x0800b28c
 8008b40:	0800b290 	.word	0x0800b290
 8008b44:	0800b28c 	.word	0x0800b28c

08008b48 <__retarget_lock_init_recursive>:
 8008b48:	4770      	bx	lr

08008b4a <__retarget_lock_acquire_recursive>:
 8008b4a:	4770      	bx	lr

08008b4c <__retarget_lock_release_recursive>:
 8008b4c:	4770      	bx	lr

08008b4e <memchr>:
 8008b4e:	b2c9      	uxtb	r1, r1
 8008b50:	1882      	adds	r2, r0, r2
 8008b52:	4290      	cmp	r0, r2
 8008b54:	d101      	bne.n	8008b5a <memchr+0xc>
 8008b56:	2000      	movs	r0, #0
 8008b58:	4770      	bx	lr
 8008b5a:	7803      	ldrb	r3, [r0, #0]
 8008b5c:	428b      	cmp	r3, r1
 8008b5e:	d0fb      	beq.n	8008b58 <memchr+0xa>
 8008b60:	3001      	adds	r0, #1
 8008b62:	e7f6      	b.n	8008b52 <memchr+0x4>

08008b64 <quorem>:
 8008b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b66:	6903      	ldr	r3, [r0, #16]
 8008b68:	690c      	ldr	r4, [r1, #16]
 8008b6a:	b089      	sub	sp, #36	@ 0x24
 8008b6c:	9003      	str	r0, [sp, #12]
 8008b6e:	9106      	str	r1, [sp, #24]
 8008b70:	2000      	movs	r0, #0
 8008b72:	42a3      	cmp	r3, r4
 8008b74:	db63      	blt.n	8008c3e <quorem+0xda>
 8008b76:	000b      	movs	r3, r1
 8008b78:	3c01      	subs	r4, #1
 8008b7a:	3314      	adds	r3, #20
 8008b7c:	00a5      	lsls	r5, r4, #2
 8008b7e:	9304      	str	r3, [sp, #16]
 8008b80:	195b      	adds	r3, r3, r5
 8008b82:	9305      	str	r3, [sp, #20]
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	3314      	adds	r3, #20
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	195d      	adds	r5, r3, r5
 8008b8c:	9b05      	ldr	r3, [sp, #20]
 8008b8e:	682f      	ldr	r7, [r5, #0]
 8008b90:	681e      	ldr	r6, [r3, #0]
 8008b92:	0038      	movs	r0, r7
 8008b94:	3601      	adds	r6, #1
 8008b96:	0031      	movs	r1, r6
 8008b98:	f7f7 fad0 	bl	800013c <__udivsi3>
 8008b9c:	9002      	str	r0, [sp, #8]
 8008b9e:	42b7      	cmp	r7, r6
 8008ba0:	d327      	bcc.n	8008bf2 <quorem+0x8e>
 8008ba2:	9b04      	ldr	r3, [sp, #16]
 8008ba4:	2700      	movs	r7, #0
 8008ba6:	469c      	mov	ip, r3
 8008ba8:	9e01      	ldr	r6, [sp, #4]
 8008baa:	9707      	str	r7, [sp, #28]
 8008bac:	4662      	mov	r2, ip
 8008bae:	ca08      	ldmia	r2!, {r3}
 8008bb0:	6830      	ldr	r0, [r6, #0]
 8008bb2:	4694      	mov	ip, r2
 8008bb4:	9a02      	ldr	r2, [sp, #8]
 8008bb6:	b299      	uxth	r1, r3
 8008bb8:	4351      	muls	r1, r2
 8008bba:	0c1b      	lsrs	r3, r3, #16
 8008bbc:	4353      	muls	r3, r2
 8008bbe:	19c9      	adds	r1, r1, r7
 8008bc0:	0c0a      	lsrs	r2, r1, #16
 8008bc2:	189b      	adds	r3, r3, r2
 8008bc4:	b289      	uxth	r1, r1
 8008bc6:	b282      	uxth	r2, r0
 8008bc8:	1a52      	subs	r2, r2, r1
 8008bca:	9907      	ldr	r1, [sp, #28]
 8008bcc:	0c1f      	lsrs	r7, r3, #16
 8008bce:	1852      	adds	r2, r2, r1
 8008bd0:	0c00      	lsrs	r0, r0, #16
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	1411      	asrs	r1, r2, #16
 8008bd6:	1ac3      	subs	r3, r0, r3
 8008bd8:	185b      	adds	r3, r3, r1
 8008bda:	1419      	asrs	r1, r3, #16
 8008bdc:	b292      	uxth	r2, r2
 8008bde:	041b      	lsls	r3, r3, #16
 8008be0:	431a      	orrs	r2, r3
 8008be2:	9b05      	ldr	r3, [sp, #20]
 8008be4:	9107      	str	r1, [sp, #28]
 8008be6:	c604      	stmia	r6!, {r2}
 8008be8:	4563      	cmp	r3, ip
 8008bea:	d2df      	bcs.n	8008bac <quorem+0x48>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d02b      	beq.n	8008c4a <quorem+0xe6>
 8008bf2:	9906      	ldr	r1, [sp, #24]
 8008bf4:	9803      	ldr	r0, [sp, #12]
 8008bf6:	f001 f9b7 	bl	8009f68 <__mcmp>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	db1e      	blt.n	8008c3c <quorem+0xd8>
 8008bfe:	2600      	movs	r6, #0
 8008c00:	9d01      	ldr	r5, [sp, #4]
 8008c02:	9904      	ldr	r1, [sp, #16]
 8008c04:	c901      	ldmia	r1!, {r0}
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b287      	uxth	r7, r0
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	1bd2      	subs	r2, r2, r7
 8008c0e:	1992      	adds	r2, r2, r6
 8008c10:	0c00      	lsrs	r0, r0, #16
 8008c12:	0c1b      	lsrs	r3, r3, #16
 8008c14:	1a1b      	subs	r3, r3, r0
 8008c16:	1410      	asrs	r0, r2, #16
 8008c18:	181b      	adds	r3, r3, r0
 8008c1a:	141e      	asrs	r6, r3, #16
 8008c1c:	b292      	uxth	r2, r2
 8008c1e:	041b      	lsls	r3, r3, #16
 8008c20:	431a      	orrs	r2, r3
 8008c22:	9b05      	ldr	r3, [sp, #20]
 8008c24:	c504      	stmia	r5!, {r2}
 8008c26:	428b      	cmp	r3, r1
 8008c28:	d2ec      	bcs.n	8008c04 <quorem+0xa0>
 8008c2a:	9a01      	ldr	r2, [sp, #4]
 8008c2c:	00a3      	lsls	r3, r4, #2
 8008c2e:	18d3      	adds	r3, r2, r3
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	2a00      	cmp	r2, #0
 8008c34:	d014      	beq.n	8008c60 <quorem+0xfc>
 8008c36:	9b02      	ldr	r3, [sp, #8]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	9302      	str	r3, [sp, #8]
 8008c3c:	9802      	ldr	r0, [sp, #8]
 8008c3e:	b009      	add	sp, #36	@ 0x24
 8008c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c42:	682b      	ldr	r3, [r5, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d104      	bne.n	8008c52 <quorem+0xee>
 8008c48:	3c01      	subs	r4, #1
 8008c4a:	9b01      	ldr	r3, [sp, #4]
 8008c4c:	3d04      	subs	r5, #4
 8008c4e:	42ab      	cmp	r3, r5
 8008c50:	d3f7      	bcc.n	8008c42 <quorem+0xde>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	611c      	str	r4, [r3, #16]
 8008c56:	e7cc      	b.n	8008bf2 <quorem+0x8e>
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	2a00      	cmp	r2, #0
 8008c5c:	d104      	bne.n	8008c68 <quorem+0x104>
 8008c5e:	3c01      	subs	r4, #1
 8008c60:	9a01      	ldr	r2, [sp, #4]
 8008c62:	3b04      	subs	r3, #4
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d3f7      	bcc.n	8008c58 <quorem+0xf4>
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	611c      	str	r4, [r3, #16]
 8008c6c:	e7e3      	b.n	8008c36 <quorem+0xd2>
	...

08008c70 <_dtoa_r>:
 8008c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c72:	0014      	movs	r4, r2
 8008c74:	001d      	movs	r5, r3
 8008c76:	69c6      	ldr	r6, [r0, #28]
 8008c78:	b09d      	sub	sp, #116	@ 0x74
 8008c7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008c7c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008c7e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8008c80:	9003      	str	r0, [sp, #12]
 8008c82:	2e00      	cmp	r6, #0
 8008c84:	d10f      	bne.n	8008ca6 <_dtoa_r+0x36>
 8008c86:	2010      	movs	r0, #16
 8008c88:	f000 fe2c 	bl	80098e4 <malloc>
 8008c8c:	9b03      	ldr	r3, [sp, #12]
 8008c8e:	1e02      	subs	r2, r0, #0
 8008c90:	61d8      	str	r0, [r3, #28]
 8008c92:	d104      	bne.n	8008c9e <_dtoa_r+0x2e>
 8008c94:	21ef      	movs	r1, #239	@ 0xef
 8008c96:	4bc7      	ldr	r3, [pc, #796]	@ (8008fb4 <_dtoa_r+0x344>)
 8008c98:	48c7      	ldr	r0, [pc, #796]	@ (8008fb8 <_dtoa_r+0x348>)
 8008c9a:	f001 fcb9 	bl	800a610 <__assert_func>
 8008c9e:	6046      	str	r6, [r0, #4]
 8008ca0:	6086      	str	r6, [r0, #8]
 8008ca2:	6006      	str	r6, [r0, #0]
 8008ca4:	60c6      	str	r6, [r0, #12]
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	6819      	ldr	r1, [r3, #0]
 8008cac:	2900      	cmp	r1, #0
 8008cae:	d00b      	beq.n	8008cc8 <_dtoa_r+0x58>
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	4093      	lsls	r3, r2
 8008cb6:	604a      	str	r2, [r1, #4]
 8008cb8:	608b      	str	r3, [r1, #8]
 8008cba:	9803      	ldr	r0, [sp, #12]
 8008cbc:	f000 ff12 	bl	8009ae4 <_Bfree>
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	2d00      	cmp	r5, #0
 8008cca:	da1e      	bge.n	8008d0a <_dtoa_r+0x9a>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	006b      	lsls	r3, r5, #1
 8008cd2:	085b      	lsrs	r3, r3, #1
 8008cd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cd6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008cd8:	4bb8      	ldr	r3, [pc, #736]	@ (8008fbc <_dtoa_r+0x34c>)
 8008cda:	4ab8      	ldr	r2, [pc, #736]	@ (8008fbc <_dtoa_r+0x34c>)
 8008cdc:	403b      	ands	r3, r7
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d116      	bne.n	8008d10 <_dtoa_r+0xa0>
 8008ce2:	4bb7      	ldr	r3, [pc, #732]	@ (8008fc0 <_dtoa_r+0x350>)
 8008ce4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	033b      	lsls	r3, r7, #12
 8008cea:	0b1b      	lsrs	r3, r3, #12
 8008cec:	4323      	orrs	r3, r4
 8008cee:	d101      	bne.n	8008cf4 <_dtoa_r+0x84>
 8008cf0:	f000 fd80 	bl	80097f4 <_dtoa_r+0xb84>
 8008cf4:	4bb3      	ldr	r3, [pc, #716]	@ (8008fc4 <_dtoa_r+0x354>)
 8008cf6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008cf8:	9308      	str	r3, [sp, #32]
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	d002      	beq.n	8008d04 <_dtoa_r+0x94>
 8008cfe:	4bb2      	ldr	r3, [pc, #712]	@ (8008fc8 <_dtoa_r+0x358>)
 8008d00:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	9808      	ldr	r0, [sp, #32]
 8008d06:	b01d      	add	sp, #116	@ 0x74
 8008d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	e7e2      	b.n	8008cd6 <_dtoa_r+0x66>
 8008d10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d14:	9212      	str	r2, [sp, #72]	@ 0x48
 8008d16:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d18:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008d1a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f7f7 fb92 	bl	8000448 <__aeabi_dcmpeq>
 8008d24:	1e06      	subs	r6, r0, #0
 8008d26:	d00b      	beq.n	8008d40 <_dtoa_r+0xd0>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <_dtoa_r+0xca>
 8008d34:	4ba5      	ldr	r3, [pc, #660]	@ (8008fcc <_dtoa_r+0x35c>)
 8008d36:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	4ba5      	ldr	r3, [pc, #660]	@ (8008fd0 <_dtoa_r+0x360>)
 8008d3c:	9308      	str	r3, [sp, #32]
 8008d3e:	e7e1      	b.n	8008d04 <_dtoa_r+0x94>
 8008d40:	ab1a      	add	r3, sp, #104	@ 0x68
 8008d42:	9301      	str	r3, [sp, #4]
 8008d44:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	9803      	ldr	r0, [sp, #12]
 8008d4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008d4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d4e:	f001 f9c1 	bl	800a0d4 <__d2b>
 8008d52:	007a      	lsls	r2, r7, #1
 8008d54:	9005      	str	r0, [sp, #20]
 8008d56:	0d52      	lsrs	r2, r2, #21
 8008d58:	d100      	bne.n	8008d5c <_dtoa_r+0xec>
 8008d5a:	e07b      	b.n	8008e54 <_dtoa_r+0x1e4>
 8008d5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d5e:	9618      	str	r6, [sp, #96]	@ 0x60
 8008d60:	0319      	lsls	r1, r3, #12
 8008d62:	4b9c      	ldr	r3, [pc, #624]	@ (8008fd4 <_dtoa_r+0x364>)
 8008d64:	0b09      	lsrs	r1, r1, #12
 8008d66:	430b      	orrs	r3, r1
 8008d68:	499b      	ldr	r1, [pc, #620]	@ (8008fd8 <_dtoa_r+0x368>)
 8008d6a:	1857      	adds	r7, r2, r1
 8008d6c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008d6e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008d70:	0019      	movs	r1, r3
 8008d72:	2200      	movs	r2, #0
 8008d74:	4b99      	ldr	r3, [pc, #612]	@ (8008fdc <_dtoa_r+0x36c>)
 8008d76:	f7f9 fd09 	bl	800278c <__aeabi_dsub>
 8008d7a:	4a99      	ldr	r2, [pc, #612]	@ (8008fe0 <_dtoa_r+0x370>)
 8008d7c:	4b99      	ldr	r3, [pc, #612]	@ (8008fe4 <_dtoa_r+0x374>)
 8008d7e:	f7f9 fa1f 	bl	80021c0 <__aeabi_dmul>
 8008d82:	4a99      	ldr	r2, [pc, #612]	@ (8008fe8 <_dtoa_r+0x378>)
 8008d84:	4b99      	ldr	r3, [pc, #612]	@ (8008fec <_dtoa_r+0x37c>)
 8008d86:	f7f8 fa1b 	bl	80011c0 <__aeabi_dadd>
 8008d8a:	0004      	movs	r4, r0
 8008d8c:	0038      	movs	r0, r7
 8008d8e:	000d      	movs	r5, r1
 8008d90:	f7fa f964 	bl	800305c <__aeabi_i2d>
 8008d94:	4a96      	ldr	r2, [pc, #600]	@ (8008ff0 <_dtoa_r+0x380>)
 8008d96:	4b97      	ldr	r3, [pc, #604]	@ (8008ff4 <_dtoa_r+0x384>)
 8008d98:	f7f9 fa12 	bl	80021c0 <__aeabi_dmul>
 8008d9c:	0002      	movs	r2, r0
 8008d9e:	000b      	movs	r3, r1
 8008da0:	0020      	movs	r0, r4
 8008da2:	0029      	movs	r1, r5
 8008da4:	f7f8 fa0c 	bl	80011c0 <__aeabi_dadd>
 8008da8:	0004      	movs	r4, r0
 8008daa:	000d      	movs	r5, r1
 8008dac:	f7fa f91a 	bl	8002fe4 <__aeabi_d2iz>
 8008db0:	2200      	movs	r2, #0
 8008db2:	9004      	str	r0, [sp, #16]
 8008db4:	2300      	movs	r3, #0
 8008db6:	0020      	movs	r0, r4
 8008db8:	0029      	movs	r1, r5
 8008dba:	f7f7 fb4b 	bl	8000454 <__aeabi_dcmplt>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d00b      	beq.n	8008dda <_dtoa_r+0x16a>
 8008dc2:	9804      	ldr	r0, [sp, #16]
 8008dc4:	f7fa f94a 	bl	800305c <__aeabi_i2d>
 8008dc8:	002b      	movs	r3, r5
 8008dca:	0022      	movs	r2, r4
 8008dcc:	f7f7 fb3c 	bl	8000448 <__aeabi_dcmpeq>
 8008dd0:	4243      	negs	r3, r0
 8008dd2:	4158      	adcs	r0, r3
 8008dd4:	9b04      	ldr	r3, [sp, #16]
 8008dd6:	1a1b      	subs	r3, r3, r0
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	2301      	movs	r3, #1
 8008ddc:	9315      	str	r3, [sp, #84]	@ 0x54
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	2b16      	cmp	r3, #22
 8008de2:	d810      	bhi.n	8008e06 <_dtoa_r+0x196>
 8008de4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008de6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008de8:	9a04      	ldr	r2, [sp, #16]
 8008dea:	4b83      	ldr	r3, [pc, #524]	@ (8008ff8 <_dtoa_r+0x388>)
 8008dec:	00d2      	lsls	r2, r2, #3
 8008dee:	189b      	adds	r3, r3, r2
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f7f7 fb2e 	bl	8000454 <__aeabi_dcmplt>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	d047      	beq.n	8008e8c <_dtoa_r+0x21c>
 8008dfc:	9b04      	ldr	r3, [sp, #16]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	2300      	movs	r3, #0
 8008e04:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e06:	2200      	movs	r2, #0
 8008e08:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008e0a:	9206      	str	r2, [sp, #24]
 8008e0c:	1bdb      	subs	r3, r3, r7
 8008e0e:	1e5a      	subs	r2, r3, #1
 8008e10:	d53e      	bpl.n	8008e90 <_dtoa_r+0x220>
 8008e12:	2201      	movs	r2, #1
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	9306      	str	r3, [sp, #24]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e1c:	9b04      	ldr	r3, [sp, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	db38      	blt.n	8008e94 <_dtoa_r+0x224>
 8008e22:	9a04      	ldr	r2, [sp, #16]
 8008e24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e26:	4694      	mov	ip, r2
 8008e28:	4463      	add	r3, ip
 8008e2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9214      	str	r2, [sp, #80]	@ 0x50
 8008e30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e34:	2401      	movs	r4, #1
 8008e36:	2b09      	cmp	r3, #9
 8008e38:	d862      	bhi.n	8008f00 <_dtoa_r+0x290>
 8008e3a:	2b05      	cmp	r3, #5
 8008e3c:	dd02      	ble.n	8008e44 <_dtoa_r+0x1d4>
 8008e3e:	2400      	movs	r4, #0
 8008e40:	3b04      	subs	r3, #4
 8008e42:	9322      	str	r3, [sp, #136]	@ 0x88
 8008e44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e46:	1e98      	subs	r0, r3, #2
 8008e48:	2803      	cmp	r0, #3
 8008e4a:	d863      	bhi.n	8008f14 <_dtoa_r+0x2a4>
 8008e4c:	f7f7 f962 	bl	8000114 <__gnu_thumb1_case_uqi>
 8008e50:	2b385654 	.word	0x2b385654
 8008e54:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008e56:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8008e58:	18f6      	adds	r6, r6, r3
 8008e5a:	4b68      	ldr	r3, [pc, #416]	@ (8008ffc <_dtoa_r+0x38c>)
 8008e5c:	18f2      	adds	r2, r6, r3
 8008e5e:	2a20      	cmp	r2, #32
 8008e60:	dd0f      	ble.n	8008e82 <_dtoa_r+0x212>
 8008e62:	2340      	movs	r3, #64	@ 0x40
 8008e64:	1a9b      	subs	r3, r3, r2
 8008e66:	409f      	lsls	r7, r3
 8008e68:	4b65      	ldr	r3, [pc, #404]	@ (8009000 <_dtoa_r+0x390>)
 8008e6a:	0038      	movs	r0, r7
 8008e6c:	18f3      	adds	r3, r6, r3
 8008e6e:	40dc      	lsrs	r4, r3
 8008e70:	4320      	orrs	r0, r4
 8008e72:	f7fa f921 	bl	80030b8 <__aeabi_ui2d>
 8008e76:	2201      	movs	r2, #1
 8008e78:	4b62      	ldr	r3, [pc, #392]	@ (8009004 <_dtoa_r+0x394>)
 8008e7a:	1e77      	subs	r7, r6, #1
 8008e7c:	18cb      	adds	r3, r1, r3
 8008e7e:	9218      	str	r2, [sp, #96]	@ 0x60
 8008e80:	e776      	b.n	8008d70 <_dtoa_r+0x100>
 8008e82:	2320      	movs	r3, #32
 8008e84:	0020      	movs	r0, r4
 8008e86:	1a9b      	subs	r3, r3, r2
 8008e88:	4098      	lsls	r0, r3
 8008e8a:	e7f2      	b.n	8008e72 <_dtoa_r+0x202>
 8008e8c:	9015      	str	r0, [sp, #84]	@ 0x54
 8008e8e:	e7ba      	b.n	8008e06 <_dtoa_r+0x196>
 8008e90:	920d      	str	r2, [sp, #52]	@ 0x34
 8008e92:	e7c3      	b.n	8008e1c <_dtoa_r+0x1ac>
 8008e94:	9b06      	ldr	r3, [sp, #24]
 8008e96:	9a04      	ldr	r2, [sp, #16]
 8008e98:	1a9b      	subs	r3, r3, r2
 8008e9a:	9306      	str	r3, [sp, #24]
 8008e9c:	4253      	negs	r3, r2
 8008e9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	9314      	str	r3, [sp, #80]	@ 0x50
 8008ea4:	e7c5      	b.n	8008e32 <_dtoa_r+0x1c2>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008eaa:	9310      	str	r3, [sp, #64]	@ 0x40
 8008eac:	4694      	mov	ip, r2
 8008eae:	9b04      	ldr	r3, [sp, #16]
 8008eb0:	4463      	add	r3, ip
 8008eb2:	930e      	str	r3, [sp, #56]	@ 0x38
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	dc08      	bgt.n	8008ece <_dtoa_r+0x25e>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e006      	b.n	8008ece <_dtoa_r+0x25e>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ec4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	dd28      	ble.n	8008f1c <_dtoa_r+0x2ac>
 8008eca:	930e      	str	r3, [sp, #56]	@ 0x38
 8008ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ece:	9a03      	ldr	r2, [sp, #12]
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	69d0      	ldr	r0, [r2, #28]
 8008ed4:	2204      	movs	r2, #4
 8008ed6:	0015      	movs	r5, r2
 8008ed8:	3514      	adds	r5, #20
 8008eda:	429d      	cmp	r5, r3
 8008edc:	d923      	bls.n	8008f26 <_dtoa_r+0x2b6>
 8008ede:	6041      	str	r1, [r0, #4]
 8008ee0:	9803      	ldr	r0, [sp, #12]
 8008ee2:	f000 fdbb 	bl	8009a5c <_Balloc>
 8008ee6:	9008      	str	r0, [sp, #32]
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d11f      	bne.n	8008f2c <_dtoa_r+0x2bc>
 8008eec:	21b0      	movs	r1, #176	@ 0xb0
 8008eee:	4b46      	ldr	r3, [pc, #280]	@ (8009008 <_dtoa_r+0x398>)
 8008ef0:	4831      	ldr	r0, [pc, #196]	@ (8008fb8 <_dtoa_r+0x348>)
 8008ef2:	9a08      	ldr	r2, [sp, #32]
 8008ef4:	31ff      	adds	r1, #255	@ 0xff
 8008ef6:	e6d0      	b.n	8008c9a <_dtoa_r+0x2a>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	e7e2      	b.n	8008ec2 <_dtoa_r+0x252>
 8008efc:	2300      	movs	r3, #0
 8008efe:	e7d3      	b.n	8008ea8 <_dtoa_r+0x238>
 8008f00:	2300      	movs	r3, #0
 8008f02:	9410      	str	r4, [sp, #64]	@ 0x40
 8008f04:	9322      	str	r3, [sp, #136]	@ 0x88
 8008f06:	3b01      	subs	r3, #1
 8008f08:	2200      	movs	r2, #0
 8008f0a:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f0e:	3313      	adds	r3, #19
 8008f10:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008f12:	e7dc      	b.n	8008ece <_dtoa_r+0x25e>
 8008f14:	2301      	movs	r3, #1
 8008f16:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f18:	3b02      	subs	r3, #2
 8008f1a:	e7f5      	b.n	8008f08 <_dtoa_r+0x298>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	001a      	movs	r2, r3
 8008f20:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f24:	e7f4      	b.n	8008f10 <_dtoa_r+0x2a0>
 8008f26:	3101      	adds	r1, #1
 8008f28:	0052      	lsls	r2, r2, #1
 8008f2a:	e7d4      	b.n	8008ed6 <_dtoa_r+0x266>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	9a08      	ldr	r2, [sp, #32]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f36:	2b0e      	cmp	r3, #14
 8008f38:	d900      	bls.n	8008f3c <_dtoa_r+0x2cc>
 8008f3a:	e0d6      	b.n	80090ea <_dtoa_r+0x47a>
 8008f3c:	2c00      	cmp	r4, #0
 8008f3e:	d100      	bne.n	8008f42 <_dtoa_r+0x2d2>
 8008f40:	e0d3      	b.n	80090ea <_dtoa_r+0x47a>
 8008f42:	9b04      	ldr	r3, [sp, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	dd63      	ble.n	8009010 <_dtoa_r+0x3a0>
 8008f48:	210f      	movs	r1, #15
 8008f4a:	9a04      	ldr	r2, [sp, #16]
 8008f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8008ff8 <_dtoa_r+0x388>)
 8008f4e:	400a      	ands	r2, r1
 8008f50:	00d2      	lsls	r2, r2, #3
 8008f52:	189b      	adds	r3, r3, r2
 8008f54:	681e      	ldr	r6, [r3, #0]
 8008f56:	685f      	ldr	r7, [r3, #4]
 8008f58:	9b04      	ldr	r3, [sp, #16]
 8008f5a:	2402      	movs	r4, #2
 8008f5c:	111d      	asrs	r5, r3, #4
 8008f5e:	05db      	lsls	r3, r3, #23
 8008f60:	d50a      	bpl.n	8008f78 <_dtoa_r+0x308>
 8008f62:	4b2a      	ldr	r3, [pc, #168]	@ (800900c <_dtoa_r+0x39c>)
 8008f64:	400d      	ands	r5, r1
 8008f66:	6a1a      	ldr	r2, [r3, #32]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008f6c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008f6e:	f7f8 fced 	bl	800194c <__aeabi_ddiv>
 8008f72:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f76:	3401      	adds	r4, #1
 8008f78:	4b24      	ldr	r3, [pc, #144]	@ (800900c <_dtoa_r+0x39c>)
 8008f7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	d108      	bne.n	8008f92 <_dtoa_r+0x322>
 8008f80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008f82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f84:	0032      	movs	r2, r6
 8008f86:	003b      	movs	r3, r7
 8008f88:	f7f8 fce0 	bl	800194c <__aeabi_ddiv>
 8008f8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f8e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f90:	e059      	b.n	8009046 <_dtoa_r+0x3d6>
 8008f92:	2301      	movs	r3, #1
 8008f94:	421d      	tst	r5, r3
 8008f96:	d009      	beq.n	8008fac <_dtoa_r+0x33c>
 8008f98:	18e4      	adds	r4, r4, r3
 8008f9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f9c:	0030      	movs	r0, r6
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	0039      	movs	r1, r7
 8008fa4:	f7f9 f90c 	bl	80021c0 <__aeabi_dmul>
 8008fa8:	0006      	movs	r6, r0
 8008faa:	000f      	movs	r7, r1
 8008fac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fae:	106d      	asrs	r5, r5, #1
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	e7e2      	b.n	8008f7a <_dtoa_r+0x30a>
 8008fb4:	0800af4d 	.word	0x0800af4d
 8008fb8:	0800af64 	.word	0x0800af64
 8008fbc:	7ff00000 	.word	0x7ff00000
 8008fc0:	0000270f 	.word	0x0000270f
 8008fc4:	0800af49 	.word	0x0800af49
 8008fc8:	0800af4c 	.word	0x0800af4c
 8008fcc:	0800af1d 	.word	0x0800af1d
 8008fd0:	0800af1c 	.word	0x0800af1c
 8008fd4:	3ff00000 	.word	0x3ff00000
 8008fd8:	fffffc01 	.word	0xfffffc01
 8008fdc:	3ff80000 	.word	0x3ff80000
 8008fe0:	636f4361 	.word	0x636f4361
 8008fe4:	3fd287a7 	.word	0x3fd287a7
 8008fe8:	8b60c8b3 	.word	0x8b60c8b3
 8008fec:	3fc68a28 	.word	0x3fc68a28
 8008ff0:	509f79fb 	.word	0x509f79fb
 8008ff4:	3fd34413 	.word	0x3fd34413
 8008ff8:	0800b0b8 	.word	0x0800b0b8
 8008ffc:	00000432 	.word	0x00000432
 8009000:	00000412 	.word	0x00000412
 8009004:	fe100000 	.word	0xfe100000
 8009008:	0800afbc 	.word	0x0800afbc
 800900c:	0800b090 	.word	0x0800b090
 8009010:	9b04      	ldr	r3, [sp, #16]
 8009012:	2402      	movs	r4, #2
 8009014:	2b00      	cmp	r3, #0
 8009016:	d016      	beq.n	8009046 <_dtoa_r+0x3d6>
 8009018:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800901a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800901c:	220f      	movs	r2, #15
 800901e:	425d      	negs	r5, r3
 8009020:	402a      	ands	r2, r5
 8009022:	4bd5      	ldr	r3, [pc, #852]	@ (8009378 <_dtoa_r+0x708>)
 8009024:	00d2      	lsls	r2, r2, #3
 8009026:	189b      	adds	r3, r3, r2
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f7f9 f8c8 	bl	80021c0 <__aeabi_dmul>
 8009030:	2701      	movs	r7, #1
 8009032:	2300      	movs	r3, #0
 8009034:	900a      	str	r0, [sp, #40]	@ 0x28
 8009036:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009038:	4ed0      	ldr	r6, [pc, #832]	@ (800937c <_dtoa_r+0x70c>)
 800903a:	112d      	asrs	r5, r5, #4
 800903c:	2d00      	cmp	r5, #0
 800903e:	d000      	beq.n	8009042 <_dtoa_r+0x3d2>
 8009040:	e095      	b.n	800916e <_dtoa_r+0x4fe>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1a2      	bne.n	8008f8c <_dtoa_r+0x31c>
 8009046:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009048:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800904a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800904c:	2b00      	cmp	r3, #0
 800904e:	d100      	bne.n	8009052 <_dtoa_r+0x3e2>
 8009050:	e098      	b.n	8009184 <_dtoa_r+0x514>
 8009052:	2200      	movs	r2, #0
 8009054:	0030      	movs	r0, r6
 8009056:	0039      	movs	r1, r7
 8009058:	4bc9      	ldr	r3, [pc, #804]	@ (8009380 <_dtoa_r+0x710>)
 800905a:	f7f7 f9fb 	bl	8000454 <__aeabi_dcmplt>
 800905e:	2800      	cmp	r0, #0
 8009060:	d100      	bne.n	8009064 <_dtoa_r+0x3f4>
 8009062:	e08f      	b.n	8009184 <_dtoa_r+0x514>
 8009064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009066:	2b00      	cmp	r3, #0
 8009068:	d100      	bne.n	800906c <_dtoa_r+0x3fc>
 800906a:	e08b      	b.n	8009184 <_dtoa_r+0x514>
 800906c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800906e:	2b00      	cmp	r3, #0
 8009070:	dd37      	ble.n	80090e2 <_dtoa_r+0x472>
 8009072:	9b04      	ldr	r3, [sp, #16]
 8009074:	2200      	movs	r2, #0
 8009076:	3b01      	subs	r3, #1
 8009078:	930c      	str	r3, [sp, #48]	@ 0x30
 800907a:	0030      	movs	r0, r6
 800907c:	4bc1      	ldr	r3, [pc, #772]	@ (8009384 <_dtoa_r+0x714>)
 800907e:	0039      	movs	r1, r7
 8009080:	f7f9 f89e 	bl	80021c0 <__aeabi_dmul>
 8009084:	900a      	str	r0, [sp, #40]	@ 0x28
 8009086:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800908a:	3401      	adds	r4, #1
 800908c:	0020      	movs	r0, r4
 800908e:	9311      	str	r3, [sp, #68]	@ 0x44
 8009090:	f7f9 ffe4 	bl	800305c <__aeabi_i2d>
 8009094:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009098:	f7f9 f892 	bl	80021c0 <__aeabi_dmul>
 800909c:	4bba      	ldr	r3, [pc, #744]	@ (8009388 <_dtoa_r+0x718>)
 800909e:	2200      	movs	r2, #0
 80090a0:	f7f8 f88e 	bl	80011c0 <__aeabi_dadd>
 80090a4:	4bb9      	ldr	r3, [pc, #740]	@ (800938c <_dtoa_r+0x71c>)
 80090a6:	0006      	movs	r6, r0
 80090a8:	18cf      	adds	r7, r1, r3
 80090aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d16d      	bne.n	800918c <_dtoa_r+0x51c>
 80090b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80090b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80090b4:	2200      	movs	r2, #0
 80090b6:	4bb6      	ldr	r3, [pc, #728]	@ (8009390 <_dtoa_r+0x720>)
 80090b8:	f7f9 fb68 	bl	800278c <__aeabi_dsub>
 80090bc:	0032      	movs	r2, r6
 80090be:	003b      	movs	r3, r7
 80090c0:	0004      	movs	r4, r0
 80090c2:	000d      	movs	r5, r1
 80090c4:	f7f7 f9da 	bl	800047c <__aeabi_dcmpgt>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d000      	beq.n	80090ce <_dtoa_r+0x45e>
 80090cc:	e2b6      	b.n	800963c <_dtoa_r+0x9cc>
 80090ce:	2180      	movs	r1, #128	@ 0x80
 80090d0:	0609      	lsls	r1, r1, #24
 80090d2:	187b      	adds	r3, r7, r1
 80090d4:	0032      	movs	r2, r6
 80090d6:	0020      	movs	r0, r4
 80090d8:	0029      	movs	r1, r5
 80090da:	f7f7 f9bb 	bl	8000454 <__aeabi_dcmplt>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d128      	bne.n	8009134 <_dtoa_r+0x4c4>
 80090e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090e4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80090e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80090ea:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	da00      	bge.n	80090f2 <_dtoa_r+0x482>
 80090f0:	e174      	b.n	80093dc <_dtoa_r+0x76c>
 80090f2:	9a04      	ldr	r2, [sp, #16]
 80090f4:	2a0e      	cmp	r2, #14
 80090f6:	dd00      	ble.n	80090fa <_dtoa_r+0x48a>
 80090f8:	e170      	b.n	80093dc <_dtoa_r+0x76c>
 80090fa:	4b9f      	ldr	r3, [pc, #636]	@ (8009378 <_dtoa_r+0x708>)
 80090fc:	00d2      	lsls	r2, r2, #3
 80090fe:	189b      	adds	r3, r3, r2
 8009100:	685c      	ldr	r4, [r3, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	9306      	str	r3, [sp, #24]
 8009106:	9407      	str	r4, [sp, #28]
 8009108:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800910a:	2b00      	cmp	r3, #0
 800910c:	db00      	blt.n	8009110 <_dtoa_r+0x4a0>
 800910e:	e0e7      	b.n	80092e0 <_dtoa_r+0x670>
 8009110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	dd00      	ble.n	8009118 <_dtoa_r+0x4a8>
 8009116:	e0e3      	b.n	80092e0 <_dtoa_r+0x670>
 8009118:	d10c      	bne.n	8009134 <_dtoa_r+0x4c4>
 800911a:	9806      	ldr	r0, [sp, #24]
 800911c:	9907      	ldr	r1, [sp, #28]
 800911e:	2200      	movs	r2, #0
 8009120:	4b9b      	ldr	r3, [pc, #620]	@ (8009390 <_dtoa_r+0x720>)
 8009122:	f7f9 f84d 	bl	80021c0 <__aeabi_dmul>
 8009126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009128:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800912a:	f7f7 f9b1 	bl	8000490 <__aeabi_dcmpge>
 800912e:	2800      	cmp	r0, #0
 8009130:	d100      	bne.n	8009134 <_dtoa_r+0x4c4>
 8009132:	e286      	b.n	8009642 <_dtoa_r+0x9d2>
 8009134:	2600      	movs	r6, #0
 8009136:	0037      	movs	r7, r6
 8009138:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800913a:	9c08      	ldr	r4, [sp, #32]
 800913c:	43db      	mvns	r3, r3
 800913e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009140:	9704      	str	r7, [sp, #16]
 8009142:	2700      	movs	r7, #0
 8009144:	0031      	movs	r1, r6
 8009146:	9803      	ldr	r0, [sp, #12]
 8009148:	f000 fccc 	bl	8009ae4 <_Bfree>
 800914c:	9b04      	ldr	r3, [sp, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d100      	bne.n	8009154 <_dtoa_r+0x4e4>
 8009152:	e0bb      	b.n	80092cc <_dtoa_r+0x65c>
 8009154:	2f00      	cmp	r7, #0
 8009156:	d005      	beq.n	8009164 <_dtoa_r+0x4f4>
 8009158:	429f      	cmp	r7, r3
 800915a:	d003      	beq.n	8009164 <_dtoa_r+0x4f4>
 800915c:	0039      	movs	r1, r7
 800915e:	9803      	ldr	r0, [sp, #12]
 8009160:	f000 fcc0 	bl	8009ae4 <_Bfree>
 8009164:	9904      	ldr	r1, [sp, #16]
 8009166:	9803      	ldr	r0, [sp, #12]
 8009168:	f000 fcbc 	bl	8009ae4 <_Bfree>
 800916c:	e0ae      	b.n	80092cc <_dtoa_r+0x65c>
 800916e:	423d      	tst	r5, r7
 8009170:	d005      	beq.n	800917e <_dtoa_r+0x50e>
 8009172:	6832      	ldr	r2, [r6, #0]
 8009174:	6873      	ldr	r3, [r6, #4]
 8009176:	f7f9 f823 	bl	80021c0 <__aeabi_dmul>
 800917a:	003b      	movs	r3, r7
 800917c:	3401      	adds	r4, #1
 800917e:	106d      	asrs	r5, r5, #1
 8009180:	3608      	adds	r6, #8
 8009182:	e75b      	b.n	800903c <_dtoa_r+0x3cc>
 8009184:	9b04      	ldr	r3, [sp, #16]
 8009186:	930c      	str	r3, [sp, #48]	@ 0x30
 8009188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800918a:	e77f      	b.n	800908c <_dtoa_r+0x41c>
 800918c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800918e:	4b7a      	ldr	r3, [pc, #488]	@ (8009378 <_dtoa_r+0x708>)
 8009190:	3a01      	subs	r2, #1
 8009192:	00d2      	lsls	r2, r2, #3
 8009194:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009196:	189b      	adds	r3, r3, r2
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	2900      	cmp	r1, #0
 800919e:	d04c      	beq.n	800923a <_dtoa_r+0x5ca>
 80091a0:	2000      	movs	r0, #0
 80091a2:	497c      	ldr	r1, [pc, #496]	@ (8009394 <_dtoa_r+0x724>)
 80091a4:	f7f8 fbd2 	bl	800194c <__aeabi_ddiv>
 80091a8:	0032      	movs	r2, r6
 80091aa:	003b      	movs	r3, r7
 80091ac:	f7f9 faee 	bl	800278c <__aeabi_dsub>
 80091b0:	9a08      	ldr	r2, [sp, #32]
 80091b2:	0006      	movs	r6, r0
 80091b4:	4694      	mov	ip, r2
 80091b6:	000f      	movs	r7, r1
 80091b8:	9b08      	ldr	r3, [sp, #32]
 80091ba:	9316      	str	r3, [sp, #88]	@ 0x58
 80091bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80091be:	4463      	add	r3, ip
 80091c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80091c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091c6:	f7f9 ff0d 	bl	8002fe4 <__aeabi_d2iz>
 80091ca:	0005      	movs	r5, r0
 80091cc:	f7f9 ff46 	bl	800305c <__aeabi_i2d>
 80091d0:	0002      	movs	r2, r0
 80091d2:	000b      	movs	r3, r1
 80091d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80091d6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091d8:	f7f9 fad8 	bl	800278c <__aeabi_dsub>
 80091dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80091de:	3530      	adds	r5, #48	@ 0x30
 80091e0:	1c5c      	adds	r4, r3, #1
 80091e2:	701d      	strb	r5, [r3, #0]
 80091e4:	0032      	movs	r2, r6
 80091e6:	003b      	movs	r3, r7
 80091e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80091ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 80091ec:	f7f7 f932 	bl	8000454 <__aeabi_dcmplt>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d16b      	bne.n	80092cc <_dtoa_r+0x65c>
 80091f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091f8:	2000      	movs	r0, #0
 80091fa:	4961      	ldr	r1, [pc, #388]	@ (8009380 <_dtoa_r+0x710>)
 80091fc:	f7f9 fac6 	bl	800278c <__aeabi_dsub>
 8009200:	0032      	movs	r2, r6
 8009202:	003b      	movs	r3, r7
 8009204:	f7f7 f926 	bl	8000454 <__aeabi_dcmplt>
 8009208:	2800      	cmp	r0, #0
 800920a:	d000      	beq.n	800920e <_dtoa_r+0x59e>
 800920c:	e0c6      	b.n	800939c <_dtoa_r+0x72c>
 800920e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009210:	42a3      	cmp	r3, r4
 8009212:	d100      	bne.n	8009216 <_dtoa_r+0x5a6>
 8009214:	e765      	b.n	80090e2 <_dtoa_r+0x472>
 8009216:	2200      	movs	r2, #0
 8009218:	0030      	movs	r0, r6
 800921a:	0039      	movs	r1, r7
 800921c:	4b59      	ldr	r3, [pc, #356]	@ (8009384 <_dtoa_r+0x714>)
 800921e:	f7f8 ffcf 	bl	80021c0 <__aeabi_dmul>
 8009222:	2200      	movs	r2, #0
 8009224:	0006      	movs	r6, r0
 8009226:	000f      	movs	r7, r1
 8009228:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800922a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800922c:	4b55      	ldr	r3, [pc, #340]	@ (8009384 <_dtoa_r+0x714>)
 800922e:	f7f8 ffc7 	bl	80021c0 <__aeabi_dmul>
 8009232:	9416      	str	r4, [sp, #88]	@ 0x58
 8009234:	900a      	str	r0, [sp, #40]	@ 0x28
 8009236:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009238:	e7c3      	b.n	80091c2 <_dtoa_r+0x552>
 800923a:	0030      	movs	r0, r6
 800923c:	0039      	movs	r1, r7
 800923e:	f7f8 ffbf 	bl	80021c0 <__aeabi_dmul>
 8009242:	9d08      	ldr	r5, [sp, #32]
 8009244:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009246:	002b      	movs	r3, r5
 8009248:	4694      	mov	ip, r2
 800924a:	9016      	str	r0, [sp, #88]	@ 0x58
 800924c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800924e:	4463      	add	r3, ip
 8009250:	9319      	str	r3, [sp, #100]	@ 0x64
 8009252:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009254:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009256:	f7f9 fec5 	bl	8002fe4 <__aeabi_d2iz>
 800925a:	0004      	movs	r4, r0
 800925c:	f7f9 fefe 	bl	800305c <__aeabi_i2d>
 8009260:	000b      	movs	r3, r1
 8009262:	0002      	movs	r2, r0
 8009264:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009266:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009268:	f7f9 fa90 	bl	800278c <__aeabi_dsub>
 800926c:	3430      	adds	r4, #48	@ 0x30
 800926e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009270:	702c      	strb	r4, [r5, #0]
 8009272:	3501      	adds	r5, #1
 8009274:	0006      	movs	r6, r0
 8009276:	000f      	movs	r7, r1
 8009278:	42ab      	cmp	r3, r5
 800927a:	d12a      	bne.n	80092d2 <_dtoa_r+0x662>
 800927c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800927e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8009280:	9b08      	ldr	r3, [sp, #32]
 8009282:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009284:	469c      	mov	ip, r3
 8009286:	2200      	movs	r2, #0
 8009288:	4b42      	ldr	r3, [pc, #264]	@ (8009394 <_dtoa_r+0x724>)
 800928a:	4464      	add	r4, ip
 800928c:	f7f7 ff98 	bl	80011c0 <__aeabi_dadd>
 8009290:	0002      	movs	r2, r0
 8009292:	000b      	movs	r3, r1
 8009294:	0030      	movs	r0, r6
 8009296:	0039      	movs	r1, r7
 8009298:	f7f7 f8f0 	bl	800047c <__aeabi_dcmpgt>
 800929c:	2800      	cmp	r0, #0
 800929e:	d000      	beq.n	80092a2 <_dtoa_r+0x632>
 80092a0:	e07c      	b.n	800939c <_dtoa_r+0x72c>
 80092a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80092a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80092a6:	2000      	movs	r0, #0
 80092a8:	493a      	ldr	r1, [pc, #232]	@ (8009394 <_dtoa_r+0x724>)
 80092aa:	f7f9 fa6f 	bl	800278c <__aeabi_dsub>
 80092ae:	0002      	movs	r2, r0
 80092b0:	000b      	movs	r3, r1
 80092b2:	0030      	movs	r0, r6
 80092b4:	0039      	movs	r1, r7
 80092b6:	f7f7 f8cd 	bl	8000454 <__aeabi_dcmplt>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d100      	bne.n	80092c0 <_dtoa_r+0x650>
 80092be:	e710      	b.n	80090e2 <_dtoa_r+0x472>
 80092c0:	0023      	movs	r3, r4
 80092c2:	3c01      	subs	r4, #1
 80092c4:	7822      	ldrb	r2, [r4, #0]
 80092c6:	2a30      	cmp	r2, #48	@ 0x30
 80092c8:	d0fa      	beq.n	80092c0 <_dtoa_r+0x650>
 80092ca:	001c      	movs	r4, r3
 80092cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092ce:	9304      	str	r3, [sp, #16]
 80092d0:	e042      	b.n	8009358 <_dtoa_r+0x6e8>
 80092d2:	2200      	movs	r2, #0
 80092d4:	4b2b      	ldr	r3, [pc, #172]	@ (8009384 <_dtoa_r+0x714>)
 80092d6:	f7f8 ff73 	bl	80021c0 <__aeabi_dmul>
 80092da:	900a      	str	r0, [sp, #40]	@ 0x28
 80092dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80092de:	e7b8      	b.n	8009252 <_dtoa_r+0x5e2>
 80092e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e2:	9d08      	ldr	r5, [sp, #32]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	195b      	adds	r3, r3, r5
 80092e8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80092ea:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80092ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80092ee:	9a06      	ldr	r2, [sp, #24]
 80092f0:	9b07      	ldr	r3, [sp, #28]
 80092f2:	0030      	movs	r0, r6
 80092f4:	0039      	movs	r1, r7
 80092f6:	f7f8 fb29 	bl	800194c <__aeabi_ddiv>
 80092fa:	f7f9 fe73 	bl	8002fe4 <__aeabi_d2iz>
 80092fe:	9009      	str	r0, [sp, #36]	@ 0x24
 8009300:	f7f9 feac 	bl	800305c <__aeabi_i2d>
 8009304:	9a06      	ldr	r2, [sp, #24]
 8009306:	9b07      	ldr	r3, [sp, #28]
 8009308:	f7f8 ff5a 	bl	80021c0 <__aeabi_dmul>
 800930c:	0002      	movs	r2, r0
 800930e:	000b      	movs	r3, r1
 8009310:	0030      	movs	r0, r6
 8009312:	0039      	movs	r1, r7
 8009314:	f7f9 fa3a 	bl	800278c <__aeabi_dsub>
 8009318:	002b      	movs	r3, r5
 800931a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800931c:	3501      	adds	r5, #1
 800931e:	3230      	adds	r2, #48	@ 0x30
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009324:	002c      	movs	r4, r5
 8009326:	429a      	cmp	r2, r3
 8009328:	d14b      	bne.n	80093c2 <_dtoa_r+0x752>
 800932a:	0002      	movs	r2, r0
 800932c:	000b      	movs	r3, r1
 800932e:	f7f7 ff47 	bl	80011c0 <__aeabi_dadd>
 8009332:	9a06      	ldr	r2, [sp, #24]
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	0006      	movs	r6, r0
 8009338:	000f      	movs	r7, r1
 800933a:	f7f7 f89f 	bl	800047c <__aeabi_dcmpgt>
 800933e:	2800      	cmp	r0, #0
 8009340:	d12a      	bne.n	8009398 <_dtoa_r+0x728>
 8009342:	9a06      	ldr	r2, [sp, #24]
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	0030      	movs	r0, r6
 8009348:	0039      	movs	r1, r7
 800934a:	f7f7 f87d 	bl	8000448 <__aeabi_dcmpeq>
 800934e:	2800      	cmp	r0, #0
 8009350:	d002      	beq.n	8009358 <_dtoa_r+0x6e8>
 8009352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009354:	07dd      	lsls	r5, r3, #31
 8009356:	d41f      	bmi.n	8009398 <_dtoa_r+0x728>
 8009358:	9905      	ldr	r1, [sp, #20]
 800935a:	9803      	ldr	r0, [sp, #12]
 800935c:	f000 fbc2 	bl	8009ae4 <_Bfree>
 8009360:	2300      	movs	r3, #0
 8009362:	7023      	strb	r3, [r4, #0]
 8009364:	9b04      	ldr	r3, [sp, #16]
 8009366:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009368:	3301      	adds	r3, #1
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800936e:	2b00      	cmp	r3, #0
 8009370:	d100      	bne.n	8009374 <_dtoa_r+0x704>
 8009372:	e4c7      	b.n	8008d04 <_dtoa_r+0x94>
 8009374:	601c      	str	r4, [r3, #0]
 8009376:	e4c5      	b.n	8008d04 <_dtoa_r+0x94>
 8009378:	0800b0b8 	.word	0x0800b0b8
 800937c:	0800b090 	.word	0x0800b090
 8009380:	3ff00000 	.word	0x3ff00000
 8009384:	40240000 	.word	0x40240000
 8009388:	401c0000 	.word	0x401c0000
 800938c:	fcc00000 	.word	0xfcc00000
 8009390:	40140000 	.word	0x40140000
 8009394:	3fe00000 	.word	0x3fe00000
 8009398:	9b04      	ldr	r3, [sp, #16]
 800939a:	930c      	str	r3, [sp, #48]	@ 0x30
 800939c:	0023      	movs	r3, r4
 800939e:	001c      	movs	r4, r3
 80093a0:	3b01      	subs	r3, #1
 80093a2:	781a      	ldrb	r2, [r3, #0]
 80093a4:	2a39      	cmp	r2, #57	@ 0x39
 80093a6:	d108      	bne.n	80093ba <_dtoa_r+0x74a>
 80093a8:	9a08      	ldr	r2, [sp, #32]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d1f7      	bne.n	800939e <_dtoa_r+0x72e>
 80093ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80093b0:	9908      	ldr	r1, [sp, #32]
 80093b2:	3201      	adds	r2, #1
 80093b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80093b6:	2230      	movs	r2, #48	@ 0x30
 80093b8:	700a      	strb	r2, [r1, #0]
 80093ba:	781a      	ldrb	r2, [r3, #0]
 80093bc:	3201      	adds	r2, #1
 80093be:	701a      	strb	r2, [r3, #0]
 80093c0:	e784      	b.n	80092cc <_dtoa_r+0x65c>
 80093c2:	2200      	movs	r2, #0
 80093c4:	4bc6      	ldr	r3, [pc, #792]	@ (80096e0 <_dtoa_r+0xa70>)
 80093c6:	f7f8 fefb 	bl	80021c0 <__aeabi_dmul>
 80093ca:	2200      	movs	r2, #0
 80093cc:	2300      	movs	r3, #0
 80093ce:	0006      	movs	r6, r0
 80093d0:	000f      	movs	r7, r1
 80093d2:	f7f7 f839 	bl	8000448 <__aeabi_dcmpeq>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d089      	beq.n	80092ee <_dtoa_r+0x67e>
 80093da:	e7bd      	b.n	8009358 <_dtoa_r+0x6e8>
 80093dc:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80093de:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80093e0:	9c06      	ldr	r4, [sp, #24]
 80093e2:	2f00      	cmp	r7, #0
 80093e4:	d014      	beq.n	8009410 <_dtoa_r+0x7a0>
 80093e6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80093e8:	2a01      	cmp	r2, #1
 80093ea:	dd00      	ble.n	80093ee <_dtoa_r+0x77e>
 80093ec:	e0e4      	b.n	80095b8 <_dtoa_r+0x948>
 80093ee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	d100      	bne.n	80093f6 <_dtoa_r+0x786>
 80093f4:	e0da      	b.n	80095ac <_dtoa_r+0x93c>
 80093f6:	4abb      	ldr	r2, [pc, #748]	@ (80096e4 <_dtoa_r+0xa74>)
 80093f8:	189b      	adds	r3, r3, r2
 80093fa:	9a06      	ldr	r2, [sp, #24]
 80093fc:	2101      	movs	r1, #1
 80093fe:	18d2      	adds	r2, r2, r3
 8009400:	9206      	str	r2, [sp, #24]
 8009402:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009404:	9803      	ldr	r0, [sp, #12]
 8009406:	18d3      	adds	r3, r2, r3
 8009408:	930d      	str	r3, [sp, #52]	@ 0x34
 800940a:	f000 fc23 	bl	8009c54 <__i2b>
 800940e:	0007      	movs	r7, r0
 8009410:	2c00      	cmp	r4, #0
 8009412:	d00e      	beq.n	8009432 <_dtoa_r+0x7c2>
 8009414:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009416:	2b00      	cmp	r3, #0
 8009418:	dd0b      	ble.n	8009432 <_dtoa_r+0x7c2>
 800941a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800941c:	0023      	movs	r3, r4
 800941e:	4294      	cmp	r4, r2
 8009420:	dd00      	ble.n	8009424 <_dtoa_r+0x7b4>
 8009422:	0013      	movs	r3, r2
 8009424:	9a06      	ldr	r2, [sp, #24]
 8009426:	1ae4      	subs	r4, r4, r3
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	9206      	str	r2, [sp, #24]
 800942c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	930d      	str	r3, [sp, #52]	@ 0x34
 8009432:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d021      	beq.n	800947c <_dtoa_r+0x80c>
 8009438:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800943a:	2b00      	cmp	r3, #0
 800943c:	d100      	bne.n	8009440 <_dtoa_r+0x7d0>
 800943e:	e0d3      	b.n	80095e8 <_dtoa_r+0x978>
 8009440:	9e05      	ldr	r6, [sp, #20]
 8009442:	2d00      	cmp	r5, #0
 8009444:	d014      	beq.n	8009470 <_dtoa_r+0x800>
 8009446:	0039      	movs	r1, r7
 8009448:	002a      	movs	r2, r5
 800944a:	9803      	ldr	r0, [sp, #12]
 800944c:	f000 fcc4 	bl	8009dd8 <__pow5mult>
 8009450:	9a05      	ldr	r2, [sp, #20]
 8009452:	0001      	movs	r1, r0
 8009454:	0007      	movs	r7, r0
 8009456:	9803      	ldr	r0, [sp, #12]
 8009458:	f000 fc14 	bl	8009c84 <__multiply>
 800945c:	0006      	movs	r6, r0
 800945e:	9905      	ldr	r1, [sp, #20]
 8009460:	9803      	ldr	r0, [sp, #12]
 8009462:	f000 fb3f 	bl	8009ae4 <_Bfree>
 8009466:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009468:	9605      	str	r6, [sp, #20]
 800946a:	1b5b      	subs	r3, r3, r5
 800946c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800946e:	d005      	beq.n	800947c <_dtoa_r+0x80c>
 8009470:	0031      	movs	r1, r6
 8009472:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009474:	9803      	ldr	r0, [sp, #12]
 8009476:	f000 fcaf 	bl	8009dd8 <__pow5mult>
 800947a:	9005      	str	r0, [sp, #20]
 800947c:	2101      	movs	r1, #1
 800947e:	9803      	ldr	r0, [sp, #12]
 8009480:	f000 fbe8 	bl	8009c54 <__i2b>
 8009484:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009486:	0006      	movs	r6, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d100      	bne.n	800948e <_dtoa_r+0x81e>
 800948c:	e1bc      	b.n	8009808 <_dtoa_r+0xb98>
 800948e:	001a      	movs	r2, r3
 8009490:	0001      	movs	r1, r0
 8009492:	9803      	ldr	r0, [sp, #12]
 8009494:	f000 fca0 	bl	8009dd8 <__pow5mult>
 8009498:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800949a:	0006      	movs	r6, r0
 800949c:	2500      	movs	r5, #0
 800949e:	2b01      	cmp	r3, #1
 80094a0:	dc16      	bgt.n	80094d0 <_dtoa_r+0x860>
 80094a2:	2500      	movs	r5, #0
 80094a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094a6:	42ab      	cmp	r3, r5
 80094a8:	d10e      	bne.n	80094c8 <_dtoa_r+0x858>
 80094aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094ac:	031b      	lsls	r3, r3, #12
 80094ae:	42ab      	cmp	r3, r5
 80094b0:	d10a      	bne.n	80094c8 <_dtoa_r+0x858>
 80094b2:	4b8d      	ldr	r3, [pc, #564]	@ (80096e8 <_dtoa_r+0xa78>)
 80094b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80094b6:	4213      	tst	r3, r2
 80094b8:	d006      	beq.n	80094c8 <_dtoa_r+0x858>
 80094ba:	9b06      	ldr	r3, [sp, #24]
 80094bc:	3501      	adds	r5, #1
 80094be:	3301      	adds	r3, #1
 80094c0:	9306      	str	r3, [sp, #24]
 80094c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094c4:	3301      	adds	r3, #1
 80094c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80094c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094ca:	2001      	movs	r0, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d008      	beq.n	80094e2 <_dtoa_r+0x872>
 80094d0:	6933      	ldr	r3, [r6, #16]
 80094d2:	3303      	adds	r3, #3
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	18f3      	adds	r3, r6, r3
 80094d8:	6858      	ldr	r0, [r3, #4]
 80094da:	f000 fb6b 	bl	8009bb4 <__hi0bits>
 80094de:	2320      	movs	r3, #32
 80094e0:	1a18      	subs	r0, r3, r0
 80094e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094e4:	1818      	adds	r0, r3, r0
 80094e6:	0002      	movs	r2, r0
 80094e8:	231f      	movs	r3, #31
 80094ea:	401a      	ands	r2, r3
 80094ec:	4218      	tst	r0, r3
 80094ee:	d100      	bne.n	80094f2 <_dtoa_r+0x882>
 80094f0:	e081      	b.n	80095f6 <_dtoa_r+0x986>
 80094f2:	3301      	adds	r3, #1
 80094f4:	1a9b      	subs	r3, r3, r2
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	dd79      	ble.n	80095ee <_dtoa_r+0x97e>
 80094fa:	231c      	movs	r3, #28
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	9a06      	ldr	r2, [sp, #24]
 8009500:	18e4      	adds	r4, r4, r3
 8009502:	18d2      	adds	r2, r2, r3
 8009504:	9206      	str	r2, [sp, #24]
 8009506:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009508:	18d3      	adds	r3, r2, r3
 800950a:	930d      	str	r3, [sp, #52]	@ 0x34
 800950c:	9b06      	ldr	r3, [sp, #24]
 800950e:	2b00      	cmp	r3, #0
 8009510:	dd05      	ble.n	800951e <_dtoa_r+0x8ae>
 8009512:	001a      	movs	r2, r3
 8009514:	9905      	ldr	r1, [sp, #20]
 8009516:	9803      	ldr	r0, [sp, #12]
 8009518:	f000 fcba 	bl	8009e90 <__lshift>
 800951c:	9005      	str	r0, [sp, #20]
 800951e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009520:	2b00      	cmp	r3, #0
 8009522:	dd05      	ble.n	8009530 <_dtoa_r+0x8c0>
 8009524:	0031      	movs	r1, r6
 8009526:	001a      	movs	r2, r3
 8009528:	9803      	ldr	r0, [sp, #12]
 800952a:	f000 fcb1 	bl	8009e90 <__lshift>
 800952e:	0006      	movs	r6, r0
 8009530:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009532:	2b00      	cmp	r3, #0
 8009534:	d061      	beq.n	80095fa <_dtoa_r+0x98a>
 8009536:	0031      	movs	r1, r6
 8009538:	9805      	ldr	r0, [sp, #20]
 800953a:	f000 fd15 	bl	8009f68 <__mcmp>
 800953e:	2800      	cmp	r0, #0
 8009540:	da5b      	bge.n	80095fa <_dtoa_r+0x98a>
 8009542:	9b04      	ldr	r3, [sp, #16]
 8009544:	220a      	movs	r2, #10
 8009546:	3b01      	subs	r3, #1
 8009548:	930c      	str	r3, [sp, #48]	@ 0x30
 800954a:	9905      	ldr	r1, [sp, #20]
 800954c:	2300      	movs	r3, #0
 800954e:	9803      	ldr	r0, [sp, #12]
 8009550:	f000 faec 	bl	8009b2c <__multadd>
 8009554:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009556:	9005      	str	r0, [sp, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d100      	bne.n	800955e <_dtoa_r+0x8ee>
 800955c:	e15b      	b.n	8009816 <_dtoa_r+0xba6>
 800955e:	2300      	movs	r3, #0
 8009560:	0039      	movs	r1, r7
 8009562:	220a      	movs	r2, #10
 8009564:	9803      	ldr	r0, [sp, #12]
 8009566:	f000 fae1 	bl	8009b2c <__multadd>
 800956a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800956c:	0007      	movs	r7, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	dc4d      	bgt.n	800960e <_dtoa_r+0x99e>
 8009572:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009574:	2b02      	cmp	r3, #2
 8009576:	dd46      	ble.n	8009606 <_dtoa_r+0x996>
 8009578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800957a:	2b00      	cmp	r3, #0
 800957c:	d000      	beq.n	8009580 <_dtoa_r+0x910>
 800957e:	e5db      	b.n	8009138 <_dtoa_r+0x4c8>
 8009580:	0031      	movs	r1, r6
 8009582:	2205      	movs	r2, #5
 8009584:	9803      	ldr	r0, [sp, #12]
 8009586:	f000 fad1 	bl	8009b2c <__multadd>
 800958a:	0006      	movs	r6, r0
 800958c:	0001      	movs	r1, r0
 800958e:	9805      	ldr	r0, [sp, #20]
 8009590:	f000 fcea 	bl	8009f68 <__mcmp>
 8009594:	2800      	cmp	r0, #0
 8009596:	dc00      	bgt.n	800959a <_dtoa_r+0x92a>
 8009598:	e5ce      	b.n	8009138 <_dtoa_r+0x4c8>
 800959a:	9b08      	ldr	r3, [sp, #32]
 800959c:	9a08      	ldr	r2, [sp, #32]
 800959e:	1c5c      	adds	r4, r3, #1
 80095a0:	2331      	movs	r3, #49	@ 0x31
 80095a2:	7013      	strb	r3, [r2, #0]
 80095a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095a6:	3301      	adds	r3, #1
 80095a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80095aa:	e5c9      	b.n	8009140 <_dtoa_r+0x4d0>
 80095ac:	2336      	movs	r3, #54	@ 0x36
 80095ae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095b0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	9c06      	ldr	r4, [sp, #24]
 80095b6:	e720      	b.n	80093fa <_dtoa_r+0x78a>
 80095b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ba:	1e5d      	subs	r5, r3, #1
 80095bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095be:	42ab      	cmp	r3, r5
 80095c0:	db08      	blt.n	80095d4 <_dtoa_r+0x964>
 80095c2:	1b5d      	subs	r5, r3, r5
 80095c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	daf4      	bge.n	80095b4 <_dtoa_r+0x944>
 80095ca:	9b06      	ldr	r3, [sp, #24]
 80095cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095ce:	1a9c      	subs	r4, r3, r2
 80095d0:	2300      	movs	r3, #0
 80095d2:	e712      	b.n	80093fa <_dtoa_r+0x78a>
 80095d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80095d8:	1aeb      	subs	r3, r5, r3
 80095da:	18d3      	adds	r3, r2, r3
 80095dc:	9314      	str	r3, [sp, #80]	@ 0x50
 80095de:	950f      	str	r5, [sp, #60]	@ 0x3c
 80095e0:	9c06      	ldr	r4, [sp, #24]
 80095e2:	2500      	movs	r5, #0
 80095e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e6:	e708      	b.n	80093fa <_dtoa_r+0x78a>
 80095e8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80095ea:	9905      	ldr	r1, [sp, #20]
 80095ec:	e742      	b.n	8009474 <_dtoa_r+0x804>
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d08c      	beq.n	800950c <_dtoa_r+0x89c>
 80095f2:	331c      	adds	r3, #28
 80095f4:	e783      	b.n	80094fe <_dtoa_r+0x88e>
 80095f6:	0013      	movs	r3, r2
 80095f8:	e7fb      	b.n	80095f2 <_dtoa_r+0x982>
 80095fa:	9b04      	ldr	r3, [sp, #16]
 80095fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80095fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009600:	930e      	str	r3, [sp, #56]	@ 0x38
 8009602:	2b00      	cmp	r3, #0
 8009604:	ddb5      	ble.n	8009572 <_dtoa_r+0x902>
 8009606:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009608:	2b00      	cmp	r3, #0
 800960a:	d100      	bne.n	800960e <_dtoa_r+0x99e>
 800960c:	e107      	b.n	800981e <_dtoa_r+0xbae>
 800960e:	2c00      	cmp	r4, #0
 8009610:	dd05      	ble.n	800961e <_dtoa_r+0x9ae>
 8009612:	0039      	movs	r1, r7
 8009614:	0022      	movs	r2, r4
 8009616:	9803      	ldr	r0, [sp, #12]
 8009618:	f000 fc3a 	bl	8009e90 <__lshift>
 800961c:	0007      	movs	r7, r0
 800961e:	9704      	str	r7, [sp, #16]
 8009620:	2d00      	cmp	r5, #0
 8009622:	d020      	beq.n	8009666 <_dtoa_r+0x9f6>
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	9803      	ldr	r0, [sp, #12]
 8009628:	f000 fa18 	bl	8009a5c <_Balloc>
 800962c:	1e04      	subs	r4, r0, #0
 800962e:	d10c      	bne.n	800964a <_dtoa_r+0x9da>
 8009630:	0022      	movs	r2, r4
 8009632:	4b2e      	ldr	r3, [pc, #184]	@ (80096ec <_dtoa_r+0xa7c>)
 8009634:	482e      	ldr	r0, [pc, #184]	@ (80096f0 <_dtoa_r+0xa80>)
 8009636:	492f      	ldr	r1, [pc, #188]	@ (80096f4 <_dtoa_r+0xa84>)
 8009638:	f7ff fb2f 	bl	8008c9a <_dtoa_r+0x2a>
 800963c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800963e:	0037      	movs	r7, r6
 8009640:	e7ab      	b.n	800959a <_dtoa_r+0x92a>
 8009642:	9b04      	ldr	r3, [sp, #16]
 8009644:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009646:	930c      	str	r3, [sp, #48]	@ 0x30
 8009648:	e7f9      	b.n	800963e <_dtoa_r+0x9ce>
 800964a:	0039      	movs	r1, r7
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	310c      	adds	r1, #12
 8009650:	3202      	adds	r2, #2
 8009652:	0092      	lsls	r2, r2, #2
 8009654:	300c      	adds	r0, #12
 8009656:	f000 ffd1 	bl	800a5fc <memcpy>
 800965a:	2201      	movs	r2, #1
 800965c:	0021      	movs	r1, r4
 800965e:	9803      	ldr	r0, [sp, #12]
 8009660:	f000 fc16 	bl	8009e90 <__lshift>
 8009664:	9004      	str	r0, [sp, #16]
 8009666:	9b08      	ldr	r3, [sp, #32]
 8009668:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800966a:	9306      	str	r3, [sp, #24]
 800966c:	3b01      	subs	r3, #1
 800966e:	189b      	adds	r3, r3, r2
 8009670:	2201      	movs	r2, #1
 8009672:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009676:	4013      	ands	r3, r2
 8009678:	930e      	str	r3, [sp, #56]	@ 0x38
 800967a:	0031      	movs	r1, r6
 800967c:	9805      	ldr	r0, [sp, #20]
 800967e:	f7ff fa71 	bl	8008b64 <quorem>
 8009682:	0039      	movs	r1, r7
 8009684:	0005      	movs	r5, r0
 8009686:	900a      	str	r0, [sp, #40]	@ 0x28
 8009688:	9805      	ldr	r0, [sp, #20]
 800968a:	f000 fc6d 	bl	8009f68 <__mcmp>
 800968e:	9a04      	ldr	r2, [sp, #16]
 8009690:	900d      	str	r0, [sp, #52]	@ 0x34
 8009692:	0031      	movs	r1, r6
 8009694:	9803      	ldr	r0, [sp, #12]
 8009696:	f000 fc83 	bl	8009fa0 <__mdiff>
 800969a:	2201      	movs	r2, #1
 800969c:	68c3      	ldr	r3, [r0, #12]
 800969e:	0004      	movs	r4, r0
 80096a0:	3530      	adds	r5, #48	@ 0x30
 80096a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d104      	bne.n	80096b2 <_dtoa_r+0xa42>
 80096a8:	0001      	movs	r1, r0
 80096aa:	9805      	ldr	r0, [sp, #20]
 80096ac:	f000 fc5c 	bl	8009f68 <__mcmp>
 80096b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80096b2:	0021      	movs	r1, r4
 80096b4:	9803      	ldr	r0, [sp, #12]
 80096b6:	f000 fa15 	bl	8009ae4 <_Bfree>
 80096ba:	9b06      	ldr	r3, [sp, #24]
 80096bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80096be:	1c5c      	adds	r4, r3, #1
 80096c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096c2:	4313      	orrs	r3, r2
 80096c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096c6:	4313      	orrs	r3, r2
 80096c8:	d116      	bne.n	80096f8 <_dtoa_r+0xa88>
 80096ca:	2d39      	cmp	r5, #57	@ 0x39
 80096cc:	d02f      	beq.n	800972e <_dtoa_r+0xabe>
 80096ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dd01      	ble.n	80096d8 <_dtoa_r+0xa68>
 80096d4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80096d6:	3531      	adds	r5, #49	@ 0x31
 80096d8:	9b06      	ldr	r3, [sp, #24]
 80096da:	701d      	strb	r5, [r3, #0]
 80096dc:	e532      	b.n	8009144 <_dtoa_r+0x4d4>
 80096de:	46c0      	nop			@ (mov r8, r8)
 80096e0:	40240000 	.word	0x40240000
 80096e4:	00000433 	.word	0x00000433
 80096e8:	7ff00000 	.word	0x7ff00000
 80096ec:	0800afbc 	.word	0x0800afbc
 80096f0:	0800af64 	.word	0x0800af64
 80096f4:	000002ef 	.word	0x000002ef
 80096f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	db04      	blt.n	8009708 <_dtoa_r+0xa98>
 80096fe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009700:	4313      	orrs	r3, r2
 8009702:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009704:	4313      	orrs	r3, r2
 8009706:	d11e      	bne.n	8009746 <_dtoa_r+0xad6>
 8009708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970a:	2b00      	cmp	r3, #0
 800970c:	dde4      	ble.n	80096d8 <_dtoa_r+0xa68>
 800970e:	9905      	ldr	r1, [sp, #20]
 8009710:	2201      	movs	r2, #1
 8009712:	9803      	ldr	r0, [sp, #12]
 8009714:	f000 fbbc 	bl	8009e90 <__lshift>
 8009718:	0031      	movs	r1, r6
 800971a:	9005      	str	r0, [sp, #20]
 800971c:	f000 fc24 	bl	8009f68 <__mcmp>
 8009720:	2800      	cmp	r0, #0
 8009722:	dc02      	bgt.n	800972a <_dtoa_r+0xaba>
 8009724:	d1d8      	bne.n	80096d8 <_dtoa_r+0xa68>
 8009726:	07eb      	lsls	r3, r5, #31
 8009728:	d5d6      	bpl.n	80096d8 <_dtoa_r+0xa68>
 800972a:	2d39      	cmp	r5, #57	@ 0x39
 800972c:	d1d2      	bne.n	80096d4 <_dtoa_r+0xa64>
 800972e:	2339      	movs	r3, #57	@ 0x39
 8009730:	9a06      	ldr	r2, [sp, #24]
 8009732:	7013      	strb	r3, [r2, #0]
 8009734:	0023      	movs	r3, r4
 8009736:	001c      	movs	r4, r3
 8009738:	3b01      	subs	r3, #1
 800973a:	781a      	ldrb	r2, [r3, #0]
 800973c:	2a39      	cmp	r2, #57	@ 0x39
 800973e:	d050      	beq.n	80097e2 <_dtoa_r+0xb72>
 8009740:	3201      	adds	r2, #1
 8009742:	701a      	strb	r2, [r3, #0]
 8009744:	e4fe      	b.n	8009144 <_dtoa_r+0x4d4>
 8009746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009748:	2b00      	cmp	r3, #0
 800974a:	dd03      	ble.n	8009754 <_dtoa_r+0xae4>
 800974c:	2d39      	cmp	r5, #57	@ 0x39
 800974e:	d0ee      	beq.n	800972e <_dtoa_r+0xabe>
 8009750:	3501      	adds	r5, #1
 8009752:	e7c1      	b.n	80096d8 <_dtoa_r+0xa68>
 8009754:	9b06      	ldr	r3, [sp, #24]
 8009756:	9a06      	ldr	r2, [sp, #24]
 8009758:	701d      	strb	r5, [r3, #0]
 800975a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800975c:	4293      	cmp	r3, r2
 800975e:	d02b      	beq.n	80097b8 <_dtoa_r+0xb48>
 8009760:	2300      	movs	r3, #0
 8009762:	220a      	movs	r2, #10
 8009764:	9905      	ldr	r1, [sp, #20]
 8009766:	9803      	ldr	r0, [sp, #12]
 8009768:	f000 f9e0 	bl	8009b2c <__multadd>
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	9005      	str	r0, [sp, #20]
 8009770:	429f      	cmp	r7, r3
 8009772:	d109      	bne.n	8009788 <_dtoa_r+0xb18>
 8009774:	0039      	movs	r1, r7
 8009776:	2300      	movs	r3, #0
 8009778:	220a      	movs	r2, #10
 800977a:	9803      	ldr	r0, [sp, #12]
 800977c:	f000 f9d6 	bl	8009b2c <__multadd>
 8009780:	0007      	movs	r7, r0
 8009782:	9004      	str	r0, [sp, #16]
 8009784:	9406      	str	r4, [sp, #24]
 8009786:	e778      	b.n	800967a <_dtoa_r+0xa0a>
 8009788:	0039      	movs	r1, r7
 800978a:	2300      	movs	r3, #0
 800978c:	220a      	movs	r2, #10
 800978e:	9803      	ldr	r0, [sp, #12]
 8009790:	f000 f9cc 	bl	8009b2c <__multadd>
 8009794:	2300      	movs	r3, #0
 8009796:	0007      	movs	r7, r0
 8009798:	220a      	movs	r2, #10
 800979a:	9904      	ldr	r1, [sp, #16]
 800979c:	9803      	ldr	r0, [sp, #12]
 800979e:	f000 f9c5 	bl	8009b2c <__multadd>
 80097a2:	9004      	str	r0, [sp, #16]
 80097a4:	e7ee      	b.n	8009784 <_dtoa_r+0xb14>
 80097a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097a8:	2401      	movs	r4, #1
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dd00      	ble.n	80097b0 <_dtoa_r+0xb40>
 80097ae:	001c      	movs	r4, r3
 80097b0:	9704      	str	r7, [sp, #16]
 80097b2:	2700      	movs	r7, #0
 80097b4:	9b08      	ldr	r3, [sp, #32]
 80097b6:	191c      	adds	r4, r3, r4
 80097b8:	9905      	ldr	r1, [sp, #20]
 80097ba:	2201      	movs	r2, #1
 80097bc:	9803      	ldr	r0, [sp, #12]
 80097be:	f000 fb67 	bl	8009e90 <__lshift>
 80097c2:	0031      	movs	r1, r6
 80097c4:	9005      	str	r0, [sp, #20]
 80097c6:	f000 fbcf 	bl	8009f68 <__mcmp>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	dcb2      	bgt.n	8009734 <_dtoa_r+0xac4>
 80097ce:	d101      	bne.n	80097d4 <_dtoa_r+0xb64>
 80097d0:	07ed      	lsls	r5, r5, #31
 80097d2:	d4af      	bmi.n	8009734 <_dtoa_r+0xac4>
 80097d4:	0023      	movs	r3, r4
 80097d6:	001c      	movs	r4, r3
 80097d8:	3b01      	subs	r3, #1
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	2a30      	cmp	r2, #48	@ 0x30
 80097de:	d0fa      	beq.n	80097d6 <_dtoa_r+0xb66>
 80097e0:	e4b0      	b.n	8009144 <_dtoa_r+0x4d4>
 80097e2:	9a08      	ldr	r2, [sp, #32]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d1a6      	bne.n	8009736 <_dtoa_r+0xac6>
 80097e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097ea:	3301      	adds	r3, #1
 80097ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80097ee:	2331      	movs	r3, #49	@ 0x31
 80097f0:	7013      	strb	r3, [r2, #0]
 80097f2:	e4a7      	b.n	8009144 <_dtoa_r+0x4d4>
 80097f4:	4b14      	ldr	r3, [pc, #80]	@ (8009848 <_dtoa_r+0xbd8>)
 80097f6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80097f8:	9308      	str	r3, [sp, #32]
 80097fa:	4b14      	ldr	r3, [pc, #80]	@ (800984c <_dtoa_r+0xbdc>)
 80097fc:	2a00      	cmp	r2, #0
 80097fe:	d001      	beq.n	8009804 <_dtoa_r+0xb94>
 8009800:	f7ff fa7e 	bl	8008d00 <_dtoa_r+0x90>
 8009804:	f7ff fa7e 	bl	8008d04 <_dtoa_r+0x94>
 8009808:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800980a:	2b01      	cmp	r3, #1
 800980c:	dc00      	bgt.n	8009810 <_dtoa_r+0xba0>
 800980e:	e648      	b.n	80094a2 <_dtoa_r+0x832>
 8009810:	2001      	movs	r0, #1
 8009812:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009814:	e665      	b.n	80094e2 <_dtoa_r+0x872>
 8009816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009818:	2b00      	cmp	r3, #0
 800981a:	dc00      	bgt.n	800981e <_dtoa_r+0xbae>
 800981c:	e6a9      	b.n	8009572 <_dtoa_r+0x902>
 800981e:	2400      	movs	r4, #0
 8009820:	0031      	movs	r1, r6
 8009822:	9805      	ldr	r0, [sp, #20]
 8009824:	f7ff f99e 	bl	8008b64 <quorem>
 8009828:	9b08      	ldr	r3, [sp, #32]
 800982a:	3030      	adds	r0, #48	@ 0x30
 800982c:	5518      	strb	r0, [r3, r4]
 800982e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009830:	3401      	adds	r4, #1
 8009832:	0005      	movs	r5, r0
 8009834:	42a3      	cmp	r3, r4
 8009836:	ddb6      	ble.n	80097a6 <_dtoa_r+0xb36>
 8009838:	2300      	movs	r3, #0
 800983a:	220a      	movs	r2, #10
 800983c:	9905      	ldr	r1, [sp, #20]
 800983e:	9803      	ldr	r0, [sp, #12]
 8009840:	f000 f974 	bl	8009b2c <__multadd>
 8009844:	9005      	str	r0, [sp, #20]
 8009846:	e7eb      	b.n	8009820 <_dtoa_r+0xbb0>
 8009848:	0800af40 	.word	0x0800af40
 800984c:	0800af48 	.word	0x0800af48

08009850 <_free_r>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	0005      	movs	r5, r0
 8009854:	1e0c      	subs	r4, r1, #0
 8009856:	d010      	beq.n	800987a <_free_r+0x2a>
 8009858:	3c04      	subs	r4, #4
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	da00      	bge.n	8009862 <_free_r+0x12>
 8009860:	18e4      	adds	r4, r4, r3
 8009862:	0028      	movs	r0, r5
 8009864:	f000 f8ea 	bl	8009a3c <__malloc_lock>
 8009868:	4a1d      	ldr	r2, [pc, #116]	@ (80098e0 <_free_r+0x90>)
 800986a:	6813      	ldr	r3, [r2, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d105      	bne.n	800987c <_free_r+0x2c>
 8009870:	6063      	str	r3, [r4, #4]
 8009872:	6014      	str	r4, [r2, #0]
 8009874:	0028      	movs	r0, r5
 8009876:	f000 f8e9 	bl	8009a4c <__malloc_unlock>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	42a3      	cmp	r3, r4
 800987e:	d908      	bls.n	8009892 <_free_r+0x42>
 8009880:	6820      	ldr	r0, [r4, #0]
 8009882:	1821      	adds	r1, r4, r0
 8009884:	428b      	cmp	r3, r1
 8009886:	d1f3      	bne.n	8009870 <_free_r+0x20>
 8009888:	6819      	ldr	r1, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	1809      	adds	r1, r1, r0
 800988e:	6021      	str	r1, [r4, #0]
 8009890:	e7ee      	b.n	8009870 <_free_r+0x20>
 8009892:	001a      	movs	r2, r3
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <_free_r+0x4e>
 800989a:	42a3      	cmp	r3, r4
 800989c:	d9f9      	bls.n	8009892 <_free_r+0x42>
 800989e:	6811      	ldr	r1, [r2, #0]
 80098a0:	1850      	adds	r0, r2, r1
 80098a2:	42a0      	cmp	r0, r4
 80098a4:	d10b      	bne.n	80098be <_free_r+0x6e>
 80098a6:	6820      	ldr	r0, [r4, #0]
 80098a8:	1809      	adds	r1, r1, r0
 80098aa:	1850      	adds	r0, r2, r1
 80098ac:	6011      	str	r1, [r2, #0]
 80098ae:	4283      	cmp	r3, r0
 80098b0:	d1e0      	bne.n	8009874 <_free_r+0x24>
 80098b2:	6818      	ldr	r0, [r3, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	1841      	adds	r1, r0, r1
 80098b8:	6011      	str	r1, [r2, #0]
 80098ba:	6053      	str	r3, [r2, #4]
 80098bc:	e7da      	b.n	8009874 <_free_r+0x24>
 80098be:	42a0      	cmp	r0, r4
 80098c0:	d902      	bls.n	80098c8 <_free_r+0x78>
 80098c2:	230c      	movs	r3, #12
 80098c4:	602b      	str	r3, [r5, #0]
 80098c6:	e7d5      	b.n	8009874 <_free_r+0x24>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	1821      	adds	r1, r4, r0
 80098cc:	428b      	cmp	r3, r1
 80098ce:	d103      	bne.n	80098d8 <_free_r+0x88>
 80098d0:	6819      	ldr	r1, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	1809      	adds	r1, r1, r0
 80098d6:	6021      	str	r1, [r4, #0]
 80098d8:	6063      	str	r3, [r4, #4]
 80098da:	6054      	str	r4, [r2, #4]
 80098dc:	e7ca      	b.n	8009874 <_free_r+0x24>
 80098de:	46c0      	nop			@ (mov r8, r8)
 80098e0:	20000524 	.word	0x20000524

080098e4 <malloc>:
 80098e4:	b510      	push	{r4, lr}
 80098e6:	4b03      	ldr	r3, [pc, #12]	@ (80098f4 <malloc+0x10>)
 80098e8:	0001      	movs	r1, r0
 80098ea:	6818      	ldr	r0, [r3, #0]
 80098ec:	f000 f826 	bl	800993c <_malloc_r>
 80098f0:	bd10      	pop	{r4, pc}
 80098f2:	46c0      	nop			@ (mov r8, r8)
 80098f4:	20000024 	.word	0x20000024

080098f8 <sbrk_aligned>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	4e0f      	ldr	r6, [pc, #60]	@ (8009938 <sbrk_aligned+0x40>)
 80098fc:	000d      	movs	r5, r1
 80098fe:	6831      	ldr	r1, [r6, #0]
 8009900:	0004      	movs	r4, r0
 8009902:	2900      	cmp	r1, #0
 8009904:	d102      	bne.n	800990c <sbrk_aligned+0x14>
 8009906:	f000 fe67 	bl	800a5d8 <_sbrk_r>
 800990a:	6030      	str	r0, [r6, #0]
 800990c:	0029      	movs	r1, r5
 800990e:	0020      	movs	r0, r4
 8009910:	f000 fe62 	bl	800a5d8 <_sbrk_r>
 8009914:	1c43      	adds	r3, r0, #1
 8009916:	d103      	bne.n	8009920 <sbrk_aligned+0x28>
 8009918:	2501      	movs	r5, #1
 800991a:	426d      	negs	r5, r5
 800991c:	0028      	movs	r0, r5
 800991e:	bd70      	pop	{r4, r5, r6, pc}
 8009920:	2303      	movs	r3, #3
 8009922:	1cc5      	adds	r5, r0, #3
 8009924:	439d      	bics	r5, r3
 8009926:	42a8      	cmp	r0, r5
 8009928:	d0f8      	beq.n	800991c <sbrk_aligned+0x24>
 800992a:	1a29      	subs	r1, r5, r0
 800992c:	0020      	movs	r0, r4
 800992e:	f000 fe53 	bl	800a5d8 <_sbrk_r>
 8009932:	3001      	adds	r0, #1
 8009934:	d1f2      	bne.n	800991c <sbrk_aligned+0x24>
 8009936:	e7ef      	b.n	8009918 <sbrk_aligned+0x20>
 8009938:	20000520 	.word	0x20000520

0800993c <_malloc_r>:
 800993c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800993e:	2203      	movs	r2, #3
 8009940:	1ccb      	adds	r3, r1, #3
 8009942:	4393      	bics	r3, r2
 8009944:	3308      	adds	r3, #8
 8009946:	0005      	movs	r5, r0
 8009948:	001f      	movs	r7, r3
 800994a:	2b0c      	cmp	r3, #12
 800994c:	d234      	bcs.n	80099b8 <_malloc_r+0x7c>
 800994e:	270c      	movs	r7, #12
 8009950:	42b9      	cmp	r1, r7
 8009952:	d833      	bhi.n	80099bc <_malloc_r+0x80>
 8009954:	0028      	movs	r0, r5
 8009956:	f000 f871 	bl	8009a3c <__malloc_lock>
 800995a:	4e37      	ldr	r6, [pc, #220]	@ (8009a38 <_malloc_r+0xfc>)
 800995c:	6833      	ldr	r3, [r6, #0]
 800995e:	001c      	movs	r4, r3
 8009960:	2c00      	cmp	r4, #0
 8009962:	d12f      	bne.n	80099c4 <_malloc_r+0x88>
 8009964:	0039      	movs	r1, r7
 8009966:	0028      	movs	r0, r5
 8009968:	f7ff ffc6 	bl	80098f8 <sbrk_aligned>
 800996c:	0004      	movs	r4, r0
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	d15f      	bne.n	8009a32 <_malloc_r+0xf6>
 8009972:	6834      	ldr	r4, [r6, #0]
 8009974:	9400      	str	r4, [sp, #0]
 8009976:	9b00      	ldr	r3, [sp, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d14a      	bne.n	8009a12 <_malloc_r+0xd6>
 800997c:	2c00      	cmp	r4, #0
 800997e:	d052      	beq.n	8009a26 <_malloc_r+0xea>
 8009980:	6823      	ldr	r3, [r4, #0]
 8009982:	0028      	movs	r0, r5
 8009984:	18e3      	adds	r3, r4, r3
 8009986:	9900      	ldr	r1, [sp, #0]
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	f000 fe25 	bl	800a5d8 <_sbrk_r>
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	4283      	cmp	r3, r0
 8009992:	d148      	bne.n	8009a26 <_malloc_r+0xea>
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	0028      	movs	r0, r5
 8009998:	1aff      	subs	r7, r7, r3
 800999a:	0039      	movs	r1, r7
 800999c:	f7ff ffac 	bl	80098f8 <sbrk_aligned>
 80099a0:	3001      	adds	r0, #1
 80099a2:	d040      	beq.n	8009a26 <_malloc_r+0xea>
 80099a4:	6823      	ldr	r3, [r4, #0]
 80099a6:	19db      	adds	r3, r3, r7
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	6833      	ldr	r3, [r6, #0]
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	2a00      	cmp	r2, #0
 80099b0:	d133      	bne.n	8009a1a <_malloc_r+0xde>
 80099b2:	9b00      	ldr	r3, [sp, #0]
 80099b4:	6033      	str	r3, [r6, #0]
 80099b6:	e019      	b.n	80099ec <_malloc_r+0xb0>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	dac9      	bge.n	8009950 <_malloc_r+0x14>
 80099bc:	230c      	movs	r3, #12
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	2000      	movs	r0, #0
 80099c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099c4:	6821      	ldr	r1, [r4, #0]
 80099c6:	1bc9      	subs	r1, r1, r7
 80099c8:	d420      	bmi.n	8009a0c <_malloc_r+0xd0>
 80099ca:	290b      	cmp	r1, #11
 80099cc:	d90a      	bls.n	80099e4 <_malloc_r+0xa8>
 80099ce:	19e2      	adds	r2, r4, r7
 80099d0:	6027      	str	r7, [r4, #0]
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	d104      	bne.n	80099e0 <_malloc_r+0xa4>
 80099d6:	6032      	str	r2, [r6, #0]
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	6011      	str	r1, [r2, #0]
 80099dc:	6053      	str	r3, [r2, #4]
 80099de:	e005      	b.n	80099ec <_malloc_r+0xb0>
 80099e0:	605a      	str	r2, [r3, #4]
 80099e2:	e7f9      	b.n	80099d8 <_malloc_r+0x9c>
 80099e4:	6862      	ldr	r2, [r4, #4]
 80099e6:	42a3      	cmp	r3, r4
 80099e8:	d10e      	bne.n	8009a08 <_malloc_r+0xcc>
 80099ea:	6032      	str	r2, [r6, #0]
 80099ec:	0028      	movs	r0, r5
 80099ee:	f000 f82d 	bl	8009a4c <__malloc_unlock>
 80099f2:	0020      	movs	r0, r4
 80099f4:	2207      	movs	r2, #7
 80099f6:	300b      	adds	r0, #11
 80099f8:	1d23      	adds	r3, r4, #4
 80099fa:	4390      	bics	r0, r2
 80099fc:	1ac2      	subs	r2, r0, r3
 80099fe:	4298      	cmp	r0, r3
 8009a00:	d0df      	beq.n	80099c2 <_malloc_r+0x86>
 8009a02:	1a1b      	subs	r3, r3, r0
 8009a04:	50a3      	str	r3, [r4, r2]
 8009a06:	e7dc      	b.n	80099c2 <_malloc_r+0x86>
 8009a08:	605a      	str	r2, [r3, #4]
 8009a0a:	e7ef      	b.n	80099ec <_malloc_r+0xb0>
 8009a0c:	0023      	movs	r3, r4
 8009a0e:	6864      	ldr	r4, [r4, #4]
 8009a10:	e7a6      	b.n	8009960 <_malloc_r+0x24>
 8009a12:	9c00      	ldr	r4, [sp, #0]
 8009a14:	6863      	ldr	r3, [r4, #4]
 8009a16:	9300      	str	r3, [sp, #0]
 8009a18:	e7ad      	b.n	8009976 <_malloc_r+0x3a>
 8009a1a:	001a      	movs	r2, r3
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	42a3      	cmp	r3, r4
 8009a20:	d1fb      	bne.n	8009a1a <_malloc_r+0xde>
 8009a22:	2300      	movs	r3, #0
 8009a24:	e7da      	b.n	80099dc <_malloc_r+0xa0>
 8009a26:	230c      	movs	r3, #12
 8009a28:	0028      	movs	r0, r5
 8009a2a:	602b      	str	r3, [r5, #0]
 8009a2c:	f000 f80e 	bl	8009a4c <__malloc_unlock>
 8009a30:	e7c6      	b.n	80099c0 <_malloc_r+0x84>
 8009a32:	6007      	str	r7, [r0, #0]
 8009a34:	e7da      	b.n	80099ec <_malloc_r+0xb0>
 8009a36:	46c0      	nop			@ (mov r8, r8)
 8009a38:	20000524 	.word	0x20000524

08009a3c <__malloc_lock>:
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	4802      	ldr	r0, [pc, #8]	@ (8009a48 <__malloc_lock+0xc>)
 8009a40:	f7ff f883 	bl	8008b4a <__retarget_lock_acquire_recursive>
 8009a44:	bd10      	pop	{r4, pc}
 8009a46:	46c0      	nop			@ (mov r8, r8)
 8009a48:	2000051c 	.word	0x2000051c

08009a4c <__malloc_unlock>:
 8009a4c:	b510      	push	{r4, lr}
 8009a4e:	4802      	ldr	r0, [pc, #8]	@ (8009a58 <__malloc_unlock+0xc>)
 8009a50:	f7ff f87c 	bl	8008b4c <__retarget_lock_release_recursive>
 8009a54:	bd10      	pop	{r4, pc}
 8009a56:	46c0      	nop			@ (mov r8, r8)
 8009a58:	2000051c 	.word	0x2000051c

08009a5c <_Balloc>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	69c5      	ldr	r5, [r0, #28]
 8009a60:	0006      	movs	r6, r0
 8009a62:	000c      	movs	r4, r1
 8009a64:	2d00      	cmp	r5, #0
 8009a66:	d10e      	bne.n	8009a86 <_Balloc+0x2a>
 8009a68:	2010      	movs	r0, #16
 8009a6a:	f7ff ff3b 	bl	80098e4 <malloc>
 8009a6e:	1e02      	subs	r2, r0, #0
 8009a70:	61f0      	str	r0, [r6, #28]
 8009a72:	d104      	bne.n	8009a7e <_Balloc+0x22>
 8009a74:	216b      	movs	r1, #107	@ 0x6b
 8009a76:	4b19      	ldr	r3, [pc, #100]	@ (8009adc <_Balloc+0x80>)
 8009a78:	4819      	ldr	r0, [pc, #100]	@ (8009ae0 <_Balloc+0x84>)
 8009a7a:	f000 fdc9 	bl	800a610 <__assert_func>
 8009a7e:	6045      	str	r5, [r0, #4]
 8009a80:	6085      	str	r5, [r0, #8]
 8009a82:	6005      	str	r5, [r0, #0]
 8009a84:	60c5      	str	r5, [r0, #12]
 8009a86:	69f5      	ldr	r5, [r6, #28]
 8009a88:	68eb      	ldr	r3, [r5, #12]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d013      	beq.n	8009ab6 <_Balloc+0x5a>
 8009a8e:	69f3      	ldr	r3, [r6, #28]
 8009a90:	00a2      	lsls	r2, r4, #2
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	189b      	adds	r3, r3, r2
 8009a96:	6818      	ldr	r0, [r3, #0]
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	d118      	bne.n	8009ace <_Balloc+0x72>
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	000d      	movs	r5, r1
 8009aa0:	40a5      	lsls	r5, r4
 8009aa2:	1d6a      	adds	r2, r5, #5
 8009aa4:	0030      	movs	r0, r6
 8009aa6:	0092      	lsls	r2, r2, #2
 8009aa8:	f000 fdd0 	bl	800a64c <_calloc_r>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d00c      	beq.n	8009aca <_Balloc+0x6e>
 8009ab0:	6044      	str	r4, [r0, #4]
 8009ab2:	6085      	str	r5, [r0, #8]
 8009ab4:	e00d      	b.n	8009ad2 <_Balloc+0x76>
 8009ab6:	2221      	movs	r2, #33	@ 0x21
 8009ab8:	2104      	movs	r1, #4
 8009aba:	0030      	movs	r0, r6
 8009abc:	f000 fdc6 	bl	800a64c <_calloc_r>
 8009ac0:	69f3      	ldr	r3, [r6, #28]
 8009ac2:	60e8      	str	r0, [r5, #12]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1e1      	bne.n	8009a8e <_Balloc+0x32>
 8009aca:	2000      	movs	r0, #0
 8009acc:	bd70      	pop	{r4, r5, r6, pc}
 8009ace:	6802      	ldr	r2, [r0, #0]
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	6103      	str	r3, [r0, #16]
 8009ad6:	60c3      	str	r3, [r0, #12]
 8009ad8:	e7f8      	b.n	8009acc <_Balloc+0x70>
 8009ada:	46c0      	nop			@ (mov r8, r8)
 8009adc:	0800af4d 	.word	0x0800af4d
 8009ae0:	0800afcd 	.word	0x0800afcd

08009ae4 <_Bfree>:
 8009ae4:	b570      	push	{r4, r5, r6, lr}
 8009ae6:	69c6      	ldr	r6, [r0, #28]
 8009ae8:	0005      	movs	r5, r0
 8009aea:	000c      	movs	r4, r1
 8009aec:	2e00      	cmp	r6, #0
 8009aee:	d10e      	bne.n	8009b0e <_Bfree+0x2a>
 8009af0:	2010      	movs	r0, #16
 8009af2:	f7ff fef7 	bl	80098e4 <malloc>
 8009af6:	1e02      	subs	r2, r0, #0
 8009af8:	61e8      	str	r0, [r5, #28]
 8009afa:	d104      	bne.n	8009b06 <_Bfree+0x22>
 8009afc:	218f      	movs	r1, #143	@ 0x8f
 8009afe:	4b09      	ldr	r3, [pc, #36]	@ (8009b24 <_Bfree+0x40>)
 8009b00:	4809      	ldr	r0, [pc, #36]	@ (8009b28 <_Bfree+0x44>)
 8009b02:	f000 fd85 	bl	800a610 <__assert_func>
 8009b06:	6046      	str	r6, [r0, #4]
 8009b08:	6086      	str	r6, [r0, #8]
 8009b0a:	6006      	str	r6, [r0, #0]
 8009b0c:	60c6      	str	r6, [r0, #12]
 8009b0e:	2c00      	cmp	r4, #0
 8009b10:	d007      	beq.n	8009b22 <_Bfree+0x3e>
 8009b12:	69eb      	ldr	r3, [r5, #28]
 8009b14:	6862      	ldr	r2, [r4, #4]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	0092      	lsls	r2, r2, #2
 8009b1a:	189b      	adds	r3, r3, r2
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	6022      	str	r2, [r4, #0]
 8009b20:	601c      	str	r4, [r3, #0]
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	0800af4d 	.word	0x0800af4d
 8009b28:	0800afcd 	.word	0x0800afcd

08009b2c <__multadd>:
 8009b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b2e:	000f      	movs	r7, r1
 8009b30:	9001      	str	r0, [sp, #4]
 8009b32:	000c      	movs	r4, r1
 8009b34:	001e      	movs	r6, r3
 8009b36:	2000      	movs	r0, #0
 8009b38:	690d      	ldr	r5, [r1, #16]
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	3001      	adds	r0, #1
 8009b40:	b299      	uxth	r1, r3
 8009b42:	4351      	muls	r1, r2
 8009b44:	0c1b      	lsrs	r3, r3, #16
 8009b46:	4353      	muls	r3, r2
 8009b48:	1989      	adds	r1, r1, r6
 8009b4a:	0c0e      	lsrs	r6, r1, #16
 8009b4c:	199b      	adds	r3, r3, r6
 8009b4e:	0c1e      	lsrs	r6, r3, #16
 8009b50:	b289      	uxth	r1, r1
 8009b52:	041b      	lsls	r3, r3, #16
 8009b54:	185b      	adds	r3, r3, r1
 8009b56:	c708      	stmia	r7!, {r3}
 8009b58:	4285      	cmp	r5, r0
 8009b5a:	dcef      	bgt.n	8009b3c <__multadd+0x10>
 8009b5c:	2e00      	cmp	r6, #0
 8009b5e:	d022      	beq.n	8009ba6 <__multadd+0x7a>
 8009b60:	68a3      	ldr	r3, [r4, #8]
 8009b62:	42ab      	cmp	r3, r5
 8009b64:	dc19      	bgt.n	8009b9a <__multadd+0x6e>
 8009b66:	6861      	ldr	r1, [r4, #4]
 8009b68:	9801      	ldr	r0, [sp, #4]
 8009b6a:	3101      	adds	r1, #1
 8009b6c:	f7ff ff76 	bl	8009a5c <_Balloc>
 8009b70:	1e07      	subs	r7, r0, #0
 8009b72:	d105      	bne.n	8009b80 <__multadd+0x54>
 8009b74:	003a      	movs	r2, r7
 8009b76:	21ba      	movs	r1, #186	@ 0xba
 8009b78:	4b0c      	ldr	r3, [pc, #48]	@ (8009bac <__multadd+0x80>)
 8009b7a:	480d      	ldr	r0, [pc, #52]	@ (8009bb0 <__multadd+0x84>)
 8009b7c:	f000 fd48 	bl	800a610 <__assert_func>
 8009b80:	0021      	movs	r1, r4
 8009b82:	6922      	ldr	r2, [r4, #16]
 8009b84:	310c      	adds	r1, #12
 8009b86:	3202      	adds	r2, #2
 8009b88:	0092      	lsls	r2, r2, #2
 8009b8a:	300c      	adds	r0, #12
 8009b8c:	f000 fd36 	bl	800a5fc <memcpy>
 8009b90:	0021      	movs	r1, r4
 8009b92:	9801      	ldr	r0, [sp, #4]
 8009b94:	f7ff ffa6 	bl	8009ae4 <_Bfree>
 8009b98:	003c      	movs	r4, r7
 8009b9a:	1d2b      	adds	r3, r5, #4
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	18e3      	adds	r3, r4, r3
 8009ba0:	3501      	adds	r5, #1
 8009ba2:	605e      	str	r6, [r3, #4]
 8009ba4:	6125      	str	r5, [r4, #16]
 8009ba6:	0020      	movs	r0, r4
 8009ba8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009baa:	46c0      	nop			@ (mov r8, r8)
 8009bac:	0800afbc 	.word	0x0800afbc
 8009bb0:	0800afcd 	.word	0x0800afcd

08009bb4 <__hi0bits>:
 8009bb4:	2280      	movs	r2, #128	@ 0x80
 8009bb6:	0003      	movs	r3, r0
 8009bb8:	0252      	lsls	r2, r2, #9
 8009bba:	2000      	movs	r0, #0
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d201      	bcs.n	8009bc4 <__hi0bits+0x10>
 8009bc0:	041b      	lsls	r3, r3, #16
 8009bc2:	3010      	adds	r0, #16
 8009bc4:	2280      	movs	r2, #128	@ 0x80
 8009bc6:	0452      	lsls	r2, r2, #17
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d201      	bcs.n	8009bd0 <__hi0bits+0x1c>
 8009bcc:	3008      	adds	r0, #8
 8009bce:	021b      	lsls	r3, r3, #8
 8009bd0:	2280      	movs	r2, #128	@ 0x80
 8009bd2:	0552      	lsls	r2, r2, #21
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d201      	bcs.n	8009bdc <__hi0bits+0x28>
 8009bd8:	3004      	adds	r0, #4
 8009bda:	011b      	lsls	r3, r3, #4
 8009bdc:	2280      	movs	r2, #128	@ 0x80
 8009bde:	05d2      	lsls	r2, r2, #23
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d201      	bcs.n	8009be8 <__hi0bits+0x34>
 8009be4:	3002      	adds	r0, #2
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	db03      	blt.n	8009bf4 <__hi0bits+0x40>
 8009bec:	3001      	adds	r0, #1
 8009bee:	4213      	tst	r3, r2
 8009bf0:	d100      	bne.n	8009bf4 <__hi0bits+0x40>
 8009bf2:	2020      	movs	r0, #32
 8009bf4:	4770      	bx	lr

08009bf6 <__lo0bits>:
 8009bf6:	6803      	ldr	r3, [r0, #0]
 8009bf8:	0001      	movs	r1, r0
 8009bfa:	2207      	movs	r2, #7
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	4010      	ands	r0, r2
 8009c00:	4213      	tst	r3, r2
 8009c02:	d00d      	beq.n	8009c20 <__lo0bits+0x2a>
 8009c04:	3a06      	subs	r2, #6
 8009c06:	2000      	movs	r0, #0
 8009c08:	4213      	tst	r3, r2
 8009c0a:	d105      	bne.n	8009c18 <__lo0bits+0x22>
 8009c0c:	3002      	adds	r0, #2
 8009c0e:	4203      	tst	r3, r0
 8009c10:	d003      	beq.n	8009c1a <__lo0bits+0x24>
 8009c12:	40d3      	lsrs	r3, r2
 8009c14:	0010      	movs	r0, r2
 8009c16:	600b      	str	r3, [r1, #0]
 8009c18:	4770      	bx	lr
 8009c1a:	089b      	lsrs	r3, r3, #2
 8009c1c:	600b      	str	r3, [r1, #0]
 8009c1e:	e7fb      	b.n	8009c18 <__lo0bits+0x22>
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	2a00      	cmp	r2, #0
 8009c24:	d101      	bne.n	8009c2a <__lo0bits+0x34>
 8009c26:	2010      	movs	r0, #16
 8009c28:	0c1b      	lsrs	r3, r3, #16
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	2a00      	cmp	r2, #0
 8009c2e:	d101      	bne.n	8009c34 <__lo0bits+0x3e>
 8009c30:	3008      	adds	r0, #8
 8009c32:	0a1b      	lsrs	r3, r3, #8
 8009c34:	071a      	lsls	r2, r3, #28
 8009c36:	d101      	bne.n	8009c3c <__lo0bits+0x46>
 8009c38:	3004      	adds	r0, #4
 8009c3a:	091b      	lsrs	r3, r3, #4
 8009c3c:	079a      	lsls	r2, r3, #30
 8009c3e:	d101      	bne.n	8009c44 <__lo0bits+0x4e>
 8009c40:	3002      	adds	r0, #2
 8009c42:	089b      	lsrs	r3, r3, #2
 8009c44:	07da      	lsls	r2, r3, #31
 8009c46:	d4e9      	bmi.n	8009c1c <__lo0bits+0x26>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	085b      	lsrs	r3, r3, #1
 8009c4c:	d1e6      	bne.n	8009c1c <__lo0bits+0x26>
 8009c4e:	2020      	movs	r0, #32
 8009c50:	e7e2      	b.n	8009c18 <__lo0bits+0x22>
	...

08009c54 <__i2b>:
 8009c54:	b510      	push	{r4, lr}
 8009c56:	000c      	movs	r4, r1
 8009c58:	2101      	movs	r1, #1
 8009c5a:	f7ff feff 	bl	8009a5c <_Balloc>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d107      	bne.n	8009c72 <__i2b+0x1e>
 8009c62:	2146      	movs	r1, #70	@ 0x46
 8009c64:	4c05      	ldr	r4, [pc, #20]	@ (8009c7c <__i2b+0x28>)
 8009c66:	0002      	movs	r2, r0
 8009c68:	4b05      	ldr	r3, [pc, #20]	@ (8009c80 <__i2b+0x2c>)
 8009c6a:	0020      	movs	r0, r4
 8009c6c:	31ff      	adds	r1, #255	@ 0xff
 8009c6e:	f000 fccf 	bl	800a610 <__assert_func>
 8009c72:	2301      	movs	r3, #1
 8009c74:	6144      	str	r4, [r0, #20]
 8009c76:	6103      	str	r3, [r0, #16]
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	46c0      	nop			@ (mov r8, r8)
 8009c7c:	0800afcd 	.word	0x0800afcd
 8009c80:	0800afbc 	.word	0x0800afbc

08009c84 <__multiply>:
 8009c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c86:	0014      	movs	r4, r2
 8009c88:	690a      	ldr	r2, [r1, #16]
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	000d      	movs	r5, r1
 8009c8e:	b089      	sub	sp, #36	@ 0x24
 8009c90:	429a      	cmp	r2, r3
 8009c92:	db02      	blt.n	8009c9a <__multiply+0x16>
 8009c94:	0023      	movs	r3, r4
 8009c96:	000c      	movs	r4, r1
 8009c98:	001d      	movs	r5, r3
 8009c9a:	6927      	ldr	r7, [r4, #16]
 8009c9c:	692e      	ldr	r6, [r5, #16]
 8009c9e:	6861      	ldr	r1, [r4, #4]
 8009ca0:	19bb      	adds	r3, r7, r6
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	68a3      	ldr	r3, [r4, #8]
 8009ca6:	19ba      	adds	r2, r7, r6
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	da00      	bge.n	8009cae <__multiply+0x2a>
 8009cac:	3101      	adds	r1, #1
 8009cae:	f7ff fed5 	bl	8009a5c <_Balloc>
 8009cb2:	4684      	mov	ip, r0
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d106      	bne.n	8009cc6 <__multiply+0x42>
 8009cb8:	21b1      	movs	r1, #177	@ 0xb1
 8009cba:	4662      	mov	r2, ip
 8009cbc:	4b44      	ldr	r3, [pc, #272]	@ (8009dd0 <__multiply+0x14c>)
 8009cbe:	4845      	ldr	r0, [pc, #276]	@ (8009dd4 <__multiply+0x150>)
 8009cc0:	0049      	lsls	r1, r1, #1
 8009cc2:	f000 fca5 	bl	800a610 <__assert_func>
 8009cc6:	0002      	movs	r2, r0
 8009cc8:	19bb      	adds	r3, r7, r6
 8009cca:	3214      	adds	r2, #20
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	18d3      	adds	r3, r2, r3
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	0013      	movs	r3, r2
 8009cd6:	9801      	ldr	r0, [sp, #4]
 8009cd8:	4283      	cmp	r3, r0
 8009cda:	d328      	bcc.n	8009d2e <__multiply+0xaa>
 8009cdc:	0023      	movs	r3, r4
 8009cde:	00bf      	lsls	r7, r7, #2
 8009ce0:	3314      	adds	r3, #20
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	3514      	adds	r5, #20
 8009ce6:	19db      	adds	r3, r3, r7
 8009ce8:	00b6      	lsls	r6, r6, #2
 8009cea:	9302      	str	r3, [sp, #8]
 8009cec:	19ab      	adds	r3, r5, r6
 8009cee:	9307      	str	r3, [sp, #28]
 8009cf0:	2304      	movs	r3, #4
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	0023      	movs	r3, r4
 8009cf6:	9902      	ldr	r1, [sp, #8]
 8009cf8:	3315      	adds	r3, #21
 8009cfa:	4299      	cmp	r1, r3
 8009cfc:	d305      	bcc.n	8009d0a <__multiply+0x86>
 8009cfe:	1b0c      	subs	r4, r1, r4
 8009d00:	3c15      	subs	r4, #21
 8009d02:	08a4      	lsrs	r4, r4, #2
 8009d04:	3401      	adds	r4, #1
 8009d06:	00a3      	lsls	r3, r4, #2
 8009d08:	9305      	str	r3, [sp, #20]
 8009d0a:	9b07      	ldr	r3, [sp, #28]
 8009d0c:	429d      	cmp	r5, r3
 8009d0e:	d310      	bcc.n	8009d32 <__multiply+0xae>
 8009d10:	9b00      	ldr	r3, [sp, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	dd05      	ble.n	8009d22 <__multiply+0x9e>
 8009d16:	9b01      	ldr	r3, [sp, #4]
 8009d18:	3b04      	subs	r3, #4
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d052      	beq.n	8009dc8 <__multiply+0x144>
 8009d22:	4663      	mov	r3, ip
 8009d24:	4660      	mov	r0, ip
 8009d26:	9a00      	ldr	r2, [sp, #0]
 8009d28:	611a      	str	r2, [r3, #16]
 8009d2a:	b009      	add	sp, #36	@ 0x24
 8009d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d2e:	c302      	stmia	r3!, {r1}
 8009d30:	e7d1      	b.n	8009cd6 <__multiply+0x52>
 8009d32:	682c      	ldr	r4, [r5, #0]
 8009d34:	b2a4      	uxth	r4, r4
 8009d36:	2c00      	cmp	r4, #0
 8009d38:	d01f      	beq.n	8009d7a <__multiply+0xf6>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	0017      	movs	r7, r2
 8009d3e:	9e04      	ldr	r6, [sp, #16]
 8009d40:	9303      	str	r3, [sp, #12]
 8009d42:	ce08      	ldmia	r6!, {r3}
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	9306      	str	r3, [sp, #24]
 8009d48:	466b      	mov	r3, sp
 8009d4a:	8b1b      	ldrh	r3, [r3, #24]
 8009d4c:	b288      	uxth	r0, r1
 8009d4e:	4363      	muls	r3, r4
 8009d50:	181b      	adds	r3, r3, r0
 8009d52:	9803      	ldr	r0, [sp, #12]
 8009d54:	0c09      	lsrs	r1, r1, #16
 8009d56:	181b      	adds	r3, r3, r0
 8009d58:	9806      	ldr	r0, [sp, #24]
 8009d5a:	0c00      	lsrs	r0, r0, #16
 8009d5c:	4360      	muls	r0, r4
 8009d5e:	1840      	adds	r0, r0, r1
 8009d60:	0c19      	lsrs	r1, r3, #16
 8009d62:	1841      	adds	r1, r0, r1
 8009d64:	0c08      	lsrs	r0, r1, #16
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	0409      	lsls	r1, r1, #16
 8009d6a:	4319      	orrs	r1, r3
 8009d6c:	9b02      	ldr	r3, [sp, #8]
 8009d6e:	9003      	str	r0, [sp, #12]
 8009d70:	c702      	stmia	r7!, {r1}
 8009d72:	42b3      	cmp	r3, r6
 8009d74:	d8e5      	bhi.n	8009d42 <__multiply+0xbe>
 8009d76:	9b05      	ldr	r3, [sp, #20]
 8009d78:	50d0      	str	r0, [r2, r3]
 8009d7a:	682c      	ldr	r4, [r5, #0]
 8009d7c:	0c24      	lsrs	r4, r4, #16
 8009d7e:	d020      	beq.n	8009dc2 <__multiply+0x13e>
 8009d80:	2100      	movs	r1, #0
 8009d82:	0010      	movs	r0, r2
 8009d84:	6813      	ldr	r3, [r2, #0]
 8009d86:	9e04      	ldr	r6, [sp, #16]
 8009d88:	9103      	str	r1, [sp, #12]
 8009d8a:	6831      	ldr	r1, [r6, #0]
 8009d8c:	6807      	ldr	r7, [r0, #0]
 8009d8e:	b289      	uxth	r1, r1
 8009d90:	4361      	muls	r1, r4
 8009d92:	0c3f      	lsrs	r7, r7, #16
 8009d94:	19c9      	adds	r1, r1, r7
 8009d96:	9f03      	ldr	r7, [sp, #12]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	19c9      	adds	r1, r1, r7
 8009d9c:	040f      	lsls	r7, r1, #16
 8009d9e:	431f      	orrs	r7, r3
 8009da0:	6007      	str	r7, [r0, #0]
 8009da2:	ce80      	ldmia	r6!, {r7}
 8009da4:	6843      	ldr	r3, [r0, #4]
 8009da6:	0c3f      	lsrs	r7, r7, #16
 8009da8:	4367      	muls	r7, r4
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	0c09      	lsrs	r1, r1, #16
 8009dae:	18fb      	adds	r3, r7, r3
 8009db0:	185b      	adds	r3, r3, r1
 8009db2:	0c19      	lsrs	r1, r3, #16
 8009db4:	9103      	str	r1, [sp, #12]
 8009db6:	9902      	ldr	r1, [sp, #8]
 8009db8:	3004      	adds	r0, #4
 8009dba:	42b1      	cmp	r1, r6
 8009dbc:	d8e5      	bhi.n	8009d8a <__multiply+0x106>
 8009dbe:	9905      	ldr	r1, [sp, #20]
 8009dc0:	5053      	str	r3, [r2, r1]
 8009dc2:	3504      	adds	r5, #4
 8009dc4:	3204      	adds	r2, #4
 8009dc6:	e7a0      	b.n	8009d0a <__multiply+0x86>
 8009dc8:	9b00      	ldr	r3, [sp, #0]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	e79f      	b.n	8009d10 <__multiply+0x8c>
 8009dd0:	0800afbc 	.word	0x0800afbc
 8009dd4:	0800afcd 	.word	0x0800afcd

08009dd8 <__pow5mult>:
 8009dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dda:	2303      	movs	r3, #3
 8009ddc:	0015      	movs	r5, r2
 8009dde:	0007      	movs	r7, r0
 8009de0:	000e      	movs	r6, r1
 8009de2:	401a      	ands	r2, r3
 8009de4:	421d      	tst	r5, r3
 8009de6:	d008      	beq.n	8009dfa <__pow5mult+0x22>
 8009de8:	4925      	ldr	r1, [pc, #148]	@ (8009e80 <__pow5mult+0xa8>)
 8009dea:	3a01      	subs	r2, #1
 8009dec:	0092      	lsls	r2, r2, #2
 8009dee:	5852      	ldr	r2, [r2, r1]
 8009df0:	2300      	movs	r3, #0
 8009df2:	0031      	movs	r1, r6
 8009df4:	f7ff fe9a 	bl	8009b2c <__multadd>
 8009df8:	0006      	movs	r6, r0
 8009dfa:	10ad      	asrs	r5, r5, #2
 8009dfc:	d03d      	beq.n	8009e7a <__pow5mult+0xa2>
 8009dfe:	69fc      	ldr	r4, [r7, #28]
 8009e00:	2c00      	cmp	r4, #0
 8009e02:	d10f      	bne.n	8009e24 <__pow5mult+0x4c>
 8009e04:	2010      	movs	r0, #16
 8009e06:	f7ff fd6d 	bl	80098e4 <malloc>
 8009e0a:	1e02      	subs	r2, r0, #0
 8009e0c:	61f8      	str	r0, [r7, #28]
 8009e0e:	d105      	bne.n	8009e1c <__pow5mult+0x44>
 8009e10:	21b4      	movs	r1, #180	@ 0xb4
 8009e12:	4b1c      	ldr	r3, [pc, #112]	@ (8009e84 <__pow5mult+0xac>)
 8009e14:	481c      	ldr	r0, [pc, #112]	@ (8009e88 <__pow5mult+0xb0>)
 8009e16:	31ff      	adds	r1, #255	@ 0xff
 8009e18:	f000 fbfa 	bl	800a610 <__assert_func>
 8009e1c:	6044      	str	r4, [r0, #4]
 8009e1e:	6084      	str	r4, [r0, #8]
 8009e20:	6004      	str	r4, [r0, #0]
 8009e22:	60c4      	str	r4, [r0, #12]
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	689c      	ldr	r4, [r3, #8]
 8009e28:	9301      	str	r3, [sp, #4]
 8009e2a:	2c00      	cmp	r4, #0
 8009e2c:	d108      	bne.n	8009e40 <__pow5mult+0x68>
 8009e2e:	0038      	movs	r0, r7
 8009e30:	4916      	ldr	r1, [pc, #88]	@ (8009e8c <__pow5mult+0xb4>)
 8009e32:	f7ff ff0f 	bl	8009c54 <__i2b>
 8009e36:	9b01      	ldr	r3, [sp, #4]
 8009e38:	0004      	movs	r4, r0
 8009e3a:	6098      	str	r0, [r3, #8]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	6003      	str	r3, [r0, #0]
 8009e40:	2301      	movs	r3, #1
 8009e42:	421d      	tst	r5, r3
 8009e44:	d00a      	beq.n	8009e5c <__pow5mult+0x84>
 8009e46:	0031      	movs	r1, r6
 8009e48:	0022      	movs	r2, r4
 8009e4a:	0038      	movs	r0, r7
 8009e4c:	f7ff ff1a 	bl	8009c84 <__multiply>
 8009e50:	0031      	movs	r1, r6
 8009e52:	9001      	str	r0, [sp, #4]
 8009e54:	0038      	movs	r0, r7
 8009e56:	f7ff fe45 	bl	8009ae4 <_Bfree>
 8009e5a:	9e01      	ldr	r6, [sp, #4]
 8009e5c:	106d      	asrs	r5, r5, #1
 8009e5e:	d00c      	beq.n	8009e7a <__pow5mult+0xa2>
 8009e60:	6820      	ldr	r0, [r4, #0]
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d107      	bne.n	8009e76 <__pow5mult+0x9e>
 8009e66:	0022      	movs	r2, r4
 8009e68:	0021      	movs	r1, r4
 8009e6a:	0038      	movs	r0, r7
 8009e6c:	f7ff ff0a 	bl	8009c84 <__multiply>
 8009e70:	2300      	movs	r3, #0
 8009e72:	6020      	str	r0, [r4, #0]
 8009e74:	6003      	str	r3, [r0, #0]
 8009e76:	0004      	movs	r4, r0
 8009e78:	e7e2      	b.n	8009e40 <__pow5mult+0x68>
 8009e7a:	0030      	movs	r0, r6
 8009e7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e7e:	46c0      	nop			@ (mov r8, r8)
 8009e80:	0800b080 	.word	0x0800b080
 8009e84:	0800af4d 	.word	0x0800af4d
 8009e88:	0800afcd 	.word	0x0800afcd
 8009e8c:	00000271 	.word	0x00000271

08009e90 <__lshift>:
 8009e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e92:	000c      	movs	r4, r1
 8009e94:	0016      	movs	r6, r2
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	1157      	asrs	r7, r2, #5
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	18fb      	adds	r3, r7, r3
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	6849      	ldr	r1, [r1, #4]
 8009ea6:	68a3      	ldr	r3, [r4, #8]
 8009ea8:	9002      	str	r0, [sp, #8]
 8009eaa:	9a00      	ldr	r2, [sp, #0]
 8009eac:	4293      	cmp	r3, r2
 8009eae:	db10      	blt.n	8009ed2 <__lshift+0x42>
 8009eb0:	9802      	ldr	r0, [sp, #8]
 8009eb2:	f7ff fdd3 	bl	8009a5c <_Balloc>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	0001      	movs	r1, r0
 8009eba:	0005      	movs	r5, r0
 8009ebc:	001a      	movs	r2, r3
 8009ebe:	3114      	adds	r1, #20
 8009ec0:	4298      	cmp	r0, r3
 8009ec2:	d10c      	bne.n	8009ede <__lshift+0x4e>
 8009ec4:	21ef      	movs	r1, #239	@ 0xef
 8009ec6:	002a      	movs	r2, r5
 8009ec8:	4b25      	ldr	r3, [pc, #148]	@ (8009f60 <__lshift+0xd0>)
 8009eca:	4826      	ldr	r0, [pc, #152]	@ (8009f64 <__lshift+0xd4>)
 8009ecc:	0049      	lsls	r1, r1, #1
 8009ece:	f000 fb9f 	bl	800a610 <__assert_func>
 8009ed2:	3101      	adds	r1, #1
 8009ed4:	005b      	lsls	r3, r3, #1
 8009ed6:	e7e8      	b.n	8009eaa <__lshift+0x1a>
 8009ed8:	0098      	lsls	r0, r3, #2
 8009eda:	500a      	str	r2, [r1, r0]
 8009edc:	3301      	adds	r3, #1
 8009ede:	42bb      	cmp	r3, r7
 8009ee0:	dbfa      	blt.n	8009ed8 <__lshift+0x48>
 8009ee2:	43fb      	mvns	r3, r7
 8009ee4:	17db      	asrs	r3, r3, #31
 8009ee6:	401f      	ands	r7, r3
 8009ee8:	00bf      	lsls	r7, r7, #2
 8009eea:	0023      	movs	r3, r4
 8009eec:	201f      	movs	r0, #31
 8009eee:	19c9      	adds	r1, r1, r7
 8009ef0:	0037      	movs	r7, r6
 8009ef2:	6922      	ldr	r2, [r4, #16]
 8009ef4:	3314      	adds	r3, #20
 8009ef6:	0092      	lsls	r2, r2, #2
 8009ef8:	189a      	adds	r2, r3, r2
 8009efa:	4007      	ands	r7, r0
 8009efc:	4206      	tst	r6, r0
 8009efe:	d029      	beq.n	8009f54 <__lshift+0xc4>
 8009f00:	3001      	adds	r0, #1
 8009f02:	1bc0      	subs	r0, r0, r7
 8009f04:	9003      	str	r0, [sp, #12]
 8009f06:	468c      	mov	ip, r1
 8009f08:	2000      	movs	r0, #0
 8009f0a:	681e      	ldr	r6, [r3, #0]
 8009f0c:	40be      	lsls	r6, r7
 8009f0e:	4306      	orrs	r6, r0
 8009f10:	4660      	mov	r0, ip
 8009f12:	c040      	stmia	r0!, {r6}
 8009f14:	4684      	mov	ip, r0
 8009f16:	9e03      	ldr	r6, [sp, #12]
 8009f18:	cb01      	ldmia	r3!, {r0}
 8009f1a:	40f0      	lsrs	r0, r6
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d8f4      	bhi.n	8009f0a <__lshift+0x7a>
 8009f20:	0026      	movs	r6, r4
 8009f22:	3615      	adds	r6, #21
 8009f24:	2304      	movs	r3, #4
 8009f26:	42b2      	cmp	r2, r6
 8009f28:	d304      	bcc.n	8009f34 <__lshift+0xa4>
 8009f2a:	1b13      	subs	r3, r2, r4
 8009f2c:	3b15      	subs	r3, #21
 8009f2e:	089b      	lsrs	r3, r3, #2
 8009f30:	3301      	adds	r3, #1
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	50c8      	str	r0, [r1, r3]
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d002      	beq.n	8009f40 <__lshift+0xb0>
 8009f3a:	9b01      	ldr	r3, [sp, #4]
 8009f3c:	3302      	adds	r3, #2
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	9b00      	ldr	r3, [sp, #0]
 8009f42:	9802      	ldr	r0, [sp, #8]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	0021      	movs	r1, r4
 8009f48:	612b      	str	r3, [r5, #16]
 8009f4a:	f7ff fdcb 	bl	8009ae4 <_Bfree>
 8009f4e:	0028      	movs	r0, r5
 8009f50:	b005      	add	sp, #20
 8009f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f54:	cb01      	ldmia	r3!, {r0}
 8009f56:	c101      	stmia	r1!, {r0}
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d8fb      	bhi.n	8009f54 <__lshift+0xc4>
 8009f5c:	e7f0      	b.n	8009f40 <__lshift+0xb0>
 8009f5e:	46c0      	nop			@ (mov r8, r8)
 8009f60:	0800afbc 	.word	0x0800afbc
 8009f64:	0800afcd 	.word	0x0800afcd

08009f68 <__mcmp>:
 8009f68:	b530      	push	{r4, r5, lr}
 8009f6a:	690b      	ldr	r3, [r1, #16]
 8009f6c:	6904      	ldr	r4, [r0, #16]
 8009f6e:	0002      	movs	r2, r0
 8009f70:	1ae0      	subs	r0, r4, r3
 8009f72:	429c      	cmp	r4, r3
 8009f74:	d10f      	bne.n	8009f96 <__mcmp+0x2e>
 8009f76:	3214      	adds	r2, #20
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	3114      	adds	r1, #20
 8009f7c:	0014      	movs	r4, r2
 8009f7e:	18c9      	adds	r1, r1, r3
 8009f80:	18d2      	adds	r2, r2, r3
 8009f82:	3a04      	subs	r2, #4
 8009f84:	3904      	subs	r1, #4
 8009f86:	6815      	ldr	r5, [r2, #0]
 8009f88:	680b      	ldr	r3, [r1, #0]
 8009f8a:	429d      	cmp	r5, r3
 8009f8c:	d004      	beq.n	8009f98 <__mcmp+0x30>
 8009f8e:	2001      	movs	r0, #1
 8009f90:	429d      	cmp	r5, r3
 8009f92:	d200      	bcs.n	8009f96 <__mcmp+0x2e>
 8009f94:	3802      	subs	r0, #2
 8009f96:	bd30      	pop	{r4, r5, pc}
 8009f98:	4294      	cmp	r4, r2
 8009f9a:	d3f2      	bcc.n	8009f82 <__mcmp+0x1a>
 8009f9c:	e7fb      	b.n	8009f96 <__mcmp+0x2e>
	...

08009fa0 <__mdiff>:
 8009fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fa2:	000c      	movs	r4, r1
 8009fa4:	b087      	sub	sp, #28
 8009fa6:	9000      	str	r0, [sp, #0]
 8009fa8:	0011      	movs	r1, r2
 8009faa:	0020      	movs	r0, r4
 8009fac:	0017      	movs	r7, r2
 8009fae:	f7ff ffdb 	bl	8009f68 <__mcmp>
 8009fb2:	1e05      	subs	r5, r0, #0
 8009fb4:	d110      	bne.n	8009fd8 <__mdiff+0x38>
 8009fb6:	0001      	movs	r1, r0
 8009fb8:	9800      	ldr	r0, [sp, #0]
 8009fba:	f7ff fd4f 	bl	8009a5c <_Balloc>
 8009fbe:	1e02      	subs	r2, r0, #0
 8009fc0:	d104      	bne.n	8009fcc <__mdiff+0x2c>
 8009fc2:	4b40      	ldr	r3, [pc, #256]	@ (800a0c4 <__mdiff+0x124>)
 8009fc4:	4840      	ldr	r0, [pc, #256]	@ (800a0c8 <__mdiff+0x128>)
 8009fc6:	4941      	ldr	r1, [pc, #260]	@ (800a0cc <__mdiff+0x12c>)
 8009fc8:	f000 fb22 	bl	800a610 <__assert_func>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	6145      	str	r5, [r0, #20]
 8009fd0:	6103      	str	r3, [r0, #16]
 8009fd2:	0010      	movs	r0, r2
 8009fd4:	b007      	add	sp, #28
 8009fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd8:	2600      	movs	r6, #0
 8009fda:	42b0      	cmp	r0, r6
 8009fdc:	da03      	bge.n	8009fe6 <__mdiff+0x46>
 8009fde:	0023      	movs	r3, r4
 8009fe0:	003c      	movs	r4, r7
 8009fe2:	001f      	movs	r7, r3
 8009fe4:	3601      	adds	r6, #1
 8009fe6:	6861      	ldr	r1, [r4, #4]
 8009fe8:	9800      	ldr	r0, [sp, #0]
 8009fea:	f7ff fd37 	bl	8009a5c <_Balloc>
 8009fee:	1e02      	subs	r2, r0, #0
 8009ff0:	d103      	bne.n	8009ffa <__mdiff+0x5a>
 8009ff2:	4b34      	ldr	r3, [pc, #208]	@ (800a0c4 <__mdiff+0x124>)
 8009ff4:	4834      	ldr	r0, [pc, #208]	@ (800a0c8 <__mdiff+0x128>)
 8009ff6:	4936      	ldr	r1, [pc, #216]	@ (800a0d0 <__mdiff+0x130>)
 8009ff8:	e7e6      	b.n	8009fc8 <__mdiff+0x28>
 8009ffa:	6923      	ldr	r3, [r4, #16]
 8009ffc:	3414      	adds	r4, #20
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	18e3      	adds	r3, r4, r3
 800a004:	0021      	movs	r1, r4
 800a006:	9401      	str	r4, [sp, #4]
 800a008:	003c      	movs	r4, r7
 800a00a:	9302      	str	r3, [sp, #8]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	3414      	adds	r4, #20
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	18e3      	adds	r3, r4, r3
 800a014:	9303      	str	r3, [sp, #12]
 800a016:	0003      	movs	r3, r0
 800a018:	60c6      	str	r6, [r0, #12]
 800a01a:	468c      	mov	ip, r1
 800a01c:	2000      	movs	r0, #0
 800a01e:	3314      	adds	r3, #20
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	9305      	str	r3, [sp, #20]
 800a024:	4663      	mov	r3, ip
 800a026:	cb20      	ldmia	r3!, {r5}
 800a028:	b2a9      	uxth	r1, r5
 800a02a:	000e      	movs	r6, r1
 800a02c:	469c      	mov	ip, r3
 800a02e:	cc08      	ldmia	r4!, {r3}
 800a030:	0c2d      	lsrs	r5, r5, #16
 800a032:	b299      	uxth	r1, r3
 800a034:	1a71      	subs	r1, r6, r1
 800a036:	1809      	adds	r1, r1, r0
 800a038:	0c1b      	lsrs	r3, r3, #16
 800a03a:	1408      	asrs	r0, r1, #16
 800a03c:	1aeb      	subs	r3, r5, r3
 800a03e:	181b      	adds	r3, r3, r0
 800a040:	1418      	asrs	r0, r3, #16
 800a042:	b289      	uxth	r1, r1
 800a044:	041b      	lsls	r3, r3, #16
 800a046:	4319      	orrs	r1, r3
 800a048:	9b05      	ldr	r3, [sp, #20]
 800a04a:	c302      	stmia	r3!, {r1}
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	9b03      	ldr	r3, [sp, #12]
 800a050:	42a3      	cmp	r3, r4
 800a052:	d8e7      	bhi.n	800a024 <__mdiff+0x84>
 800a054:	0039      	movs	r1, r7
 800a056:	9c03      	ldr	r4, [sp, #12]
 800a058:	3115      	adds	r1, #21
 800a05a:	2304      	movs	r3, #4
 800a05c:	428c      	cmp	r4, r1
 800a05e:	d304      	bcc.n	800a06a <__mdiff+0xca>
 800a060:	1be3      	subs	r3, r4, r7
 800a062:	3b15      	subs	r3, #21
 800a064:	089b      	lsrs	r3, r3, #2
 800a066:	3301      	adds	r3, #1
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	9901      	ldr	r1, [sp, #4]
 800a06c:	18cd      	adds	r5, r1, r3
 800a06e:	9904      	ldr	r1, [sp, #16]
 800a070:	002e      	movs	r6, r5
 800a072:	18cb      	adds	r3, r1, r3
 800a074:	001f      	movs	r7, r3
 800a076:	9902      	ldr	r1, [sp, #8]
 800a078:	428e      	cmp	r6, r1
 800a07a:	d311      	bcc.n	800a0a0 <__mdiff+0x100>
 800a07c:	9c02      	ldr	r4, [sp, #8]
 800a07e:	1ee9      	subs	r1, r5, #3
 800a080:	2000      	movs	r0, #0
 800a082:	428c      	cmp	r4, r1
 800a084:	d304      	bcc.n	800a090 <__mdiff+0xf0>
 800a086:	0021      	movs	r1, r4
 800a088:	3103      	adds	r1, #3
 800a08a:	1b49      	subs	r1, r1, r5
 800a08c:	0889      	lsrs	r1, r1, #2
 800a08e:	0088      	lsls	r0, r1, #2
 800a090:	181b      	adds	r3, r3, r0
 800a092:	3b04      	subs	r3, #4
 800a094:	6819      	ldr	r1, [r3, #0]
 800a096:	2900      	cmp	r1, #0
 800a098:	d010      	beq.n	800a0bc <__mdiff+0x11c>
 800a09a:	9b00      	ldr	r3, [sp, #0]
 800a09c:	6113      	str	r3, [r2, #16]
 800a09e:	e798      	b.n	8009fd2 <__mdiff+0x32>
 800a0a0:	4684      	mov	ip, r0
 800a0a2:	ce02      	ldmia	r6!, {r1}
 800a0a4:	b288      	uxth	r0, r1
 800a0a6:	4460      	add	r0, ip
 800a0a8:	1400      	asrs	r0, r0, #16
 800a0aa:	0c0c      	lsrs	r4, r1, #16
 800a0ac:	1904      	adds	r4, r0, r4
 800a0ae:	4461      	add	r1, ip
 800a0b0:	1420      	asrs	r0, r4, #16
 800a0b2:	b289      	uxth	r1, r1
 800a0b4:	0424      	lsls	r4, r4, #16
 800a0b6:	4321      	orrs	r1, r4
 800a0b8:	c702      	stmia	r7!, {r1}
 800a0ba:	e7dc      	b.n	800a076 <__mdiff+0xd6>
 800a0bc:	9900      	ldr	r1, [sp, #0]
 800a0be:	3901      	subs	r1, #1
 800a0c0:	9100      	str	r1, [sp, #0]
 800a0c2:	e7e6      	b.n	800a092 <__mdiff+0xf2>
 800a0c4:	0800afbc 	.word	0x0800afbc
 800a0c8:	0800afcd 	.word	0x0800afcd
 800a0cc:	00000237 	.word	0x00000237
 800a0d0:	00000245 	.word	0x00000245

0800a0d4 <__d2b>:
 800a0d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	0016      	movs	r6, r2
 800a0da:	001f      	movs	r7, r3
 800a0dc:	f7ff fcbe 	bl	8009a5c <_Balloc>
 800a0e0:	1e04      	subs	r4, r0, #0
 800a0e2:	d105      	bne.n	800a0f0 <__d2b+0x1c>
 800a0e4:	0022      	movs	r2, r4
 800a0e6:	4b25      	ldr	r3, [pc, #148]	@ (800a17c <__d2b+0xa8>)
 800a0e8:	4825      	ldr	r0, [pc, #148]	@ (800a180 <__d2b+0xac>)
 800a0ea:	4926      	ldr	r1, [pc, #152]	@ (800a184 <__d2b+0xb0>)
 800a0ec:	f000 fa90 	bl	800a610 <__assert_func>
 800a0f0:	033b      	lsls	r3, r7, #12
 800a0f2:	007d      	lsls	r5, r7, #1
 800a0f4:	0b1b      	lsrs	r3, r3, #12
 800a0f6:	0d6d      	lsrs	r5, r5, #21
 800a0f8:	d002      	beq.n	800a100 <__d2b+0x2c>
 800a0fa:	2280      	movs	r2, #128	@ 0x80
 800a0fc:	0352      	lsls	r2, r2, #13
 800a0fe:	4313      	orrs	r3, r2
 800a100:	9301      	str	r3, [sp, #4]
 800a102:	2e00      	cmp	r6, #0
 800a104:	d025      	beq.n	800a152 <__d2b+0x7e>
 800a106:	4668      	mov	r0, sp
 800a108:	9600      	str	r6, [sp, #0]
 800a10a:	f7ff fd74 	bl	8009bf6 <__lo0bits>
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	9900      	ldr	r1, [sp, #0]
 800a112:	2800      	cmp	r0, #0
 800a114:	d01b      	beq.n	800a14e <__d2b+0x7a>
 800a116:	2220      	movs	r2, #32
 800a118:	001e      	movs	r6, r3
 800a11a:	1a12      	subs	r2, r2, r0
 800a11c:	4096      	lsls	r6, r2
 800a11e:	0032      	movs	r2, r6
 800a120:	40c3      	lsrs	r3, r0
 800a122:	430a      	orrs	r2, r1
 800a124:	6162      	str	r2, [r4, #20]
 800a126:	9301      	str	r3, [sp, #4]
 800a128:	9e01      	ldr	r6, [sp, #4]
 800a12a:	61a6      	str	r6, [r4, #24]
 800a12c:	1e73      	subs	r3, r6, #1
 800a12e:	419e      	sbcs	r6, r3
 800a130:	3601      	adds	r6, #1
 800a132:	6126      	str	r6, [r4, #16]
 800a134:	2d00      	cmp	r5, #0
 800a136:	d014      	beq.n	800a162 <__d2b+0x8e>
 800a138:	2635      	movs	r6, #53	@ 0x35
 800a13a:	4b13      	ldr	r3, [pc, #76]	@ (800a188 <__d2b+0xb4>)
 800a13c:	18ed      	adds	r5, r5, r3
 800a13e:	9b08      	ldr	r3, [sp, #32]
 800a140:	182d      	adds	r5, r5, r0
 800a142:	601d      	str	r5, [r3, #0]
 800a144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a146:	1a36      	subs	r6, r6, r0
 800a148:	601e      	str	r6, [r3, #0]
 800a14a:	0020      	movs	r0, r4
 800a14c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a14e:	6161      	str	r1, [r4, #20]
 800a150:	e7ea      	b.n	800a128 <__d2b+0x54>
 800a152:	a801      	add	r0, sp, #4
 800a154:	f7ff fd4f 	bl	8009bf6 <__lo0bits>
 800a158:	9b01      	ldr	r3, [sp, #4]
 800a15a:	2601      	movs	r6, #1
 800a15c:	6163      	str	r3, [r4, #20]
 800a15e:	3020      	adds	r0, #32
 800a160:	e7e7      	b.n	800a132 <__d2b+0x5e>
 800a162:	4b0a      	ldr	r3, [pc, #40]	@ (800a18c <__d2b+0xb8>)
 800a164:	18c0      	adds	r0, r0, r3
 800a166:	9b08      	ldr	r3, [sp, #32]
 800a168:	6018      	str	r0, [r3, #0]
 800a16a:	4b09      	ldr	r3, [pc, #36]	@ (800a190 <__d2b+0xbc>)
 800a16c:	18f3      	adds	r3, r6, r3
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	18e3      	adds	r3, r4, r3
 800a172:	6958      	ldr	r0, [r3, #20]
 800a174:	f7ff fd1e 	bl	8009bb4 <__hi0bits>
 800a178:	0176      	lsls	r6, r6, #5
 800a17a:	e7e3      	b.n	800a144 <__d2b+0x70>
 800a17c:	0800afbc 	.word	0x0800afbc
 800a180:	0800afcd 	.word	0x0800afcd
 800a184:	0000030f 	.word	0x0000030f
 800a188:	fffffbcd 	.word	0xfffffbcd
 800a18c:	fffffbce 	.word	0xfffffbce
 800a190:	3fffffff 	.word	0x3fffffff

0800a194 <__ssputs_r>:
 800a194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a196:	688e      	ldr	r6, [r1, #8]
 800a198:	b085      	sub	sp, #20
 800a19a:	001f      	movs	r7, r3
 800a19c:	000c      	movs	r4, r1
 800a19e:	680b      	ldr	r3, [r1, #0]
 800a1a0:	9002      	str	r0, [sp, #8]
 800a1a2:	9203      	str	r2, [sp, #12]
 800a1a4:	42be      	cmp	r6, r7
 800a1a6:	d830      	bhi.n	800a20a <__ssputs_r+0x76>
 800a1a8:	210c      	movs	r1, #12
 800a1aa:	5e62      	ldrsh	r2, [r4, r1]
 800a1ac:	2190      	movs	r1, #144	@ 0x90
 800a1ae:	00c9      	lsls	r1, r1, #3
 800a1b0:	420a      	tst	r2, r1
 800a1b2:	d028      	beq.n	800a206 <__ssputs_r+0x72>
 800a1b4:	2003      	movs	r0, #3
 800a1b6:	6921      	ldr	r1, [r4, #16]
 800a1b8:	1a5b      	subs	r3, r3, r1
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	6963      	ldr	r3, [r4, #20]
 800a1be:	4343      	muls	r3, r0
 800a1c0:	9801      	ldr	r0, [sp, #4]
 800a1c2:	0fdd      	lsrs	r5, r3, #31
 800a1c4:	18ed      	adds	r5, r5, r3
 800a1c6:	1c7b      	adds	r3, r7, #1
 800a1c8:	181b      	adds	r3, r3, r0
 800a1ca:	106d      	asrs	r5, r5, #1
 800a1cc:	42ab      	cmp	r3, r5
 800a1ce:	d900      	bls.n	800a1d2 <__ssputs_r+0x3e>
 800a1d0:	001d      	movs	r5, r3
 800a1d2:	0552      	lsls	r2, r2, #21
 800a1d4:	d528      	bpl.n	800a228 <__ssputs_r+0x94>
 800a1d6:	0029      	movs	r1, r5
 800a1d8:	9802      	ldr	r0, [sp, #8]
 800a1da:	f7ff fbaf 	bl	800993c <_malloc_r>
 800a1de:	1e06      	subs	r6, r0, #0
 800a1e0:	d02c      	beq.n	800a23c <__ssputs_r+0xa8>
 800a1e2:	9a01      	ldr	r2, [sp, #4]
 800a1e4:	6921      	ldr	r1, [r4, #16]
 800a1e6:	f000 fa09 	bl	800a5fc <memcpy>
 800a1ea:	89a2      	ldrh	r2, [r4, #12]
 800a1ec:	4b18      	ldr	r3, [pc, #96]	@ (800a250 <__ssputs_r+0xbc>)
 800a1ee:	401a      	ands	r2, r3
 800a1f0:	2380      	movs	r3, #128	@ 0x80
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	9b01      	ldr	r3, [sp, #4]
 800a1f8:	6126      	str	r6, [r4, #16]
 800a1fa:	18f6      	adds	r6, r6, r3
 800a1fc:	6026      	str	r6, [r4, #0]
 800a1fe:	003e      	movs	r6, r7
 800a200:	6165      	str	r5, [r4, #20]
 800a202:	1aed      	subs	r5, r5, r3
 800a204:	60a5      	str	r5, [r4, #8]
 800a206:	42be      	cmp	r6, r7
 800a208:	d900      	bls.n	800a20c <__ssputs_r+0x78>
 800a20a:	003e      	movs	r6, r7
 800a20c:	0032      	movs	r2, r6
 800a20e:	9903      	ldr	r1, [sp, #12]
 800a210:	6820      	ldr	r0, [r4, #0]
 800a212:	f000 f9ce 	bl	800a5b2 <memmove>
 800a216:	2000      	movs	r0, #0
 800a218:	68a3      	ldr	r3, [r4, #8]
 800a21a:	1b9b      	subs	r3, r3, r6
 800a21c:	60a3      	str	r3, [r4, #8]
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	199b      	adds	r3, r3, r6
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	b005      	add	sp, #20
 800a226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a228:	002a      	movs	r2, r5
 800a22a:	9802      	ldr	r0, [sp, #8]
 800a22c:	f000 fa4d 	bl	800a6ca <_realloc_r>
 800a230:	1e06      	subs	r6, r0, #0
 800a232:	d1e0      	bne.n	800a1f6 <__ssputs_r+0x62>
 800a234:	6921      	ldr	r1, [r4, #16]
 800a236:	9802      	ldr	r0, [sp, #8]
 800a238:	f7ff fb0a 	bl	8009850 <_free_r>
 800a23c:	230c      	movs	r3, #12
 800a23e:	2001      	movs	r0, #1
 800a240:	9a02      	ldr	r2, [sp, #8]
 800a242:	4240      	negs	r0, r0
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	89a2      	ldrh	r2, [r4, #12]
 800a248:	3334      	adds	r3, #52	@ 0x34
 800a24a:	4313      	orrs	r3, r2
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	e7e9      	b.n	800a224 <__ssputs_r+0x90>
 800a250:	fffffb7f 	.word	0xfffffb7f

0800a254 <_svfiprintf_r>:
 800a254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a256:	b0a1      	sub	sp, #132	@ 0x84
 800a258:	9003      	str	r0, [sp, #12]
 800a25a:	001d      	movs	r5, r3
 800a25c:	898b      	ldrh	r3, [r1, #12]
 800a25e:	000f      	movs	r7, r1
 800a260:	0016      	movs	r6, r2
 800a262:	061b      	lsls	r3, r3, #24
 800a264:	d511      	bpl.n	800a28a <_svfiprintf_r+0x36>
 800a266:	690b      	ldr	r3, [r1, #16]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10e      	bne.n	800a28a <_svfiprintf_r+0x36>
 800a26c:	2140      	movs	r1, #64	@ 0x40
 800a26e:	f7ff fb65 	bl	800993c <_malloc_r>
 800a272:	6038      	str	r0, [r7, #0]
 800a274:	6138      	str	r0, [r7, #16]
 800a276:	2800      	cmp	r0, #0
 800a278:	d105      	bne.n	800a286 <_svfiprintf_r+0x32>
 800a27a:	230c      	movs	r3, #12
 800a27c:	9a03      	ldr	r2, [sp, #12]
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	2001      	movs	r0, #1
 800a282:	4240      	negs	r0, r0
 800a284:	e0cf      	b.n	800a426 <_svfiprintf_r+0x1d2>
 800a286:	2340      	movs	r3, #64	@ 0x40
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	2300      	movs	r3, #0
 800a28c:	ac08      	add	r4, sp, #32
 800a28e:	6163      	str	r3, [r4, #20]
 800a290:	3320      	adds	r3, #32
 800a292:	7663      	strb	r3, [r4, #25]
 800a294:	3310      	adds	r3, #16
 800a296:	76a3      	strb	r3, [r4, #26]
 800a298:	9507      	str	r5, [sp, #28]
 800a29a:	0035      	movs	r5, r6
 800a29c:	782b      	ldrb	r3, [r5, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <_svfiprintf_r+0x52>
 800a2a2:	2b25      	cmp	r3, #37	@ 0x25
 800a2a4:	d148      	bne.n	800a338 <_svfiprintf_r+0xe4>
 800a2a6:	1bab      	subs	r3, r5, r6
 800a2a8:	9305      	str	r3, [sp, #20]
 800a2aa:	42b5      	cmp	r5, r6
 800a2ac:	d00b      	beq.n	800a2c6 <_svfiprintf_r+0x72>
 800a2ae:	0032      	movs	r2, r6
 800a2b0:	0039      	movs	r1, r7
 800a2b2:	9803      	ldr	r0, [sp, #12]
 800a2b4:	f7ff ff6e 	bl	800a194 <__ssputs_r>
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	d100      	bne.n	800a2be <_svfiprintf_r+0x6a>
 800a2bc:	e0ae      	b.n	800a41c <_svfiprintf_r+0x1c8>
 800a2be:	6963      	ldr	r3, [r4, #20]
 800a2c0:	9a05      	ldr	r2, [sp, #20]
 800a2c2:	189b      	adds	r3, r3, r2
 800a2c4:	6163      	str	r3, [r4, #20]
 800a2c6:	782b      	ldrb	r3, [r5, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d100      	bne.n	800a2ce <_svfiprintf_r+0x7a>
 800a2cc:	e0a6      	b.n	800a41c <_svfiprintf_r+0x1c8>
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	4252      	negs	r2, r2
 800a2d4:	6062      	str	r2, [r4, #4]
 800a2d6:	a904      	add	r1, sp, #16
 800a2d8:	3254      	adds	r2, #84	@ 0x54
 800a2da:	1852      	adds	r2, r2, r1
 800a2dc:	1c6e      	adds	r6, r5, #1
 800a2de:	6023      	str	r3, [r4, #0]
 800a2e0:	60e3      	str	r3, [r4, #12]
 800a2e2:	60a3      	str	r3, [r4, #8]
 800a2e4:	7013      	strb	r3, [r2, #0]
 800a2e6:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a2e8:	4b54      	ldr	r3, [pc, #336]	@ (800a43c <_svfiprintf_r+0x1e8>)
 800a2ea:	2205      	movs	r2, #5
 800a2ec:	0018      	movs	r0, r3
 800a2ee:	7831      	ldrb	r1, [r6, #0]
 800a2f0:	9305      	str	r3, [sp, #20]
 800a2f2:	f7fe fc2c 	bl	8008b4e <memchr>
 800a2f6:	1c75      	adds	r5, r6, #1
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d11f      	bne.n	800a33c <_svfiprintf_r+0xe8>
 800a2fc:	6822      	ldr	r2, [r4, #0]
 800a2fe:	06d3      	lsls	r3, r2, #27
 800a300:	d504      	bpl.n	800a30c <_svfiprintf_r+0xb8>
 800a302:	2353      	movs	r3, #83	@ 0x53
 800a304:	a904      	add	r1, sp, #16
 800a306:	185b      	adds	r3, r3, r1
 800a308:	2120      	movs	r1, #32
 800a30a:	7019      	strb	r1, [r3, #0]
 800a30c:	0713      	lsls	r3, r2, #28
 800a30e:	d504      	bpl.n	800a31a <_svfiprintf_r+0xc6>
 800a310:	2353      	movs	r3, #83	@ 0x53
 800a312:	a904      	add	r1, sp, #16
 800a314:	185b      	adds	r3, r3, r1
 800a316:	212b      	movs	r1, #43	@ 0x2b
 800a318:	7019      	strb	r1, [r3, #0]
 800a31a:	7833      	ldrb	r3, [r6, #0]
 800a31c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a31e:	d016      	beq.n	800a34e <_svfiprintf_r+0xfa>
 800a320:	0035      	movs	r5, r6
 800a322:	2100      	movs	r1, #0
 800a324:	200a      	movs	r0, #10
 800a326:	68e3      	ldr	r3, [r4, #12]
 800a328:	782a      	ldrb	r2, [r5, #0]
 800a32a:	1c6e      	adds	r6, r5, #1
 800a32c:	3a30      	subs	r2, #48	@ 0x30
 800a32e:	2a09      	cmp	r2, #9
 800a330:	d950      	bls.n	800a3d4 <_svfiprintf_r+0x180>
 800a332:	2900      	cmp	r1, #0
 800a334:	d111      	bne.n	800a35a <_svfiprintf_r+0x106>
 800a336:	e017      	b.n	800a368 <_svfiprintf_r+0x114>
 800a338:	3501      	adds	r5, #1
 800a33a:	e7af      	b.n	800a29c <_svfiprintf_r+0x48>
 800a33c:	9b05      	ldr	r3, [sp, #20]
 800a33e:	6822      	ldr	r2, [r4, #0]
 800a340:	1ac0      	subs	r0, r0, r3
 800a342:	2301      	movs	r3, #1
 800a344:	4083      	lsls	r3, r0
 800a346:	4313      	orrs	r3, r2
 800a348:	002e      	movs	r6, r5
 800a34a:	6023      	str	r3, [r4, #0]
 800a34c:	e7cc      	b.n	800a2e8 <_svfiprintf_r+0x94>
 800a34e:	9b07      	ldr	r3, [sp, #28]
 800a350:	1d19      	adds	r1, r3, #4
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	9107      	str	r1, [sp, #28]
 800a356:	2b00      	cmp	r3, #0
 800a358:	db01      	blt.n	800a35e <_svfiprintf_r+0x10a>
 800a35a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a35c:	e004      	b.n	800a368 <_svfiprintf_r+0x114>
 800a35e:	425b      	negs	r3, r3
 800a360:	60e3      	str	r3, [r4, #12]
 800a362:	2302      	movs	r3, #2
 800a364:	4313      	orrs	r3, r2
 800a366:	6023      	str	r3, [r4, #0]
 800a368:	782b      	ldrb	r3, [r5, #0]
 800a36a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a36c:	d10c      	bne.n	800a388 <_svfiprintf_r+0x134>
 800a36e:	786b      	ldrb	r3, [r5, #1]
 800a370:	2b2a      	cmp	r3, #42	@ 0x2a
 800a372:	d134      	bne.n	800a3de <_svfiprintf_r+0x18a>
 800a374:	9b07      	ldr	r3, [sp, #28]
 800a376:	3502      	adds	r5, #2
 800a378:	1d1a      	adds	r2, r3, #4
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	9207      	str	r2, [sp, #28]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	da01      	bge.n	800a386 <_svfiprintf_r+0x132>
 800a382:	2301      	movs	r3, #1
 800a384:	425b      	negs	r3, r3
 800a386:	9309      	str	r3, [sp, #36]	@ 0x24
 800a388:	4e2d      	ldr	r6, [pc, #180]	@ (800a440 <_svfiprintf_r+0x1ec>)
 800a38a:	2203      	movs	r2, #3
 800a38c:	0030      	movs	r0, r6
 800a38e:	7829      	ldrb	r1, [r5, #0]
 800a390:	f7fe fbdd 	bl	8008b4e <memchr>
 800a394:	2800      	cmp	r0, #0
 800a396:	d006      	beq.n	800a3a6 <_svfiprintf_r+0x152>
 800a398:	2340      	movs	r3, #64	@ 0x40
 800a39a:	1b80      	subs	r0, r0, r6
 800a39c:	4083      	lsls	r3, r0
 800a39e:	6822      	ldr	r2, [r4, #0]
 800a3a0:	3501      	adds	r5, #1
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	7829      	ldrb	r1, [r5, #0]
 800a3a8:	2206      	movs	r2, #6
 800a3aa:	4826      	ldr	r0, [pc, #152]	@ (800a444 <_svfiprintf_r+0x1f0>)
 800a3ac:	1c6e      	adds	r6, r5, #1
 800a3ae:	7621      	strb	r1, [r4, #24]
 800a3b0:	f7fe fbcd 	bl	8008b4e <memchr>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d038      	beq.n	800a42a <_svfiprintf_r+0x1d6>
 800a3b8:	4b23      	ldr	r3, [pc, #140]	@ (800a448 <_svfiprintf_r+0x1f4>)
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d122      	bne.n	800a404 <_svfiprintf_r+0x1b0>
 800a3be:	2207      	movs	r2, #7
 800a3c0:	9b07      	ldr	r3, [sp, #28]
 800a3c2:	3307      	adds	r3, #7
 800a3c4:	4393      	bics	r3, r2
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	9307      	str	r3, [sp, #28]
 800a3ca:	6963      	ldr	r3, [r4, #20]
 800a3cc:	9a04      	ldr	r2, [sp, #16]
 800a3ce:	189b      	adds	r3, r3, r2
 800a3d0:	6163      	str	r3, [r4, #20]
 800a3d2:	e762      	b.n	800a29a <_svfiprintf_r+0x46>
 800a3d4:	4343      	muls	r3, r0
 800a3d6:	0035      	movs	r5, r6
 800a3d8:	2101      	movs	r1, #1
 800a3da:	189b      	adds	r3, r3, r2
 800a3dc:	e7a4      	b.n	800a328 <_svfiprintf_r+0xd4>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	200a      	movs	r0, #10
 800a3e2:	0019      	movs	r1, r3
 800a3e4:	3501      	adds	r5, #1
 800a3e6:	6063      	str	r3, [r4, #4]
 800a3e8:	782a      	ldrb	r2, [r5, #0]
 800a3ea:	1c6e      	adds	r6, r5, #1
 800a3ec:	3a30      	subs	r2, #48	@ 0x30
 800a3ee:	2a09      	cmp	r2, #9
 800a3f0:	d903      	bls.n	800a3fa <_svfiprintf_r+0x1a6>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0c8      	beq.n	800a388 <_svfiprintf_r+0x134>
 800a3f6:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3f8:	e7c6      	b.n	800a388 <_svfiprintf_r+0x134>
 800a3fa:	4341      	muls	r1, r0
 800a3fc:	0035      	movs	r5, r6
 800a3fe:	2301      	movs	r3, #1
 800a400:	1889      	adds	r1, r1, r2
 800a402:	e7f1      	b.n	800a3e8 <_svfiprintf_r+0x194>
 800a404:	aa07      	add	r2, sp, #28
 800a406:	9200      	str	r2, [sp, #0]
 800a408:	0021      	movs	r1, r4
 800a40a:	003a      	movs	r2, r7
 800a40c:	4b0f      	ldr	r3, [pc, #60]	@ (800a44c <_svfiprintf_r+0x1f8>)
 800a40e:	9803      	ldr	r0, [sp, #12]
 800a410:	f7fd fe08 	bl	8008024 <_printf_float>
 800a414:	9004      	str	r0, [sp, #16]
 800a416:	9b04      	ldr	r3, [sp, #16]
 800a418:	3301      	adds	r3, #1
 800a41a:	d1d6      	bne.n	800a3ca <_svfiprintf_r+0x176>
 800a41c:	89bb      	ldrh	r3, [r7, #12]
 800a41e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a420:	065b      	lsls	r3, r3, #25
 800a422:	d500      	bpl.n	800a426 <_svfiprintf_r+0x1d2>
 800a424:	e72c      	b.n	800a280 <_svfiprintf_r+0x2c>
 800a426:	b021      	add	sp, #132	@ 0x84
 800a428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a42a:	aa07      	add	r2, sp, #28
 800a42c:	9200      	str	r2, [sp, #0]
 800a42e:	0021      	movs	r1, r4
 800a430:	003a      	movs	r2, r7
 800a432:	4b06      	ldr	r3, [pc, #24]	@ (800a44c <_svfiprintf_r+0x1f8>)
 800a434:	9803      	ldr	r0, [sp, #12]
 800a436:	f7fe f8a3 	bl	8008580 <_printf_i>
 800a43a:	e7eb      	b.n	800a414 <_svfiprintf_r+0x1c0>
 800a43c:	0800b026 	.word	0x0800b026
 800a440:	0800b02c 	.word	0x0800b02c
 800a444:	0800b030 	.word	0x0800b030
 800a448:	08008025 	.word	0x08008025
 800a44c:	0800a195 	.word	0x0800a195

0800a450 <__sflush_r>:
 800a450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a452:	220c      	movs	r2, #12
 800a454:	5e8b      	ldrsh	r3, [r1, r2]
 800a456:	0005      	movs	r5, r0
 800a458:	000c      	movs	r4, r1
 800a45a:	071a      	lsls	r2, r3, #28
 800a45c:	d456      	bmi.n	800a50c <__sflush_r+0xbc>
 800a45e:	684a      	ldr	r2, [r1, #4]
 800a460:	2a00      	cmp	r2, #0
 800a462:	dc02      	bgt.n	800a46a <__sflush_r+0x1a>
 800a464:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a466:	2a00      	cmp	r2, #0
 800a468:	dd4e      	ble.n	800a508 <__sflush_r+0xb8>
 800a46a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a46c:	2f00      	cmp	r7, #0
 800a46e:	d04b      	beq.n	800a508 <__sflush_r+0xb8>
 800a470:	2200      	movs	r2, #0
 800a472:	2080      	movs	r0, #128	@ 0x80
 800a474:	682e      	ldr	r6, [r5, #0]
 800a476:	602a      	str	r2, [r5, #0]
 800a478:	001a      	movs	r2, r3
 800a47a:	0140      	lsls	r0, r0, #5
 800a47c:	6a21      	ldr	r1, [r4, #32]
 800a47e:	4002      	ands	r2, r0
 800a480:	4203      	tst	r3, r0
 800a482:	d033      	beq.n	800a4ec <__sflush_r+0x9c>
 800a484:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a486:	89a3      	ldrh	r3, [r4, #12]
 800a488:	075b      	lsls	r3, r3, #29
 800a48a:	d506      	bpl.n	800a49a <__sflush_r+0x4a>
 800a48c:	6863      	ldr	r3, [r4, #4]
 800a48e:	1ad2      	subs	r2, r2, r3
 800a490:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a492:	2b00      	cmp	r3, #0
 800a494:	d001      	beq.n	800a49a <__sflush_r+0x4a>
 800a496:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a498:	1ad2      	subs	r2, r2, r3
 800a49a:	2300      	movs	r3, #0
 800a49c:	0028      	movs	r0, r5
 800a49e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a4a0:	6a21      	ldr	r1, [r4, #32]
 800a4a2:	47b8      	blx	r7
 800a4a4:	89a2      	ldrh	r2, [r4, #12]
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	d106      	bne.n	800a4b8 <__sflush_r+0x68>
 800a4aa:	6829      	ldr	r1, [r5, #0]
 800a4ac:	291d      	cmp	r1, #29
 800a4ae:	d846      	bhi.n	800a53e <__sflush_r+0xee>
 800a4b0:	4b29      	ldr	r3, [pc, #164]	@ (800a558 <__sflush_r+0x108>)
 800a4b2:	40cb      	lsrs	r3, r1
 800a4b4:	07db      	lsls	r3, r3, #31
 800a4b6:	d542      	bpl.n	800a53e <__sflush_r+0xee>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	6063      	str	r3, [r4, #4]
 800a4bc:	6923      	ldr	r3, [r4, #16]
 800a4be:	6023      	str	r3, [r4, #0]
 800a4c0:	04d2      	lsls	r2, r2, #19
 800a4c2:	d505      	bpl.n	800a4d0 <__sflush_r+0x80>
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	d102      	bne.n	800a4ce <__sflush_r+0x7e>
 800a4c8:	682b      	ldr	r3, [r5, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d100      	bne.n	800a4d0 <__sflush_r+0x80>
 800a4ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800a4d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4d2:	602e      	str	r6, [r5, #0]
 800a4d4:	2900      	cmp	r1, #0
 800a4d6:	d017      	beq.n	800a508 <__sflush_r+0xb8>
 800a4d8:	0023      	movs	r3, r4
 800a4da:	3344      	adds	r3, #68	@ 0x44
 800a4dc:	4299      	cmp	r1, r3
 800a4de:	d002      	beq.n	800a4e6 <__sflush_r+0x96>
 800a4e0:	0028      	movs	r0, r5
 800a4e2:	f7ff f9b5 	bl	8009850 <_free_r>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4ea:	e00d      	b.n	800a508 <__sflush_r+0xb8>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	0028      	movs	r0, r5
 800a4f0:	47b8      	blx	r7
 800a4f2:	0002      	movs	r2, r0
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	d1c6      	bne.n	800a486 <__sflush_r+0x36>
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0c3      	beq.n	800a486 <__sflush_r+0x36>
 800a4fe:	2b1d      	cmp	r3, #29
 800a500:	d001      	beq.n	800a506 <__sflush_r+0xb6>
 800a502:	2b16      	cmp	r3, #22
 800a504:	d11a      	bne.n	800a53c <__sflush_r+0xec>
 800a506:	602e      	str	r6, [r5, #0]
 800a508:	2000      	movs	r0, #0
 800a50a:	e01e      	b.n	800a54a <__sflush_r+0xfa>
 800a50c:	690e      	ldr	r6, [r1, #16]
 800a50e:	2e00      	cmp	r6, #0
 800a510:	d0fa      	beq.n	800a508 <__sflush_r+0xb8>
 800a512:	680f      	ldr	r7, [r1, #0]
 800a514:	600e      	str	r6, [r1, #0]
 800a516:	1bba      	subs	r2, r7, r6
 800a518:	9201      	str	r2, [sp, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	079b      	lsls	r3, r3, #30
 800a51e:	d100      	bne.n	800a522 <__sflush_r+0xd2>
 800a520:	694a      	ldr	r2, [r1, #20]
 800a522:	60a2      	str	r2, [r4, #8]
 800a524:	9b01      	ldr	r3, [sp, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	ddee      	ble.n	800a508 <__sflush_r+0xb8>
 800a52a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a52c:	0032      	movs	r2, r6
 800a52e:	001f      	movs	r7, r3
 800a530:	0028      	movs	r0, r5
 800a532:	9b01      	ldr	r3, [sp, #4]
 800a534:	6a21      	ldr	r1, [r4, #32]
 800a536:	47b8      	blx	r7
 800a538:	2800      	cmp	r0, #0
 800a53a:	dc07      	bgt.n	800a54c <__sflush_r+0xfc>
 800a53c:	89a2      	ldrh	r2, [r4, #12]
 800a53e:	2340      	movs	r3, #64	@ 0x40
 800a540:	2001      	movs	r0, #1
 800a542:	4313      	orrs	r3, r2
 800a544:	b21b      	sxth	r3, r3
 800a546:	81a3      	strh	r3, [r4, #12]
 800a548:	4240      	negs	r0, r0
 800a54a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	1836      	adds	r6, r6, r0
 800a550:	1a1b      	subs	r3, r3, r0
 800a552:	9301      	str	r3, [sp, #4]
 800a554:	e7e6      	b.n	800a524 <__sflush_r+0xd4>
 800a556:	46c0      	nop			@ (mov r8, r8)
 800a558:	20400001 	.word	0x20400001

0800a55c <_fflush_r>:
 800a55c:	690b      	ldr	r3, [r1, #16]
 800a55e:	b570      	push	{r4, r5, r6, lr}
 800a560:	0005      	movs	r5, r0
 800a562:	000c      	movs	r4, r1
 800a564:	2b00      	cmp	r3, #0
 800a566:	d102      	bne.n	800a56e <_fflush_r+0x12>
 800a568:	2500      	movs	r5, #0
 800a56a:	0028      	movs	r0, r5
 800a56c:	bd70      	pop	{r4, r5, r6, pc}
 800a56e:	2800      	cmp	r0, #0
 800a570:	d004      	beq.n	800a57c <_fflush_r+0x20>
 800a572:	6a03      	ldr	r3, [r0, #32]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <_fflush_r+0x20>
 800a578:	f7fe f99e 	bl	80088b8 <__sinit>
 800a57c:	220c      	movs	r2, #12
 800a57e:	5ea3      	ldrsh	r3, [r4, r2]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d0f1      	beq.n	800a568 <_fflush_r+0xc>
 800a584:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a586:	07d2      	lsls	r2, r2, #31
 800a588:	d404      	bmi.n	800a594 <_fflush_r+0x38>
 800a58a:	059b      	lsls	r3, r3, #22
 800a58c:	d402      	bmi.n	800a594 <_fflush_r+0x38>
 800a58e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a590:	f7fe fadb 	bl	8008b4a <__retarget_lock_acquire_recursive>
 800a594:	0028      	movs	r0, r5
 800a596:	0021      	movs	r1, r4
 800a598:	f7ff ff5a 	bl	800a450 <__sflush_r>
 800a59c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a59e:	0005      	movs	r5, r0
 800a5a0:	07db      	lsls	r3, r3, #31
 800a5a2:	d4e2      	bmi.n	800a56a <_fflush_r+0xe>
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	059b      	lsls	r3, r3, #22
 800a5a8:	d4df      	bmi.n	800a56a <_fflush_r+0xe>
 800a5aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5ac:	f7fe face 	bl	8008b4c <__retarget_lock_release_recursive>
 800a5b0:	e7db      	b.n	800a56a <_fflush_r+0xe>

0800a5b2 <memmove>:
 800a5b2:	b510      	push	{r4, lr}
 800a5b4:	4288      	cmp	r0, r1
 800a5b6:	d902      	bls.n	800a5be <memmove+0xc>
 800a5b8:	188b      	adds	r3, r1, r2
 800a5ba:	4298      	cmp	r0, r3
 800a5bc:	d308      	bcc.n	800a5d0 <memmove+0x1e>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d007      	beq.n	800a5d4 <memmove+0x22>
 800a5c4:	5ccc      	ldrb	r4, [r1, r3]
 800a5c6:	54c4      	strb	r4, [r0, r3]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	e7f9      	b.n	800a5c0 <memmove+0xe>
 800a5cc:	5c8b      	ldrb	r3, [r1, r2]
 800a5ce:	5483      	strb	r3, [r0, r2]
 800a5d0:	3a01      	subs	r2, #1
 800a5d2:	d2fb      	bcs.n	800a5cc <memmove+0x1a>
 800a5d4:	bd10      	pop	{r4, pc}
	...

0800a5d8 <_sbrk_r>:
 800a5d8:	2300      	movs	r3, #0
 800a5da:	b570      	push	{r4, r5, r6, lr}
 800a5dc:	4d06      	ldr	r5, [pc, #24]	@ (800a5f8 <_sbrk_r+0x20>)
 800a5de:	0004      	movs	r4, r0
 800a5e0:	0008      	movs	r0, r1
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	f7fa fa56 	bl	8004a94 <_sbrk>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d103      	bne.n	800a5f4 <_sbrk_r+0x1c>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d000      	beq.n	800a5f4 <_sbrk_r+0x1c>
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	bd70      	pop	{r4, r5, r6, pc}
 800a5f6:	46c0      	nop			@ (mov r8, r8)
 800a5f8:	20000518 	.word	0x20000518

0800a5fc <memcpy>:
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	b510      	push	{r4, lr}
 800a600:	429a      	cmp	r2, r3
 800a602:	d100      	bne.n	800a606 <memcpy+0xa>
 800a604:	bd10      	pop	{r4, pc}
 800a606:	5ccc      	ldrb	r4, [r1, r3]
 800a608:	54c4      	strb	r4, [r0, r3]
 800a60a:	3301      	adds	r3, #1
 800a60c:	e7f8      	b.n	800a600 <memcpy+0x4>
	...

0800a610 <__assert_func>:
 800a610:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a612:	0014      	movs	r4, r2
 800a614:	001a      	movs	r2, r3
 800a616:	4b09      	ldr	r3, [pc, #36]	@ (800a63c <__assert_func+0x2c>)
 800a618:	0005      	movs	r5, r0
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	000e      	movs	r6, r1
 800a61e:	68d8      	ldr	r0, [r3, #12]
 800a620:	4b07      	ldr	r3, [pc, #28]	@ (800a640 <__assert_func+0x30>)
 800a622:	2c00      	cmp	r4, #0
 800a624:	d101      	bne.n	800a62a <__assert_func+0x1a>
 800a626:	4b07      	ldr	r3, [pc, #28]	@ (800a644 <__assert_func+0x34>)
 800a628:	001c      	movs	r4, r3
 800a62a:	4907      	ldr	r1, [pc, #28]	@ (800a648 <__assert_func+0x38>)
 800a62c:	9301      	str	r3, [sp, #4]
 800a62e:	9402      	str	r4, [sp, #8]
 800a630:	002b      	movs	r3, r5
 800a632:	9600      	str	r6, [sp, #0]
 800a634:	f000 f886 	bl	800a744 <fiprintf>
 800a638:	f000 f894 	bl	800a764 <abort>
 800a63c:	20000024 	.word	0x20000024
 800a640:	0800b041 	.word	0x0800b041
 800a644:	0800b07c 	.word	0x0800b07c
 800a648:	0800b04e 	.word	0x0800b04e

0800a64c <_calloc_r>:
 800a64c:	b570      	push	{r4, r5, r6, lr}
 800a64e:	0c0b      	lsrs	r3, r1, #16
 800a650:	0c15      	lsrs	r5, r2, #16
 800a652:	2b00      	cmp	r3, #0
 800a654:	d11e      	bne.n	800a694 <_calloc_r+0x48>
 800a656:	2d00      	cmp	r5, #0
 800a658:	d10c      	bne.n	800a674 <_calloc_r+0x28>
 800a65a:	b289      	uxth	r1, r1
 800a65c:	b294      	uxth	r4, r2
 800a65e:	434c      	muls	r4, r1
 800a660:	0021      	movs	r1, r4
 800a662:	f7ff f96b 	bl	800993c <_malloc_r>
 800a666:	1e05      	subs	r5, r0, #0
 800a668:	d01b      	beq.n	800a6a2 <_calloc_r+0x56>
 800a66a:	0022      	movs	r2, r4
 800a66c:	2100      	movs	r1, #0
 800a66e:	f7fe f9e7 	bl	8008a40 <memset>
 800a672:	e016      	b.n	800a6a2 <_calloc_r+0x56>
 800a674:	1c2b      	adds	r3, r5, #0
 800a676:	1c0c      	adds	r4, r1, #0
 800a678:	b289      	uxth	r1, r1
 800a67a:	b292      	uxth	r2, r2
 800a67c:	434a      	muls	r2, r1
 800a67e:	b29b      	uxth	r3, r3
 800a680:	b2a1      	uxth	r1, r4
 800a682:	4359      	muls	r1, r3
 800a684:	0c14      	lsrs	r4, r2, #16
 800a686:	190c      	adds	r4, r1, r4
 800a688:	0c23      	lsrs	r3, r4, #16
 800a68a:	d107      	bne.n	800a69c <_calloc_r+0x50>
 800a68c:	0424      	lsls	r4, r4, #16
 800a68e:	b292      	uxth	r2, r2
 800a690:	4314      	orrs	r4, r2
 800a692:	e7e5      	b.n	800a660 <_calloc_r+0x14>
 800a694:	2d00      	cmp	r5, #0
 800a696:	d101      	bne.n	800a69c <_calloc_r+0x50>
 800a698:	1c14      	adds	r4, r2, #0
 800a69a:	e7ed      	b.n	800a678 <_calloc_r+0x2c>
 800a69c:	230c      	movs	r3, #12
 800a69e:	2500      	movs	r5, #0
 800a6a0:	6003      	str	r3, [r0, #0]
 800a6a2:	0028      	movs	r0, r5
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}

0800a6a6 <__ascii_mbtowc>:
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	2900      	cmp	r1, #0
 800a6aa:	d100      	bne.n	800a6ae <__ascii_mbtowc+0x8>
 800a6ac:	a901      	add	r1, sp, #4
 800a6ae:	1e10      	subs	r0, r2, #0
 800a6b0:	d006      	beq.n	800a6c0 <__ascii_mbtowc+0x1a>
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d006      	beq.n	800a6c4 <__ascii_mbtowc+0x1e>
 800a6b6:	7813      	ldrb	r3, [r2, #0]
 800a6b8:	600b      	str	r3, [r1, #0]
 800a6ba:	7810      	ldrb	r0, [r2, #0]
 800a6bc:	1e43      	subs	r3, r0, #1
 800a6be:	4198      	sbcs	r0, r3
 800a6c0:	b002      	add	sp, #8
 800a6c2:	4770      	bx	lr
 800a6c4:	2002      	movs	r0, #2
 800a6c6:	4240      	negs	r0, r0
 800a6c8:	e7fa      	b.n	800a6c0 <__ascii_mbtowc+0x1a>

0800a6ca <_realloc_r>:
 800a6ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6cc:	0006      	movs	r6, r0
 800a6ce:	000c      	movs	r4, r1
 800a6d0:	0015      	movs	r5, r2
 800a6d2:	2900      	cmp	r1, #0
 800a6d4:	d105      	bne.n	800a6e2 <_realloc_r+0x18>
 800a6d6:	0011      	movs	r1, r2
 800a6d8:	f7ff f930 	bl	800993c <_malloc_r>
 800a6dc:	0004      	movs	r4, r0
 800a6de:	0020      	movs	r0, r4
 800a6e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6e2:	2a00      	cmp	r2, #0
 800a6e4:	d103      	bne.n	800a6ee <_realloc_r+0x24>
 800a6e6:	f7ff f8b3 	bl	8009850 <_free_r>
 800a6ea:	002c      	movs	r4, r5
 800a6ec:	e7f7      	b.n	800a6de <_realloc_r+0x14>
 800a6ee:	f000 f840 	bl	800a772 <_malloc_usable_size_r>
 800a6f2:	0007      	movs	r7, r0
 800a6f4:	4285      	cmp	r5, r0
 800a6f6:	d802      	bhi.n	800a6fe <_realloc_r+0x34>
 800a6f8:	0843      	lsrs	r3, r0, #1
 800a6fa:	42ab      	cmp	r3, r5
 800a6fc:	d3ef      	bcc.n	800a6de <_realloc_r+0x14>
 800a6fe:	0029      	movs	r1, r5
 800a700:	0030      	movs	r0, r6
 800a702:	f7ff f91b 	bl	800993c <_malloc_r>
 800a706:	9001      	str	r0, [sp, #4]
 800a708:	2800      	cmp	r0, #0
 800a70a:	d101      	bne.n	800a710 <_realloc_r+0x46>
 800a70c:	9c01      	ldr	r4, [sp, #4]
 800a70e:	e7e6      	b.n	800a6de <_realloc_r+0x14>
 800a710:	002a      	movs	r2, r5
 800a712:	42bd      	cmp	r5, r7
 800a714:	d900      	bls.n	800a718 <_realloc_r+0x4e>
 800a716:	003a      	movs	r2, r7
 800a718:	0021      	movs	r1, r4
 800a71a:	9801      	ldr	r0, [sp, #4]
 800a71c:	f7ff ff6e 	bl	800a5fc <memcpy>
 800a720:	0021      	movs	r1, r4
 800a722:	0030      	movs	r0, r6
 800a724:	f7ff f894 	bl	8009850 <_free_r>
 800a728:	e7f0      	b.n	800a70c <_realloc_r+0x42>

0800a72a <__ascii_wctomb>:
 800a72a:	0003      	movs	r3, r0
 800a72c:	1e08      	subs	r0, r1, #0
 800a72e:	d005      	beq.n	800a73c <__ascii_wctomb+0x12>
 800a730:	2aff      	cmp	r2, #255	@ 0xff
 800a732:	d904      	bls.n	800a73e <__ascii_wctomb+0x14>
 800a734:	228a      	movs	r2, #138	@ 0x8a
 800a736:	2001      	movs	r0, #1
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	4240      	negs	r0, r0
 800a73c:	4770      	bx	lr
 800a73e:	2001      	movs	r0, #1
 800a740:	700a      	strb	r2, [r1, #0]
 800a742:	e7fb      	b.n	800a73c <__ascii_wctomb+0x12>

0800a744 <fiprintf>:
 800a744:	b40e      	push	{r1, r2, r3}
 800a746:	b517      	push	{r0, r1, r2, r4, lr}
 800a748:	4c05      	ldr	r4, [pc, #20]	@ (800a760 <fiprintf+0x1c>)
 800a74a:	ab05      	add	r3, sp, #20
 800a74c:	cb04      	ldmia	r3!, {r2}
 800a74e:	0001      	movs	r1, r0
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	9301      	str	r3, [sp, #4]
 800a754:	f000 f83c 	bl	800a7d0 <_vfiprintf_r>
 800a758:	bc1e      	pop	{r1, r2, r3, r4}
 800a75a:	bc08      	pop	{r3}
 800a75c:	b003      	add	sp, #12
 800a75e:	4718      	bx	r3
 800a760:	20000024 	.word	0x20000024

0800a764 <abort>:
 800a764:	2006      	movs	r0, #6
 800a766:	b510      	push	{r4, lr}
 800a768:	f000 fa18 	bl	800ab9c <raise>
 800a76c:	2001      	movs	r0, #1
 800a76e:	f7fa f91e 	bl	80049ae <_exit>

0800a772 <_malloc_usable_size_r>:
 800a772:	1f0b      	subs	r3, r1, #4
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	1f18      	subs	r0, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	da01      	bge.n	800a780 <_malloc_usable_size_r+0xe>
 800a77c:	580b      	ldr	r3, [r1, r0]
 800a77e:	18c0      	adds	r0, r0, r3
 800a780:	4770      	bx	lr

0800a782 <__sfputc_r>:
 800a782:	6893      	ldr	r3, [r2, #8]
 800a784:	b510      	push	{r4, lr}
 800a786:	3b01      	subs	r3, #1
 800a788:	6093      	str	r3, [r2, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	da04      	bge.n	800a798 <__sfputc_r+0x16>
 800a78e:	6994      	ldr	r4, [r2, #24]
 800a790:	42a3      	cmp	r3, r4
 800a792:	db07      	blt.n	800a7a4 <__sfputc_r+0x22>
 800a794:	290a      	cmp	r1, #10
 800a796:	d005      	beq.n	800a7a4 <__sfputc_r+0x22>
 800a798:	6813      	ldr	r3, [r2, #0]
 800a79a:	1c58      	adds	r0, r3, #1
 800a79c:	6010      	str	r0, [r2, #0]
 800a79e:	7019      	strb	r1, [r3, #0]
 800a7a0:	0008      	movs	r0, r1
 800a7a2:	bd10      	pop	{r4, pc}
 800a7a4:	f000 f930 	bl	800aa08 <__swbuf_r>
 800a7a8:	0001      	movs	r1, r0
 800a7aa:	e7f9      	b.n	800a7a0 <__sfputc_r+0x1e>

0800a7ac <__sfputs_r>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	0006      	movs	r6, r0
 800a7b0:	000f      	movs	r7, r1
 800a7b2:	0014      	movs	r4, r2
 800a7b4:	18d5      	adds	r5, r2, r3
 800a7b6:	42ac      	cmp	r4, r5
 800a7b8:	d101      	bne.n	800a7be <__sfputs_r+0x12>
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	e007      	b.n	800a7ce <__sfputs_r+0x22>
 800a7be:	7821      	ldrb	r1, [r4, #0]
 800a7c0:	003a      	movs	r2, r7
 800a7c2:	0030      	movs	r0, r6
 800a7c4:	f7ff ffdd 	bl	800a782 <__sfputc_r>
 800a7c8:	3401      	adds	r4, #1
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	d1f3      	bne.n	800a7b6 <__sfputs_r+0xa>
 800a7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7d0 <_vfiprintf_r>:
 800a7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7d2:	b0a1      	sub	sp, #132	@ 0x84
 800a7d4:	000f      	movs	r7, r1
 800a7d6:	0015      	movs	r5, r2
 800a7d8:	001e      	movs	r6, r3
 800a7da:	9003      	str	r0, [sp, #12]
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d004      	beq.n	800a7ea <_vfiprintf_r+0x1a>
 800a7e0:	6a03      	ldr	r3, [r0, #32]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <_vfiprintf_r+0x1a>
 800a7e6:	f7fe f867 	bl	80088b8 <__sinit>
 800a7ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7ec:	07db      	lsls	r3, r3, #31
 800a7ee:	d405      	bmi.n	800a7fc <_vfiprintf_r+0x2c>
 800a7f0:	89bb      	ldrh	r3, [r7, #12]
 800a7f2:	059b      	lsls	r3, r3, #22
 800a7f4:	d402      	bmi.n	800a7fc <_vfiprintf_r+0x2c>
 800a7f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a7f8:	f7fe f9a7 	bl	8008b4a <__retarget_lock_acquire_recursive>
 800a7fc:	89bb      	ldrh	r3, [r7, #12]
 800a7fe:	071b      	lsls	r3, r3, #28
 800a800:	d502      	bpl.n	800a808 <_vfiprintf_r+0x38>
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d113      	bne.n	800a830 <_vfiprintf_r+0x60>
 800a808:	0039      	movs	r1, r7
 800a80a:	9803      	ldr	r0, [sp, #12]
 800a80c:	f000 f93e 	bl	800aa8c <__swsetup_r>
 800a810:	2800      	cmp	r0, #0
 800a812:	d00d      	beq.n	800a830 <_vfiprintf_r+0x60>
 800a814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a816:	07db      	lsls	r3, r3, #31
 800a818:	d503      	bpl.n	800a822 <_vfiprintf_r+0x52>
 800a81a:	2001      	movs	r0, #1
 800a81c:	4240      	negs	r0, r0
 800a81e:	b021      	add	sp, #132	@ 0x84
 800a820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a822:	89bb      	ldrh	r3, [r7, #12]
 800a824:	059b      	lsls	r3, r3, #22
 800a826:	d4f8      	bmi.n	800a81a <_vfiprintf_r+0x4a>
 800a828:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a82a:	f7fe f98f 	bl	8008b4c <__retarget_lock_release_recursive>
 800a82e:	e7f4      	b.n	800a81a <_vfiprintf_r+0x4a>
 800a830:	2300      	movs	r3, #0
 800a832:	ac08      	add	r4, sp, #32
 800a834:	6163      	str	r3, [r4, #20]
 800a836:	3320      	adds	r3, #32
 800a838:	7663      	strb	r3, [r4, #25]
 800a83a:	3310      	adds	r3, #16
 800a83c:	76a3      	strb	r3, [r4, #26]
 800a83e:	9607      	str	r6, [sp, #28]
 800a840:	002e      	movs	r6, r5
 800a842:	7833      	ldrb	r3, [r6, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <_vfiprintf_r+0x7c>
 800a848:	2b25      	cmp	r3, #37	@ 0x25
 800a84a:	d148      	bne.n	800a8de <_vfiprintf_r+0x10e>
 800a84c:	1b73      	subs	r3, r6, r5
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	42ae      	cmp	r6, r5
 800a852:	d00b      	beq.n	800a86c <_vfiprintf_r+0x9c>
 800a854:	002a      	movs	r2, r5
 800a856:	0039      	movs	r1, r7
 800a858:	9803      	ldr	r0, [sp, #12]
 800a85a:	f7ff ffa7 	bl	800a7ac <__sfputs_r>
 800a85e:	3001      	adds	r0, #1
 800a860:	d100      	bne.n	800a864 <_vfiprintf_r+0x94>
 800a862:	e0ae      	b.n	800a9c2 <_vfiprintf_r+0x1f2>
 800a864:	6963      	ldr	r3, [r4, #20]
 800a866:	9a05      	ldr	r2, [sp, #20]
 800a868:	189b      	adds	r3, r3, r2
 800a86a:	6163      	str	r3, [r4, #20]
 800a86c:	7833      	ldrb	r3, [r6, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d100      	bne.n	800a874 <_vfiprintf_r+0xa4>
 800a872:	e0a6      	b.n	800a9c2 <_vfiprintf_r+0x1f2>
 800a874:	2201      	movs	r2, #1
 800a876:	2300      	movs	r3, #0
 800a878:	4252      	negs	r2, r2
 800a87a:	6062      	str	r2, [r4, #4]
 800a87c:	a904      	add	r1, sp, #16
 800a87e:	3254      	adds	r2, #84	@ 0x54
 800a880:	1852      	adds	r2, r2, r1
 800a882:	1c75      	adds	r5, r6, #1
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	60e3      	str	r3, [r4, #12]
 800a888:	60a3      	str	r3, [r4, #8]
 800a88a:	7013      	strb	r3, [r2, #0]
 800a88c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a88e:	4b59      	ldr	r3, [pc, #356]	@ (800a9f4 <_vfiprintf_r+0x224>)
 800a890:	2205      	movs	r2, #5
 800a892:	0018      	movs	r0, r3
 800a894:	7829      	ldrb	r1, [r5, #0]
 800a896:	9305      	str	r3, [sp, #20]
 800a898:	f7fe f959 	bl	8008b4e <memchr>
 800a89c:	1c6e      	adds	r6, r5, #1
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d11f      	bne.n	800a8e2 <_vfiprintf_r+0x112>
 800a8a2:	6822      	ldr	r2, [r4, #0]
 800a8a4:	06d3      	lsls	r3, r2, #27
 800a8a6:	d504      	bpl.n	800a8b2 <_vfiprintf_r+0xe2>
 800a8a8:	2353      	movs	r3, #83	@ 0x53
 800a8aa:	a904      	add	r1, sp, #16
 800a8ac:	185b      	adds	r3, r3, r1
 800a8ae:	2120      	movs	r1, #32
 800a8b0:	7019      	strb	r1, [r3, #0]
 800a8b2:	0713      	lsls	r3, r2, #28
 800a8b4:	d504      	bpl.n	800a8c0 <_vfiprintf_r+0xf0>
 800a8b6:	2353      	movs	r3, #83	@ 0x53
 800a8b8:	a904      	add	r1, sp, #16
 800a8ba:	185b      	adds	r3, r3, r1
 800a8bc:	212b      	movs	r1, #43	@ 0x2b
 800a8be:	7019      	strb	r1, [r3, #0]
 800a8c0:	782b      	ldrb	r3, [r5, #0]
 800a8c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8c4:	d016      	beq.n	800a8f4 <_vfiprintf_r+0x124>
 800a8c6:	002e      	movs	r6, r5
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	200a      	movs	r0, #10
 800a8cc:	68e3      	ldr	r3, [r4, #12]
 800a8ce:	7832      	ldrb	r2, [r6, #0]
 800a8d0:	1c75      	adds	r5, r6, #1
 800a8d2:	3a30      	subs	r2, #48	@ 0x30
 800a8d4:	2a09      	cmp	r2, #9
 800a8d6:	d950      	bls.n	800a97a <_vfiprintf_r+0x1aa>
 800a8d8:	2900      	cmp	r1, #0
 800a8da:	d111      	bne.n	800a900 <_vfiprintf_r+0x130>
 800a8dc:	e017      	b.n	800a90e <_vfiprintf_r+0x13e>
 800a8de:	3601      	adds	r6, #1
 800a8e0:	e7af      	b.n	800a842 <_vfiprintf_r+0x72>
 800a8e2:	9b05      	ldr	r3, [sp, #20]
 800a8e4:	6822      	ldr	r2, [r4, #0]
 800a8e6:	1ac0      	subs	r0, r0, r3
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	4083      	lsls	r3, r0
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	0035      	movs	r5, r6
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	e7cc      	b.n	800a88e <_vfiprintf_r+0xbe>
 800a8f4:	9b07      	ldr	r3, [sp, #28]
 800a8f6:	1d19      	adds	r1, r3, #4
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	9107      	str	r1, [sp, #28]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	db01      	blt.n	800a904 <_vfiprintf_r+0x134>
 800a900:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a902:	e004      	b.n	800a90e <_vfiprintf_r+0x13e>
 800a904:	425b      	negs	r3, r3
 800a906:	60e3      	str	r3, [r4, #12]
 800a908:	2302      	movs	r3, #2
 800a90a:	4313      	orrs	r3, r2
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	7833      	ldrb	r3, [r6, #0]
 800a910:	2b2e      	cmp	r3, #46	@ 0x2e
 800a912:	d10c      	bne.n	800a92e <_vfiprintf_r+0x15e>
 800a914:	7873      	ldrb	r3, [r6, #1]
 800a916:	2b2a      	cmp	r3, #42	@ 0x2a
 800a918:	d134      	bne.n	800a984 <_vfiprintf_r+0x1b4>
 800a91a:	9b07      	ldr	r3, [sp, #28]
 800a91c:	3602      	adds	r6, #2
 800a91e:	1d1a      	adds	r2, r3, #4
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	9207      	str	r2, [sp, #28]
 800a924:	2b00      	cmp	r3, #0
 800a926:	da01      	bge.n	800a92c <_vfiprintf_r+0x15c>
 800a928:	2301      	movs	r3, #1
 800a92a:	425b      	negs	r3, r3
 800a92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92e:	4d32      	ldr	r5, [pc, #200]	@ (800a9f8 <_vfiprintf_r+0x228>)
 800a930:	2203      	movs	r2, #3
 800a932:	0028      	movs	r0, r5
 800a934:	7831      	ldrb	r1, [r6, #0]
 800a936:	f7fe f90a 	bl	8008b4e <memchr>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d006      	beq.n	800a94c <_vfiprintf_r+0x17c>
 800a93e:	2340      	movs	r3, #64	@ 0x40
 800a940:	1b40      	subs	r0, r0, r5
 800a942:	4083      	lsls	r3, r0
 800a944:	6822      	ldr	r2, [r4, #0]
 800a946:	3601      	adds	r6, #1
 800a948:	4313      	orrs	r3, r2
 800a94a:	6023      	str	r3, [r4, #0]
 800a94c:	7831      	ldrb	r1, [r6, #0]
 800a94e:	2206      	movs	r2, #6
 800a950:	482a      	ldr	r0, [pc, #168]	@ (800a9fc <_vfiprintf_r+0x22c>)
 800a952:	1c75      	adds	r5, r6, #1
 800a954:	7621      	strb	r1, [r4, #24]
 800a956:	f7fe f8fa 	bl	8008b4e <memchr>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d040      	beq.n	800a9e0 <_vfiprintf_r+0x210>
 800a95e:	4b28      	ldr	r3, [pc, #160]	@ (800aa00 <_vfiprintf_r+0x230>)
 800a960:	2b00      	cmp	r3, #0
 800a962:	d122      	bne.n	800a9aa <_vfiprintf_r+0x1da>
 800a964:	2207      	movs	r2, #7
 800a966:	9b07      	ldr	r3, [sp, #28]
 800a968:	3307      	adds	r3, #7
 800a96a:	4393      	bics	r3, r2
 800a96c:	3308      	adds	r3, #8
 800a96e:	9307      	str	r3, [sp, #28]
 800a970:	6963      	ldr	r3, [r4, #20]
 800a972:	9a04      	ldr	r2, [sp, #16]
 800a974:	189b      	adds	r3, r3, r2
 800a976:	6163      	str	r3, [r4, #20]
 800a978:	e762      	b.n	800a840 <_vfiprintf_r+0x70>
 800a97a:	4343      	muls	r3, r0
 800a97c:	002e      	movs	r6, r5
 800a97e:	2101      	movs	r1, #1
 800a980:	189b      	adds	r3, r3, r2
 800a982:	e7a4      	b.n	800a8ce <_vfiprintf_r+0xfe>
 800a984:	2300      	movs	r3, #0
 800a986:	200a      	movs	r0, #10
 800a988:	0019      	movs	r1, r3
 800a98a:	3601      	adds	r6, #1
 800a98c:	6063      	str	r3, [r4, #4]
 800a98e:	7832      	ldrb	r2, [r6, #0]
 800a990:	1c75      	adds	r5, r6, #1
 800a992:	3a30      	subs	r2, #48	@ 0x30
 800a994:	2a09      	cmp	r2, #9
 800a996:	d903      	bls.n	800a9a0 <_vfiprintf_r+0x1d0>
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d0c8      	beq.n	800a92e <_vfiprintf_r+0x15e>
 800a99c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a99e:	e7c6      	b.n	800a92e <_vfiprintf_r+0x15e>
 800a9a0:	4341      	muls	r1, r0
 800a9a2:	002e      	movs	r6, r5
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	1889      	adds	r1, r1, r2
 800a9a8:	e7f1      	b.n	800a98e <_vfiprintf_r+0x1be>
 800a9aa:	aa07      	add	r2, sp, #28
 800a9ac:	9200      	str	r2, [sp, #0]
 800a9ae:	0021      	movs	r1, r4
 800a9b0:	003a      	movs	r2, r7
 800a9b2:	4b14      	ldr	r3, [pc, #80]	@ (800aa04 <_vfiprintf_r+0x234>)
 800a9b4:	9803      	ldr	r0, [sp, #12]
 800a9b6:	f7fd fb35 	bl	8008024 <_printf_float>
 800a9ba:	9004      	str	r0, [sp, #16]
 800a9bc:	9b04      	ldr	r3, [sp, #16]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	d1d6      	bne.n	800a970 <_vfiprintf_r+0x1a0>
 800a9c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9c4:	07db      	lsls	r3, r3, #31
 800a9c6:	d405      	bmi.n	800a9d4 <_vfiprintf_r+0x204>
 800a9c8:	89bb      	ldrh	r3, [r7, #12]
 800a9ca:	059b      	lsls	r3, r3, #22
 800a9cc:	d402      	bmi.n	800a9d4 <_vfiprintf_r+0x204>
 800a9ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a9d0:	f7fe f8bc 	bl	8008b4c <__retarget_lock_release_recursive>
 800a9d4:	89bb      	ldrh	r3, [r7, #12]
 800a9d6:	065b      	lsls	r3, r3, #25
 800a9d8:	d500      	bpl.n	800a9dc <_vfiprintf_r+0x20c>
 800a9da:	e71e      	b.n	800a81a <_vfiprintf_r+0x4a>
 800a9dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a9de:	e71e      	b.n	800a81e <_vfiprintf_r+0x4e>
 800a9e0:	aa07      	add	r2, sp, #28
 800a9e2:	9200      	str	r2, [sp, #0]
 800a9e4:	0021      	movs	r1, r4
 800a9e6:	003a      	movs	r2, r7
 800a9e8:	4b06      	ldr	r3, [pc, #24]	@ (800aa04 <_vfiprintf_r+0x234>)
 800a9ea:	9803      	ldr	r0, [sp, #12]
 800a9ec:	f7fd fdc8 	bl	8008580 <_printf_i>
 800a9f0:	e7e3      	b.n	800a9ba <_vfiprintf_r+0x1ea>
 800a9f2:	46c0      	nop			@ (mov r8, r8)
 800a9f4:	0800b026 	.word	0x0800b026
 800a9f8:	0800b02c 	.word	0x0800b02c
 800a9fc:	0800b030 	.word	0x0800b030
 800aa00:	08008025 	.word	0x08008025
 800aa04:	0800a7ad 	.word	0x0800a7ad

0800aa08 <__swbuf_r>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	0006      	movs	r6, r0
 800aa0c:	000d      	movs	r5, r1
 800aa0e:	0014      	movs	r4, r2
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d004      	beq.n	800aa1e <__swbuf_r+0x16>
 800aa14:	6a03      	ldr	r3, [r0, #32]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <__swbuf_r+0x16>
 800aa1a:	f7fd ff4d 	bl	80088b8 <__sinit>
 800aa1e:	69a3      	ldr	r3, [r4, #24]
 800aa20:	60a3      	str	r3, [r4, #8]
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	071b      	lsls	r3, r3, #28
 800aa26:	d502      	bpl.n	800aa2e <__swbuf_r+0x26>
 800aa28:	6923      	ldr	r3, [r4, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d109      	bne.n	800aa42 <__swbuf_r+0x3a>
 800aa2e:	0021      	movs	r1, r4
 800aa30:	0030      	movs	r0, r6
 800aa32:	f000 f82b 	bl	800aa8c <__swsetup_r>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d003      	beq.n	800aa42 <__swbuf_r+0x3a>
 800aa3a:	2501      	movs	r5, #1
 800aa3c:	426d      	negs	r5, r5
 800aa3e:	0028      	movs	r0, r5
 800aa40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa42:	6923      	ldr	r3, [r4, #16]
 800aa44:	6820      	ldr	r0, [r4, #0]
 800aa46:	b2ef      	uxtb	r7, r5
 800aa48:	1ac0      	subs	r0, r0, r3
 800aa4a:	6963      	ldr	r3, [r4, #20]
 800aa4c:	b2ed      	uxtb	r5, r5
 800aa4e:	4283      	cmp	r3, r0
 800aa50:	dc05      	bgt.n	800aa5e <__swbuf_r+0x56>
 800aa52:	0021      	movs	r1, r4
 800aa54:	0030      	movs	r0, r6
 800aa56:	f7ff fd81 	bl	800a55c <_fflush_r>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d1ed      	bne.n	800aa3a <__swbuf_r+0x32>
 800aa5e:	68a3      	ldr	r3, [r4, #8]
 800aa60:	3001      	adds	r0, #1
 800aa62:	3b01      	subs	r3, #1
 800aa64:	60a3      	str	r3, [r4, #8]
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	1c5a      	adds	r2, r3, #1
 800aa6a:	6022      	str	r2, [r4, #0]
 800aa6c:	701f      	strb	r7, [r3, #0]
 800aa6e:	6963      	ldr	r3, [r4, #20]
 800aa70:	4283      	cmp	r3, r0
 800aa72:	d004      	beq.n	800aa7e <__swbuf_r+0x76>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	07db      	lsls	r3, r3, #31
 800aa78:	d5e1      	bpl.n	800aa3e <__swbuf_r+0x36>
 800aa7a:	2d0a      	cmp	r5, #10
 800aa7c:	d1df      	bne.n	800aa3e <__swbuf_r+0x36>
 800aa7e:	0021      	movs	r1, r4
 800aa80:	0030      	movs	r0, r6
 800aa82:	f7ff fd6b 	bl	800a55c <_fflush_r>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	d0d9      	beq.n	800aa3e <__swbuf_r+0x36>
 800aa8a:	e7d6      	b.n	800aa3a <__swbuf_r+0x32>

0800aa8c <__swsetup_r>:
 800aa8c:	4b2d      	ldr	r3, [pc, #180]	@ (800ab44 <__swsetup_r+0xb8>)
 800aa8e:	b570      	push	{r4, r5, r6, lr}
 800aa90:	0005      	movs	r5, r0
 800aa92:	6818      	ldr	r0, [r3, #0]
 800aa94:	000c      	movs	r4, r1
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d004      	beq.n	800aaa4 <__swsetup_r+0x18>
 800aa9a:	6a03      	ldr	r3, [r0, #32]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d101      	bne.n	800aaa4 <__swsetup_r+0x18>
 800aaa0:	f7fd ff0a 	bl	80088b8 <__sinit>
 800aaa4:	220c      	movs	r2, #12
 800aaa6:	5ea3      	ldrsh	r3, [r4, r2]
 800aaa8:	071a      	lsls	r2, r3, #28
 800aaaa:	d423      	bmi.n	800aaf4 <__swsetup_r+0x68>
 800aaac:	06da      	lsls	r2, r3, #27
 800aaae:	d407      	bmi.n	800aac0 <__swsetup_r+0x34>
 800aab0:	2209      	movs	r2, #9
 800aab2:	602a      	str	r2, [r5, #0]
 800aab4:	2240      	movs	r2, #64	@ 0x40
 800aab6:	2001      	movs	r0, #1
 800aab8:	4313      	orrs	r3, r2
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	4240      	negs	r0, r0
 800aabe:	e03a      	b.n	800ab36 <__swsetup_r+0xaa>
 800aac0:	075b      	lsls	r3, r3, #29
 800aac2:	d513      	bpl.n	800aaec <__swsetup_r+0x60>
 800aac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aac6:	2900      	cmp	r1, #0
 800aac8:	d008      	beq.n	800aadc <__swsetup_r+0x50>
 800aaca:	0023      	movs	r3, r4
 800aacc:	3344      	adds	r3, #68	@ 0x44
 800aace:	4299      	cmp	r1, r3
 800aad0:	d002      	beq.n	800aad8 <__swsetup_r+0x4c>
 800aad2:	0028      	movs	r0, r5
 800aad4:	f7fe febc 	bl	8009850 <_free_r>
 800aad8:	2300      	movs	r3, #0
 800aada:	6363      	str	r3, [r4, #52]	@ 0x34
 800aadc:	2224      	movs	r2, #36	@ 0x24
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	4393      	bics	r3, r2
 800aae2:	81a3      	strh	r3, [r4, #12]
 800aae4:	2300      	movs	r3, #0
 800aae6:	6063      	str	r3, [r4, #4]
 800aae8:	6923      	ldr	r3, [r4, #16]
 800aaea:	6023      	str	r3, [r4, #0]
 800aaec:	2308      	movs	r3, #8
 800aaee:	89a2      	ldrh	r2, [r4, #12]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	81a3      	strh	r3, [r4, #12]
 800aaf4:	6923      	ldr	r3, [r4, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10b      	bne.n	800ab12 <__swsetup_r+0x86>
 800aafa:	21a0      	movs	r1, #160	@ 0xa0
 800aafc:	2280      	movs	r2, #128	@ 0x80
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	0089      	lsls	r1, r1, #2
 800ab02:	0092      	lsls	r2, r2, #2
 800ab04:	400b      	ands	r3, r1
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d003      	beq.n	800ab12 <__swsetup_r+0x86>
 800ab0a:	0021      	movs	r1, r4
 800ab0c:	0028      	movs	r0, r5
 800ab0e:	f000 f88f 	bl	800ac30 <__smakebuf_r>
 800ab12:	220c      	movs	r2, #12
 800ab14:	5ea3      	ldrsh	r3, [r4, r2]
 800ab16:	2101      	movs	r1, #1
 800ab18:	001a      	movs	r2, r3
 800ab1a:	400a      	ands	r2, r1
 800ab1c:	420b      	tst	r3, r1
 800ab1e:	d00b      	beq.n	800ab38 <__swsetup_r+0xac>
 800ab20:	2200      	movs	r2, #0
 800ab22:	60a2      	str	r2, [r4, #8]
 800ab24:	6962      	ldr	r2, [r4, #20]
 800ab26:	4252      	negs	r2, r2
 800ab28:	61a2      	str	r2, [r4, #24]
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	6922      	ldr	r2, [r4, #16]
 800ab2e:	4282      	cmp	r2, r0
 800ab30:	d101      	bne.n	800ab36 <__swsetup_r+0xaa>
 800ab32:	061a      	lsls	r2, r3, #24
 800ab34:	d4be      	bmi.n	800aab4 <__swsetup_r+0x28>
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	0799      	lsls	r1, r3, #30
 800ab3a:	d400      	bmi.n	800ab3e <__swsetup_r+0xb2>
 800ab3c:	6962      	ldr	r2, [r4, #20]
 800ab3e:	60a2      	str	r2, [r4, #8]
 800ab40:	e7f3      	b.n	800ab2a <__swsetup_r+0x9e>
 800ab42:	46c0      	nop			@ (mov r8, r8)
 800ab44:	20000024 	.word	0x20000024

0800ab48 <_raise_r>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	0004      	movs	r4, r0
 800ab4c:	000d      	movs	r5, r1
 800ab4e:	291f      	cmp	r1, #31
 800ab50:	d904      	bls.n	800ab5c <_raise_r+0x14>
 800ab52:	2316      	movs	r3, #22
 800ab54:	6003      	str	r3, [r0, #0]
 800ab56:	2001      	movs	r0, #1
 800ab58:	4240      	negs	r0, r0
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}
 800ab5c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d004      	beq.n	800ab6c <_raise_r+0x24>
 800ab62:	008a      	lsls	r2, r1, #2
 800ab64:	189b      	adds	r3, r3, r2
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	2a00      	cmp	r2, #0
 800ab6a:	d108      	bne.n	800ab7e <_raise_r+0x36>
 800ab6c:	0020      	movs	r0, r4
 800ab6e:	f000 f831 	bl	800abd4 <_getpid_r>
 800ab72:	002a      	movs	r2, r5
 800ab74:	0001      	movs	r1, r0
 800ab76:	0020      	movs	r0, r4
 800ab78:	f000 f81a 	bl	800abb0 <_kill_r>
 800ab7c:	e7ed      	b.n	800ab5a <_raise_r+0x12>
 800ab7e:	2a01      	cmp	r2, #1
 800ab80:	d009      	beq.n	800ab96 <_raise_r+0x4e>
 800ab82:	1c51      	adds	r1, r2, #1
 800ab84:	d103      	bne.n	800ab8e <_raise_r+0x46>
 800ab86:	2316      	movs	r3, #22
 800ab88:	6003      	str	r3, [r0, #0]
 800ab8a:	2001      	movs	r0, #1
 800ab8c:	e7e5      	b.n	800ab5a <_raise_r+0x12>
 800ab8e:	2100      	movs	r1, #0
 800ab90:	0028      	movs	r0, r5
 800ab92:	6019      	str	r1, [r3, #0]
 800ab94:	4790      	blx	r2
 800ab96:	2000      	movs	r0, #0
 800ab98:	e7df      	b.n	800ab5a <_raise_r+0x12>
	...

0800ab9c <raise>:
 800ab9c:	b510      	push	{r4, lr}
 800ab9e:	4b03      	ldr	r3, [pc, #12]	@ (800abac <raise+0x10>)
 800aba0:	0001      	movs	r1, r0
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	f7ff ffd0 	bl	800ab48 <_raise_r>
 800aba8:	bd10      	pop	{r4, pc}
 800abaa:	46c0      	nop			@ (mov r8, r8)
 800abac:	20000024 	.word	0x20000024

0800abb0 <_kill_r>:
 800abb0:	2300      	movs	r3, #0
 800abb2:	b570      	push	{r4, r5, r6, lr}
 800abb4:	4d06      	ldr	r5, [pc, #24]	@ (800abd0 <_kill_r+0x20>)
 800abb6:	0004      	movs	r4, r0
 800abb8:	0008      	movs	r0, r1
 800abba:	0011      	movs	r1, r2
 800abbc:	602b      	str	r3, [r5, #0]
 800abbe:	f7f9 fee6 	bl	800498e <_kill>
 800abc2:	1c43      	adds	r3, r0, #1
 800abc4:	d103      	bne.n	800abce <_kill_r+0x1e>
 800abc6:	682b      	ldr	r3, [r5, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d000      	beq.n	800abce <_kill_r+0x1e>
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	bd70      	pop	{r4, r5, r6, pc}
 800abd0:	20000518 	.word	0x20000518

0800abd4 <_getpid_r>:
 800abd4:	b510      	push	{r4, lr}
 800abd6:	f7f9 fed4 	bl	8004982 <_getpid>
 800abda:	bd10      	pop	{r4, pc}

0800abdc <__swhatbuf_r>:
 800abdc:	b570      	push	{r4, r5, r6, lr}
 800abde:	000e      	movs	r6, r1
 800abe0:	001d      	movs	r5, r3
 800abe2:	230e      	movs	r3, #14
 800abe4:	5ec9      	ldrsh	r1, [r1, r3]
 800abe6:	0014      	movs	r4, r2
 800abe8:	b096      	sub	sp, #88	@ 0x58
 800abea:	2900      	cmp	r1, #0
 800abec:	da0c      	bge.n	800ac08 <__swhatbuf_r+0x2c>
 800abee:	89b2      	ldrh	r2, [r6, #12]
 800abf0:	2380      	movs	r3, #128	@ 0x80
 800abf2:	0011      	movs	r1, r2
 800abf4:	4019      	ands	r1, r3
 800abf6:	421a      	tst	r2, r3
 800abf8:	d114      	bne.n	800ac24 <__swhatbuf_r+0x48>
 800abfa:	2380      	movs	r3, #128	@ 0x80
 800abfc:	00db      	lsls	r3, r3, #3
 800abfe:	2000      	movs	r0, #0
 800ac00:	6029      	str	r1, [r5, #0]
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	b016      	add	sp, #88	@ 0x58
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	466a      	mov	r2, sp
 800ac0a:	f000 f853 	bl	800acb4 <_fstat_r>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	dbed      	blt.n	800abee <__swhatbuf_r+0x12>
 800ac12:	23f0      	movs	r3, #240	@ 0xf0
 800ac14:	9901      	ldr	r1, [sp, #4]
 800ac16:	021b      	lsls	r3, r3, #8
 800ac18:	4019      	ands	r1, r3
 800ac1a:	4b04      	ldr	r3, [pc, #16]	@ (800ac2c <__swhatbuf_r+0x50>)
 800ac1c:	18c9      	adds	r1, r1, r3
 800ac1e:	424b      	negs	r3, r1
 800ac20:	4159      	adcs	r1, r3
 800ac22:	e7ea      	b.n	800abfa <__swhatbuf_r+0x1e>
 800ac24:	2100      	movs	r1, #0
 800ac26:	2340      	movs	r3, #64	@ 0x40
 800ac28:	e7e9      	b.n	800abfe <__swhatbuf_r+0x22>
 800ac2a:	46c0      	nop			@ (mov r8, r8)
 800ac2c:	ffffe000 	.word	0xffffe000

0800ac30 <__smakebuf_r>:
 800ac30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac32:	2602      	movs	r6, #2
 800ac34:	898b      	ldrh	r3, [r1, #12]
 800ac36:	0005      	movs	r5, r0
 800ac38:	000c      	movs	r4, r1
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	4233      	tst	r3, r6
 800ac3e:	d007      	beq.n	800ac50 <__smakebuf_r+0x20>
 800ac40:	0023      	movs	r3, r4
 800ac42:	3347      	adds	r3, #71	@ 0x47
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	2301      	movs	r3, #1
 800ac4a:	6163      	str	r3, [r4, #20]
 800ac4c:	b005      	add	sp, #20
 800ac4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac50:	ab03      	add	r3, sp, #12
 800ac52:	aa02      	add	r2, sp, #8
 800ac54:	f7ff ffc2 	bl	800abdc <__swhatbuf_r>
 800ac58:	9f02      	ldr	r7, [sp, #8]
 800ac5a:	9001      	str	r0, [sp, #4]
 800ac5c:	0039      	movs	r1, r7
 800ac5e:	0028      	movs	r0, r5
 800ac60:	f7fe fe6c 	bl	800993c <_malloc_r>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d108      	bne.n	800ac7a <__smakebuf_r+0x4a>
 800ac68:	220c      	movs	r2, #12
 800ac6a:	5ea3      	ldrsh	r3, [r4, r2]
 800ac6c:	059a      	lsls	r2, r3, #22
 800ac6e:	d4ed      	bmi.n	800ac4c <__smakebuf_r+0x1c>
 800ac70:	2203      	movs	r2, #3
 800ac72:	4393      	bics	r3, r2
 800ac74:	431e      	orrs	r6, r3
 800ac76:	81a6      	strh	r6, [r4, #12]
 800ac78:	e7e2      	b.n	800ac40 <__smakebuf_r+0x10>
 800ac7a:	2380      	movs	r3, #128	@ 0x80
 800ac7c:	89a2      	ldrh	r2, [r4, #12]
 800ac7e:	6020      	str	r0, [r4, #0]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	6120      	str	r0, [r4, #16]
 800ac88:	6167      	str	r7, [r4, #20]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00c      	beq.n	800aca8 <__smakebuf_r+0x78>
 800ac8e:	0028      	movs	r0, r5
 800ac90:	230e      	movs	r3, #14
 800ac92:	5ee1      	ldrsh	r1, [r4, r3]
 800ac94:	f000 f820 	bl	800acd8 <_isatty_r>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d005      	beq.n	800aca8 <__smakebuf_r+0x78>
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	89a2      	ldrh	r2, [r4, #12]
 800aca0:	439a      	bics	r2, r3
 800aca2:	3b02      	subs	r3, #2
 800aca4:	4313      	orrs	r3, r2
 800aca6:	81a3      	strh	r3, [r4, #12]
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	9a01      	ldr	r2, [sp, #4]
 800acac:	4313      	orrs	r3, r2
 800acae:	81a3      	strh	r3, [r4, #12]
 800acb0:	e7cc      	b.n	800ac4c <__smakebuf_r+0x1c>
	...

0800acb4 <_fstat_r>:
 800acb4:	2300      	movs	r3, #0
 800acb6:	b570      	push	{r4, r5, r6, lr}
 800acb8:	4d06      	ldr	r5, [pc, #24]	@ (800acd4 <_fstat_r+0x20>)
 800acba:	0004      	movs	r4, r0
 800acbc:	0008      	movs	r0, r1
 800acbe:	0011      	movs	r1, r2
 800acc0:	602b      	str	r3, [r5, #0]
 800acc2:	f7f9 fec4 	bl	8004a4e <_fstat>
 800acc6:	1c43      	adds	r3, r0, #1
 800acc8:	d103      	bne.n	800acd2 <_fstat_r+0x1e>
 800acca:	682b      	ldr	r3, [r5, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d000      	beq.n	800acd2 <_fstat_r+0x1e>
 800acd0:	6023      	str	r3, [r4, #0]
 800acd2:	bd70      	pop	{r4, r5, r6, pc}
 800acd4:	20000518 	.word	0x20000518

0800acd8 <_isatty_r>:
 800acd8:	2300      	movs	r3, #0
 800acda:	b570      	push	{r4, r5, r6, lr}
 800acdc:	4d06      	ldr	r5, [pc, #24]	@ (800acf8 <_isatty_r+0x20>)
 800acde:	0004      	movs	r4, r0
 800ace0:	0008      	movs	r0, r1
 800ace2:	602b      	str	r3, [r5, #0]
 800ace4:	f7f9 fec1 	bl	8004a6a <_isatty>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d103      	bne.n	800acf4 <_isatty_r+0x1c>
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d000      	beq.n	800acf4 <_isatty_r+0x1c>
 800acf2:	6023      	str	r3, [r4, #0]
 800acf4:	bd70      	pop	{r4, r5, r6, pc}
 800acf6:	46c0      	nop			@ (mov r8, r8)
 800acf8:	20000518 	.word	0x20000518

0800acfc <_init>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	46c0      	nop			@ (mov r8, r8)
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr

0800ad08 <_fini>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	46c0      	nop			@ (mov r8, r8)
 800ad0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0e:	bc08      	pop	{r3}
 800ad10:	469e      	mov	lr, r3
 800ad12:	4770      	bx	lr
